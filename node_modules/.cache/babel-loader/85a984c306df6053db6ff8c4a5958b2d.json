{"ast":null,"code":"import BigNumber from'bignumber.js';/**\n * Convert 10.999 to 10999000\n */export function toBaseUnitBN(rawAmt,decimals){var raw=new BigNumber(rawAmt);var base=new BigNumber(10);var decimalsBN=new BigNumber(decimals);return raw.times(base.pow(decimalsBN)).integerValue();}/**\n * Convert 10999000 to 10.999\n */export var toTokenUnitsBN=function toTokenUnitsBN(tokenAmount,tokenDecimals){var amt=new BigNumber(tokenAmount);var digits=new BigNumber(10).pow(new BigNumber(tokenDecimals));return amt.div(digits);};export var isPos=function isPos(amount){return!amount.isZero()&&amount.isPositive();};export var ownership=function ownership(balance,totalSupply){return balance.multipliedBy(new BigNumber(100)).dividedBy(totalSupply);};/**\n * BigNumber string formatting\n */export var formatBN=function formatBN(amount,position){if(amount.isLessThan(new BigNumber(1))){return pad(amount.precision(position,BigNumber.ROUND_FLOOR).toFixed(),position);}return delineate(amount.toFixed(position,BigNumber.ROUND_FLOOR));};export var toFloat=function toFloat(a){return parseFloat(formatBN(a,2).split(',').join(''));};function delineate(bnStr){var parts=bnStr.split('.');return parts[0].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g,',')+'.'+parts[1];}function pad(bnStr,position){if(!bnStr.includes('.')){bnStr+='.';}var parts=bnStr.split('.');for(var i=0;i<position-parts[1].length;i++){bnStr+='0';}return bnStr;}export function formatMoney(n){n=n.toPrecision(3);return Math.abs(Number(n))>=1.0e9?Math.abs(Number(n))/1.0e9+'B':Math.abs(Number(n))>=1.0e6?Math.abs(Number(n))/1.0e6+'MM':Math.abs(Number(n))>=1.0e3?Math.abs(Number(n))/1.0e3+'K':Math.abs(Number(n));}","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/utils/number.ts"],"names":["BigNumber","toBaseUnitBN","rawAmt","decimals","raw","base","decimalsBN","times","pow","integerValue","toTokenUnitsBN","tokenAmount","tokenDecimals","amt","digits","div","isPos","amount","isZero","isPositive","ownership","balance","totalSupply","multipliedBy","dividedBy","formatBN","position","isLessThan","pad","precision","ROUND_FLOOR","toFixed","delineate","toFloat","a","parseFloat","split","join","bnStr","parts","toString","replace","includes","i","length","formatMoney","n","toPrecision","Math","abs","Number"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\n\n/**\n * Convert 10.999 to 10999000\n */\nexport function toBaseUnitBN(\n  rawAmt: string | number | BigNumber,\n  decimals: number\n): BigNumber {\n  const raw = new BigNumber(rawAmt);\n  const base = new BigNumber(10);\n  const decimalsBN = new BigNumber(decimals);\n  return raw.times(base.pow(decimalsBN)).integerValue();\n}\n\n/**\n * Convert 10999000 to 10.999\n */\nexport const toTokenUnitsBN = (\n  tokenAmount: string | number | BigNumber,\n  tokenDecimals: number\n): BigNumber => {\n  const amt = new BigNumber(tokenAmount);\n  const digits = new BigNumber(10).pow(new BigNumber(tokenDecimals));\n  return amt.div(digits);\n};\n\nexport const isPos = (amount: BigNumber): boolean => {\n  return !amount.isZero() && amount.isPositive();\n};\n\nexport const ownership = (\n  balance: BigNumber,\n  totalSupply: BigNumber\n): BigNumber => {\n  return balance.multipliedBy(new BigNumber(100)).dividedBy(totalSupply);\n};\n\n/**\n * BigNumber string formatting\n */\n\nexport const formatBN = (amount: BigNumber, position: number): string => {\n  if (amount.isLessThan(new BigNumber(1))) {\n    return pad(\n      amount.precision(position, BigNumber.ROUND_FLOOR).toFixed(),\n      position\n    );\n  }\n  return delineate(amount.toFixed(position, BigNumber.ROUND_FLOOR));\n};\n\nexport const toFloat = (a: BigNumber) => {\n  return parseFloat(formatBN(a, 2).split(',').join(''));\n};\n\nfunction delineate(bnStr) {\n  const parts = bnStr.split('.');\n  return (\n    parts[0].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + '.' + parts[1]\n  );\n}\n\nfunction pad(bnStr, position) {\n  if (!bnStr.includes('.')) {\n    bnStr += '.';\n  }\n\n  const parts = bnStr.split('.');\n  for (let i = 0; i < position - parts[1].length; i++) {\n    bnStr += '0';\n  }\n\n  return bnStr;\n}\n\nexport function formatMoney(n) {\n  n = n.toPrecision(3);\n  return Math.abs(Number(n)) >= 1.0e9\n    ? Math.abs(Number(n)) / 1.0e9 + 'B'\n    : Math.abs(Number(n)) >= 1.0e6\n    ? Math.abs(Number(n)) / 1.0e6 + 'MM'\n    : Math.abs(Number(n)) >= 1.0e3\n    ? Math.abs(Number(n)) / 1.0e3 + 'K'\n    : Math.abs(Number(n));\n}\n"]},"metadata":{},"sourceType":"module"}