{"ast":null,"code":"import _regeneratorRuntime from\"/Users/J/crypto/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/J/crypto/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/J/crypto/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable react-hooks/exhaustive-deps */import{Layout}from'@aragon/ui';import BigNumber from'bignumber.js';import React,{useEffect,useState}from'react';import{useParams}from'react-router-dom';import{QSD,QSDS,QSG}from'../../constants/tokens';import{POOL_EXIT_LOCKUP_EPOCHS}from'../../constants/values';import{getBalanceBonded,getBalanceOfStaged,getEpoch,getExpansionAmount,getInstantaneousQSDPrice,getPoolBalanceOfClaimable1,getPoolBalanceOfClaimable2,getPoolBalanceOfRewarded1,getPoolBalanceOfRewarded2,getPoolFluidUntil,getPoolStatusOf,getPoolTotalBonded,getTokenAllowance,getTokenBalance}from'../../utils/infura';import{toBaseUnitBN,toFloat,toTokenUnitsBN}from'../../utils/number';import{getPoolBondingAddress}from'../../utils/pool';import{approve,bondPool,depositPool,unbondPool,withdrawPool}from'../../utils/web3';import{BondUnbond,Guide,IconHeader,WithdrawDeposit}from'../common';import{Claim}from'./Claim';import AccountPageHeader from'./Header';import{Rewards}from'./Rewards';function Bonding(_ref){var user=_ref.user;var _useParams=useParams(),override=_useParams.override;if(override){user=override;}var _useState=useState(0),_useState2=_slicedToArray(_useState,2),epoch=_useState2[0],setEpoch=_useState2[1];var _useState3=useState(new BigNumber(0)),_useState4=_slicedToArray(_useState3,2),totalBonded=_useState4[0],setTotalBonded=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),poolBondingAddress=_useState6[0],setPoolBondingAddress=_useState6[1];var _useState7=useState(new BigNumber(0)),_useState8=_slicedToArray(_useState7,2),userQSDBalance=_useState8[0],setUserQSDBalance=_useState8[1];var _useState9=useState(new BigNumber(0)),_useState10=_slicedToArray(_useState9,2),userQSDAllowance=_useState10[0],setUserQSDAllowance=_useState10[1];var _useState11=useState(new BigNumber(0)),_useState12=_slicedToArray(_useState11,2),userQSDSBalance=_useState12[0],setUserQSDSBalance=_useState12[1];var _useState13=useState(new BigNumber(0)),_useState14=_slicedToArray(_useState13,2),totalQSDSSupply=_useState14[0],setTotalQSDSSupply=_useState14[1];var _useState15=useState(new BigNumber(0)),_useState16=_slicedToArray(_useState15,2),userStagedBalance=_useState16[0],setUserStagedBalance=_useState16[1];var _useState17=useState(new BigNumber(0)),_useState18=_slicedToArray(_useState17,2),userBondedBalance=_useState18[0],setUserBondedBalance=_useState18[1];var _useState19=useState(0),_useState20=_slicedToArray(_useState19,2),userStatus=_useState20[0],setUserStatus=_useState20[1];var _useState21=useState(0),_useState22=_slicedToArray(_useState21,2),userStatusUnlocked=_useState22[0],setUserStatusUnlocked=_useState22[1];var _useState23=useState(0),_useState24=_slicedToArray(_useState23,2),lockup=_useState24[0],setLockup=_useState24[1];var _useState25=useState(new BigNumber(0)),_useState26=_slicedToArray(_useState25,2),userRewardedQSD=_useState26[0],setUserRewardedQSD=_useState26[1];var _useState27=useState(new BigNumber(0)),_useState28=_slicedToArray(_useState27,2),userRewardedQSG=_useState28[0],setUserRewardedQSG=_useState28[1];var _useState29=useState(new BigNumber(0)),_useState30=_slicedToArray(_useState29,2),userClaimableQSD=_useState30[0],setUserClaimableQSD=_useState30[1];var _useState31=useState(new BigNumber(0)),_useState32=_slicedToArray(_useState31,2),userClaimableQSG=_useState32[0],setUserClaimableQSG=_useState32[1];var _useState33=useState(null),_useState34=_slicedToArray(_useState33,2),qsdPrice=_useState34[0],setQSDPrice=_useState34[1];var _useState35=useState(null),_useState36=_slicedToArray(_useState35,2),expansionAmount=_useState36[0],setExpansionAmount=_useState36[1];//APR and stuff\nuseEffect(function(){var updateAPR=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var poolBonding,_yield$Promise$all,_yield$Promise$all2,epoch,qsdPrice,expansionAmount,totalBonded;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getPoolBondingAddress();case 2:poolBonding=_context.sent;_context.next=5;return Promise.all([getEpoch(QSDS.addr),getInstantaneousQSDPrice(),getExpansionAmount(),getPoolTotalBonded(poolBonding)]);case 5:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,4);epoch=_yield$Promise$all2[0];qsdPrice=_yield$Promise$all2[1];expansionAmount=_yield$Promise$all2[2];totalBonded=_yield$Promise$all2[3];setEpoch(parseInt(epoch,10));setQSDPrice(qsdPrice);setExpansionAmount(expansionAmount);setTotalQSDSSupply(new BigNumber(totalQSDSSupply));setTotalBonded(toTokenUnitsBN(totalBonded,QSD.decimals));case 16:case\"end\":return _context.stop();}}},_callee);}));return function updateAPR(){return _ref2.apply(this,arguments);};}();updateAPR();},[]);//Update User balances\nuseEffect(function(){if(user===''){setUserQSDBalance(new BigNumber(0));setUserQSDAllowance(new BigNumber(0));setUserQSDSBalance(new BigNumber(0));setTotalQSDSSupply(new BigNumber(0));setUserStagedBalance(new BigNumber(0));setUserBondedBalance(new BigNumber(0));setUserStatus(0);return;}var isCancelled=false;function updateUserInfo(){return _updateUserInfo.apply(this,arguments);}function _updateUserInfo(){_updateUserInfo=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var poolAddress,_yield$Promise$all3,_yield$Promise$all4,poolTotalBondedStr,qsdBalance,qsdAllowance,stagedBalance,bondedBalance,status,fluidUntilStr,qsdRewardedStr,qsgRewardedStr,qsdClaimableStr,qsgClaimableStr,qsdRewarded,qsgRewarded,qsdClaimable,qsgClaimable,poolTotalBonded,userQSDBalance,userStagedBalance,userBondedBalance,userStatus,fluidUntil;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getPoolBondingAddress();case 2:poolAddress=_context2.sent;_context2.next=5;return Promise.all([getPoolTotalBonded(poolAddress),getTokenBalance(QSD.addr,user),getTokenAllowance(QSD.addr,user,poolAddress),getBalanceOfStaged(poolAddress,user),getBalanceBonded(poolAddress,user),getPoolStatusOf(poolAddress,user),getPoolFluidUntil(poolAddress,user),getPoolBalanceOfRewarded1(poolAddress,user),getPoolBalanceOfRewarded2(poolAddress,user),getPoolBalanceOfClaimable1(poolAddress,user),getPoolBalanceOfClaimable2(poolAddress,user)]);case 5:_yield$Promise$all3=_context2.sent;_yield$Promise$all4=_slicedToArray(_yield$Promise$all3,11);poolTotalBondedStr=_yield$Promise$all4[0];qsdBalance=_yield$Promise$all4[1];qsdAllowance=_yield$Promise$all4[2];stagedBalance=_yield$Promise$all4[3];bondedBalance=_yield$Promise$all4[4];status=_yield$Promise$all4[5];fluidUntilStr=_yield$Promise$all4[6];qsdRewardedStr=_yield$Promise$all4[7];qsgRewardedStr=_yield$Promise$all4[8];qsdClaimableStr=_yield$Promise$all4[9];qsgClaimableStr=_yield$Promise$all4[10];qsdRewarded=toTokenUnitsBN(qsdRewardedStr,QSD.decimals);qsgRewarded=toTokenUnitsBN(qsgRewardedStr,QSG.decimals);qsdClaimable=toTokenUnitsBN(qsdClaimableStr,QSD.decimals);qsgClaimable=toTokenUnitsBN(qsgClaimableStr,QSG.decimals);poolTotalBonded=toTokenUnitsBN(poolTotalBondedStr,QSD.decimals);userQSDBalance=toTokenUnitsBN(qsdBalance,QSD.decimals);userStagedBalance=toTokenUnitsBN(stagedBalance,QSDS.decimals);userBondedBalance=toTokenUnitsBN(bondedBalance,QSDS.decimals);userStatus=parseInt(status,10);fluidUntil=parseInt(fluidUntilStr,10);if(!isCancelled){setTotalBonded(poolTotalBonded);setPoolBondingAddress(poolAddress);setUserQSDBalance(new BigNumber(userQSDBalance));setUserQSDAllowance(new BigNumber(qsdAllowance));setUserQSDSBalance(new BigNumber(userQSDSBalance));setTotalQSDSSupply(new BigNumber(totalQSDSSupply));setUserStagedBalance(new BigNumber(userStagedBalance));setUserBondedBalance(new BigNumber(userBondedBalance));setUserRewardedQSD(new BigNumber(qsdRewarded));setUserRewardedQSG(new BigNumber(qsgRewarded));setUserClaimableQSD(new BigNumber(qsdClaimable));setUserClaimableQSG(new BigNumber(qsgClaimable));setUserStatus(userStatus);setUserStatusUnlocked(fluidUntil);setLockup(POOL_EXIT_LOCKUP_EPOCHS);}case 29:case\"end\":return _context2.stop();}}},_callee2);}));return _updateUserInfo.apply(this,arguments);}updateUserInfo();var id=setInterval(updateUserInfo,15000);// eslint-disable-next-line consistent-return\nreturn function(){isCancelled=true;clearInterval(id);};},[user]);var bondingWeeklyYield='...';var bondingHourlyYield='...';var bondingDailyYield='...';var bondingMonthlyYield='...';// Define number formatting\nvar options={minimumFractionDigits:0,maximumFractionDigits:2};var numberFormat=new Intl.NumberFormat('en-US',options);// Calculate DAO APR (4 hrs)\nif(qsdPrice&&totalBonded&&expansionAmount){if(epoch>72){var totalQSD=toFloat(totalBonded);var qsdToAdd=expansionAmount/2;var daoYield=qsdToAdd/totalQSD*100;bondingHourlyYield=numberFormat.format(daoYield/4)+'%';bondingDailyYield=numberFormat.format(daoYield*6)+'%';bondingWeeklyYield=numberFormat.format(daoYield*6*7)+'%';bondingMonthlyYield=numberFormat.format(daoYield*6*30)+'%';}else{bondingHourlyYield='0%';bondingDailyYield='0%';bondingWeeklyYield='0%';bondingMonthlyYield='0%';}}return/*#__PURE__*/React.createElement(Layout,null,/*#__PURE__*/React.createElement(Guide// bodyApr={\n//   <>\n//     <div>Hourly: {bondingHourlyYield}</div>\n//     <div>Daily: {bondingDailyYield}</div>\n//     <div>Weekly: {bondingWeeklyYield}</div>\n//   </>\n// }\n,{aprs:{hourly:bondingHourlyYield,daily:bondingDailyYield,weekly:bondingWeeklyYield,monthly:bondingMonthlyYield},bodyInstructions:/*#__PURE__*/React.createElement(\"p\",null,\"Step 1: Stage your QSD\",/*#__PURE__*/React.createElement(\"br\",null),\"Step 2: Bond your QSD *Note that you can only bond QSD when TWAP is <1*\",/*#__PURE__*/React.createElement(\"br\",null),\"\\xA0\\xA0 2.1: If TWAP is <1, you'll be rewarded QSG\",/*#__PURE__*/React.createElement(\"br\",null),\"\\xA0\\xA0 2.2: If TWAP is >=1, you'll be rewarded QSD\",/*#__PURE__*/React.createElement(\"br\",null),\"Step 3: Poke your rewards to move them to claimable\",/*#__PURE__*/React.createElement(\"br\",null),\"Step 4: Wait 1 epoch to claim claimable QSD and/or QSG\")}),/*#__PURE__*/React.createElement(IconHeader,{icon:/*#__PURE__*/React.createElement(\"i\",{className:\"fas fa-atom\"}),text:\"QSD Rewards\"}),/*#__PURE__*/React.createElement(AccountPageHeader,{accountQSDBalance:userQSDBalance,accountQSDSBalance:userQSDSBalance,totalBonded:totalBonded,accountStagedBalance:userStagedBalance,accountBondedBalance:userBondedBalance,accountStatus:userStatus,unlocked:userStatusUnlocked}),/*#__PURE__*/React.createElement(WithdrawDeposit,{suffix:\"QSD\",balance:userQSDBalance,allowance:userQSDAllowance,stagedBalance:userStagedBalance,status:userStatus,disabled:!user,handleApprove:function handleApprove(){approve(QSD.addr,poolBondingAddress);},handleDeposit:function handleDeposit(depositAmount){depositPool(poolBondingAddress,toBaseUnitBN(depositAmount,QSD.decimals),function(){});},handleWithdraw:function handleWithdraw(withdrawAmount){withdrawPool(poolBondingAddress,toBaseUnitBN(withdrawAmount,QSD.decimals),function(){});}}),/*#__PURE__*/React.createElement(BondUnbond,{extraTip:'Can only bond when QSD < 1 DAI.',suffix:\"QSD\",staged:userStagedBalance,bonded:userBondedBalance,status:userStatus,lockup:lockup,disabled:!user,handleBond:function handleBond(bondAmount){bondPool(poolBondingAddress,toBaseUnitBN(bondAmount,QSD.decimals),function(){});},handleUnbond:function handleUnbond(unbondAmount){unbondPool(poolBondingAddress,toBaseUnitBN(unbondAmount,QSD.decimals),function(){});}}),/*#__PURE__*/React.createElement(Claim,{userStatus:userStatus,poolAddress:poolBondingAddress,amountQSD:userClaimableQSD,amountQSG:userClaimableQSG}),/*#__PURE__*/React.createElement(Rewards,{poolAddress:poolBondingAddress,amountQSD:userRewardedQSD,amountQSG:userRewardedQSG}));}export default Bonding;","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/components/Bonding/index.tsx"],"names":["Layout","BigNumber","React","useEffect","useState","useParams","QSD","QSDS","QSG","POOL_EXIT_LOCKUP_EPOCHS","getBalanceBonded","getBalanceOfStaged","getEpoch","getExpansionAmount","getInstantaneousQSDPrice","getPoolBalanceOfClaimable1","getPoolBalanceOfClaimable2","getPoolBalanceOfRewarded1","getPoolBalanceOfRewarded2","getPoolFluidUntil","getPoolStatusOf","getPoolTotalBonded","getTokenAllowance","getTokenBalance","toBaseUnitBN","toFloat","toTokenUnitsBN","getPoolBondingAddress","approve","bondPool","depositPool","unbondPool","withdrawPool","BondUnbond","Guide","IconHeader","WithdrawDeposit","Claim","AccountPageHeader","Rewards","Bonding","user","override","epoch","setEpoch","totalBonded","setTotalBonded","poolBondingAddress","setPoolBondingAddress","userQSDBalance","setUserQSDBalance","userQSDAllowance","setUserQSDAllowance","userQSDSBalance","setUserQSDSBalance","totalQSDSSupply","setTotalQSDSSupply","userStagedBalance","setUserStagedBalance","userBondedBalance","setUserBondedBalance","userStatus","setUserStatus","userStatusUnlocked","setUserStatusUnlocked","lockup","setLockup","userRewardedQSD","setUserRewardedQSD","userRewardedQSG","setUserRewardedQSG","userClaimableQSD","setUserClaimableQSD","userClaimableQSG","setUserClaimableQSG","qsdPrice","setQSDPrice","expansionAmount","setExpansionAmount","updateAPR","poolBonding","Promise","all","addr","parseInt","decimals","isCancelled","updateUserInfo","poolAddress","poolTotalBondedStr","qsdBalance","qsdAllowance","stagedBalance","bondedBalance","status","fluidUntilStr","qsdRewardedStr","qsgRewardedStr","qsdClaimableStr","qsgClaimableStr","qsdRewarded","qsgRewarded","qsdClaimable","qsgClaimable","poolTotalBonded","fluidUntil","id","setInterval","clearInterval","bondingWeeklyYield","bondingHourlyYield","bondingDailyYield","bondingMonthlyYield","options","minimumFractionDigits","maximumFractionDigits","numberFormat","Intl","NumberFormat","totalQSD","qsdToAdd","daoYield","format","hourly","daily","weekly","monthly","depositAmount","withdrawAmount","bondAmount","unbondAmount"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { Layout } from '@aragon/ui';\nimport BigNumber from 'bignumber.js';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { QSD, QSDS, QSG } from '../../constants/tokens';\nimport { POOL_EXIT_LOCKUP_EPOCHS } from '../../constants/values';\nimport {\n  getBalanceBonded,\n  getBalanceOfStaged,\n  getEpoch,\n  getExpansionAmount,\n  getInstantaneousQSDPrice,\n  getPoolBalanceOfClaimable1,\n  getPoolBalanceOfClaimable2,\n  getPoolBalanceOfRewarded1,\n  getPoolBalanceOfRewarded2,\n  getPoolFluidUntil,\n  getPoolStatusOf,\n  getPoolTotalBonded,\n  getTokenAllowance,\n  getTokenBalance,\n} from '../../utils/infura';\nimport { toBaseUnitBN, toFloat, toTokenUnitsBN } from '../../utils/number';\nimport { getPoolBondingAddress } from '../../utils/pool';\nimport {\n  approve,\n  bondPool,\n  depositPool,\n  unbondPool,\n  withdrawPool,\n} from '../../utils/web3';\nimport { BondUnbond, Guide, IconHeader, WithdrawDeposit } from '../common';\nimport { Claim } from './Claim';\nimport AccountPageHeader from './Header';\nimport { Rewards } from './Rewards';\n\nfunction Bonding({ user }: { user: string }) {\n  const { override } = useParams();\n  if (override) {\n    user = override;\n  }\n\n  const [epoch, setEpoch] = useState<number>(0);\n  const [totalBonded, setTotalBonded] = useState(new BigNumber(0));\n  const [poolBondingAddress, setPoolBondingAddress] = useState<null | string>(\n    null\n  );\n  const [userQSDBalance, setUserQSDBalance] = useState(new BigNumber(0));\n  const [userQSDAllowance, setUserQSDAllowance] = useState(new BigNumber(0));\n  const [userQSDSBalance, setUserQSDSBalance] = useState(new BigNumber(0));\n  const [totalQSDSSupply, setTotalQSDSSupply] = useState(new BigNumber(0));\n  const [userStagedBalance, setUserStagedBalance] = useState(new BigNumber(0));\n  const [userBondedBalance, setUserBondedBalance] = useState(new BigNumber(0));\n  const [userStatus, setUserStatus] = useState(0);\n  const [userStatusUnlocked, setUserStatusUnlocked] = useState(0);\n  const [lockup, setLockup] = useState(0);\n  const [userRewardedQSD, setUserRewardedQSD] = useState(new BigNumber(0));\n  const [userRewardedQSG, setUserRewardedQSG] = useState(new BigNumber(0));\n  const [userClaimableQSD, setUserClaimableQSD] = useState(new BigNumber(0));\n  const [userClaimableQSG, setUserClaimableQSG] = useState(new BigNumber(0));\n\n  const [qsdPrice, setQSDPrice] = useState<BigNumber | null>(null);\n  const [expansionAmount, setExpansionAmount] = useState<number | null>(null);\n\n  //APR and stuff\n  useEffect(() => {\n    const updateAPR = async () => {\n      const poolBonding = await getPoolBondingAddress();\n\n      const [\n        epoch,\n        qsdPrice,\n        expansionAmount,\n        totalBonded,\n      ] = await Promise.all([\n        getEpoch(QSDS.addr),\n        getInstantaneousQSDPrice(),\n        getExpansionAmount(),\n        getPoolTotalBonded(poolBonding),\n      ]);\n\n      setEpoch(parseInt(epoch, 10));\n      setQSDPrice(qsdPrice);\n      setExpansionAmount(expansionAmount);\n      setTotalQSDSSupply(new BigNumber(totalQSDSSupply));\n      setTotalBonded(toTokenUnitsBN(totalBonded, QSD.decimals));\n    };\n\n    updateAPR();\n  }, []);\n\n  //Update User balances\n  useEffect(() => {\n    if (user === '') {\n      setUserQSDBalance(new BigNumber(0));\n      setUserQSDAllowance(new BigNumber(0));\n      setUserQSDSBalance(new BigNumber(0));\n      setTotalQSDSSupply(new BigNumber(0));\n      setUserStagedBalance(new BigNumber(0));\n      setUserBondedBalance(new BigNumber(0));\n      setUserStatus(0);\n      return;\n    }\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const poolAddress = await getPoolBondingAddress();\n\n      const [\n        poolTotalBondedStr,\n        qsdBalance,\n        qsdAllowance,\n        stagedBalance,\n        bondedBalance,\n        status,\n        fluidUntilStr,\n        qsdRewardedStr,\n        qsgRewardedStr,\n        qsdClaimableStr,\n        qsgClaimableStr,\n      ] = await Promise.all([\n        getPoolTotalBonded(poolAddress),\n        getTokenBalance(QSD.addr, user),\n        getTokenAllowance(QSD.addr, user, poolAddress),\n        getBalanceOfStaged(poolAddress, user),\n        getBalanceBonded(poolAddress, user),\n        getPoolStatusOf(poolAddress, user),\n        getPoolFluidUntil(poolAddress, user),\n        getPoolBalanceOfRewarded1(poolAddress, user),\n        getPoolBalanceOfRewarded2(poolAddress, user),\n        getPoolBalanceOfClaimable1(poolAddress, user),\n        getPoolBalanceOfClaimable2(poolAddress, user),\n      ]);\n\n      const qsdRewarded = toTokenUnitsBN(qsdRewardedStr, QSD.decimals);\n      const qsgRewarded = toTokenUnitsBN(qsgRewardedStr, QSG.decimals);\n      const qsdClaimable = toTokenUnitsBN(qsdClaimableStr, QSD.decimals);\n      const qsgClaimable = toTokenUnitsBN(qsgClaimableStr, QSG.decimals);\n      const poolTotalBonded = toTokenUnitsBN(poolTotalBondedStr, QSD.decimals);\n      const userQSDBalance = toTokenUnitsBN(qsdBalance, QSD.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, QSDS.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, QSDS.decimals);\n      const userStatus = parseInt(status, 10);\n      const fluidUntil = parseInt(fluidUntilStr, 10);\n\n      if (!isCancelled) {\n        setTotalBonded(poolTotalBonded);\n        setPoolBondingAddress(poolAddress);\n        setUserQSDBalance(new BigNumber(userQSDBalance));\n        setUserQSDAllowance(new BigNumber(qsdAllowance));\n        setUserQSDSBalance(new BigNumber(userQSDSBalance));\n        setTotalQSDSSupply(new BigNumber(totalQSDSSupply));\n        setUserStagedBalance(new BigNumber(userStagedBalance));\n        setUserBondedBalance(new BigNumber(userBondedBalance));\n        setUserRewardedQSD(new BigNumber(qsdRewarded));\n        setUserRewardedQSG(new BigNumber(qsgRewarded));\n        setUserClaimableQSD(new BigNumber(qsdClaimable));\n        setUserClaimableQSG(new BigNumber(qsgClaimable));\n        setUserStatus(userStatus);\n        setUserStatusUnlocked(fluidUntil);\n        setLockup(POOL_EXIT_LOCKUP_EPOCHS);\n      }\n    }\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n\n  let bondingWeeklyYield = '...';\n  let bondingHourlyYield = '...';\n  let bondingDailyYield = '...';\n  let bondingMonthlyYield = '...';\n\n  // Define number formatting\n  var options = { minimumFractionDigits: 0,\n                maximumFractionDigits: 2 };\n  var numberFormat = new Intl.NumberFormat('en-US', options);\n\n  // Calculate DAO APR (4 hrs)\n  if (qsdPrice && totalBonded && expansionAmount) {\n    if (epoch > 72) {\n      const totalQSD = toFloat(totalBonded);\n      const qsdToAdd = expansionAmount / 2;\n\n      const daoYield = (qsdToAdd / totalQSD) * 100;\n\n      bondingHourlyYield = numberFormat.format(daoYield / 4) + '%';\n      bondingDailyYield = numberFormat.format(daoYield * 6) + '%';\n      bondingWeeklyYield = numberFormat.format(daoYield * 6 * 7) + '%';\n      bondingMonthlyYield = numberFormat.format(daoYield * 6 * 30) + '%';\n    } else {\n      bondingHourlyYield = '0%';\n      bondingDailyYield = '0%';\n      bondingWeeklyYield = '0%';\n      bondingMonthlyYield = '0%';\n    }\n  }\n\n  return (\n    <Layout>\n      <Guide\n        // bodyApr={\n        //   <>\n        //     <div>Hourly: {bondingHourlyYield}</div>\n        //     <div>Daily: {bondingDailyYield}</div>\n        //     <div>Weekly: {bondingWeeklyYield}</div>\n        //   </>\n        // }\n        aprs={{\n          hourly: bondingHourlyYield,\n          daily: bondingDailyYield,\n          weekly: bondingWeeklyYield,\n          monthly: bondingMonthlyYield\n        }}\n        bodyInstructions={\n            <p>\n\n            Step 1: Stage your QSD\n            <br />\n            Step 2: Bond your QSD *Note that you can only bond QSD when TWAP is\n            &lt;1*\n            <br />\n            &nbsp;&nbsp; 2.1: If TWAP is &lt;1, you'll be rewarded QSG\n            <br />\n            &nbsp;&nbsp; 2.2: If TWAP is &gt;=1, you'll be rewarded QSD\n            <br />\n            Step 3: Poke your rewards to move them to claimable\n            <br />\n            Step 4: Wait 1 epoch to claim claimable QSD and/or QSG\n          </p>\n        }\n      />\n\n      <IconHeader icon={<i className='fas fa-atom' />} text='QSD Rewards' />\n\n      <AccountPageHeader\n        accountQSDBalance={userQSDBalance}\n        accountQSDSBalance={userQSDSBalance}\n        totalBonded={totalBonded}\n        accountStagedBalance={userStagedBalance}\n        accountBondedBalance={userBondedBalance}\n        accountStatus={userStatus}\n        unlocked={userStatusUnlocked}\n      />\n\n      <WithdrawDeposit\n        suffix='QSD'\n        balance={userQSDBalance}\n        allowance={userQSDAllowance}\n        stagedBalance={userStagedBalance}\n        status={userStatus}\n        disabled={!user}\n        handleApprove={() => {\n          approve(QSD.addr, poolBondingAddress);\n        }}\n        handleDeposit={(depositAmount) => {\n          depositPool(\n            poolBondingAddress,\n            toBaseUnitBN(depositAmount, QSD.decimals),\n            () => {}\n          );\n        }}\n        handleWithdraw={(withdrawAmount) => {\n          withdrawPool(\n            poolBondingAddress,\n            toBaseUnitBN(withdrawAmount, QSD.decimals),\n            () => {}\n          );\n        }}\n      />\n\n      <BondUnbond\n        extraTip={'Can only bond when QSD < 1 DAI.'}\n        suffix='QSD'\n        staged={userStagedBalance}\n        bonded={userBondedBalance}\n        status={userStatus}\n        lockup={lockup}\n        disabled={!user}\n        handleBond={(bondAmount) => {\n          bondPool(\n            poolBondingAddress,\n            toBaseUnitBN(bondAmount, QSD.decimals),\n            () => {}\n          );\n        }}\n        handleUnbond={(unbondAmount) => {\n          unbondPool(\n            poolBondingAddress,\n            toBaseUnitBN(unbondAmount, QSD.decimals),\n            () => {}\n          );\n        }}\n      />\n\n      <Claim\n        userStatus={userStatus}\n        poolAddress={poolBondingAddress}\n        amountQSD={userClaimableQSD}\n        amountQSG={userClaimableQSG}\n      />\n\n      <Rewards\n        poolAddress={poolBondingAddress}\n        amountQSD={userRewardedQSD}\n        amountQSG={userRewardedQSG}\n      />\n    </Layout>\n  );\n}\n\nexport default Bonding;\n"]},"metadata":{},"sourceType":"module"}