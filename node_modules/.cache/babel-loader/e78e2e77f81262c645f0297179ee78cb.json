{"ast":null,"code":"var _jsxFileName = \"/Users/J/crypto/dashboard/src/components/NavBar/TotalBalance.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport BigNumber from \"bignumber.js\";\nimport { getBalanceBonded, getBalanceOfStaged, getPoolBalanceOfBonded, getPoolBalanceOfClaimable, getPoolBalanceOfRewarded, getPoolBalanceOfStaged, getTokenBalance, getTokenTotalSupply } from \"../../utils/infura\";\nimport { QSD, QSDS, UNI } from \"../../constants/tokens\";\nimport { formatBN, toTokenUnitsBN } from \"../../utils/number\";\nimport { getPoolBondingAddress } from \"../../utils/pool\";\n\nfunction TotalBalance({\n  user\n}) {\n  // const [totalBalance, setTotalBalance] = useState(new BigNumber(0));\n  const [totalBalance, setTotalBalance] = useState(new BigNumber(0)); //Update User balances\n\n  useEffect(() => {\n    // if (user === '') {\n    //   setTotalBalance(new BigNumber(0));\n    //   return;\n    // }\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const poolAddress = await getPoolBondingAddress();\n      const [esdBalance, stagedBalance, bondedBalance, pairBalanceQSDStr, pairTotalSupplyUNIStr, userUNIBalanceStr, userPoolBondedBalanceStr, userPoolStagedBalanceStr, userPoolRewardedBalanceStr, userPoolClaimableBalanceStr] = await Promise.all([getTokenBalance(QSD.addr, user), getBalanceOfStaged(QSDS.addr, user), getBalanceBonded(QSDS.addr, user), getTokenBalance(QSD.addr, UNI.addr), getTokenTotalSupply(UNI.addr), getTokenBalance(UNI.addr, user), getPoolBalanceOfBonded(poolAddress, user), getPoolBalanceOfStaged(poolAddress, user), getPoolBalanceOfRewarded(poolAddress, user), getPoolBalanceOfClaimable(poolAddress, user)]);\n      const userBalance = toTokenUnitsBN(esdBalance, QSD.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, QSDS.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, QSDS.decimals);\n      const userUNIBalance = toTokenUnitsBN(userUNIBalanceStr, QSDS.decimals);\n      const userPoolBondedBalance = toTokenUnitsBN(userPoolBondedBalanceStr, QSDS.decimals);\n      const userPoolStagedBalance = toTokenUnitsBN(userPoolStagedBalanceStr, QSDS.decimals);\n      const userPoolRewardedBalance = toTokenUnitsBN(userPoolRewardedBalanceStr, QSDS.decimals);\n      const userPoolClaimableBalance = toTokenUnitsBN(userPoolClaimableBalanceStr, QSDS.decimals);\n      const UNItoQSD = new BigNumber(pairBalanceQSDStr).dividedBy(new BigNumber(pairTotalSupplyUNIStr));\n      const daoTotalBalance = userStagedBalance.plus(userBondedBalance);\n      const poolTotalBalance = UNItoQSD.multipliedBy(userPoolStagedBalance.plus(userPoolBondedBalance)).plus(userPoolRewardedBalance.plus(userPoolClaimableBalance));\n      const circulationBalance = UNItoQSD.multipliedBy(userUNIBalance).plus(userBalance);\n      const totalBalance = daoTotalBalance.plus(poolTotalBalance).plus(circulationBalance);\n\n      if (!isCancelled) {\n        setTotalBalance(totalBalance);\n      }\n    }\n\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000); // eslint-disable-next-line consistent-return\n\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: 14,\n      padding: 3,\n      fontWeight: 400,\n      lineHeight: 1.5,\n      fontFamily: 'aragon-ui-monospace, monospace'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, \"$\", formatBN(totalBalance, 2));\n}\n\nexport default TotalBalance;","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/components/NavBar/TotalBalance.tsx"],"names":["React","useEffect","useState","BigNumber","getBalanceBonded","getBalanceOfStaged","getPoolBalanceOfBonded","getPoolBalanceOfClaimable","getPoolBalanceOfRewarded","getPoolBalanceOfStaged","getTokenBalance","getTokenTotalSupply","QSD","QSDS","UNI","formatBN","toTokenUnitsBN","getPoolBondingAddress","TotalBalance","user","totalBalance","setTotalBalance","isCancelled","updateUserInfo","poolAddress","esdBalance","stagedBalance","bondedBalance","pairBalanceQSDStr","pairTotalSupplyUNIStr","userUNIBalanceStr","userPoolBondedBalanceStr","userPoolStagedBalanceStr","userPoolRewardedBalanceStr","userPoolClaimableBalanceStr","Promise","all","addr","userBalance","decimals","userStagedBalance","userBondedBalance","userUNIBalance","userPoolBondedBalance","userPoolStagedBalance","userPoolRewardedBalance","userPoolClaimableBalance","UNItoQSD","dividedBy","daoTotalBalance","plus","poolTotalBalance","multipliedBy","circulationBalance","id","setInterval","clearInterval","fontSize","padding","fontWeight","lineHeight","fontFamily"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport BigNumber from \"bignumber.js\";\nimport {\n  getBalanceBonded,\n  getBalanceOfStaged,\n  getPoolBalanceOfBonded, getPoolBalanceOfClaimable, getPoolBalanceOfRewarded, getPoolBalanceOfStaged,\n  getTokenBalance,\n  getTokenTotalSupply\n} from \"../../utils/infura\";\nimport {QSD, QSDS, UNI} from \"../../constants/tokens\";\nimport {formatBN, toTokenUnitsBN} from \"../../utils/number\";\nimport {getPoolBondingAddress} from \"../../utils/pool\";\n\ntype TotalBalanceProps = {\n  user: string,\n}\n\nfunction TotalBalance({ user }: TotalBalanceProps) {\n  // const [totalBalance, setTotalBalance] = useState(new BigNumber(0));\n\n  const [totalBalance, setTotalBalance] = useState(new BigNumber(0));\n\n  //Update User balances\n  useEffect(() => {\n    // if (user === '') {\n    //   setTotalBalance(new BigNumber(0));\n    //   return;\n    // }\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const poolAddress = await getPoolBondingAddress();\n\n      const [\n        esdBalance, stagedBalance, bondedBalance,\n        pairBalanceQSDStr, pairTotalSupplyUNIStr, userUNIBalanceStr,\n        userPoolBondedBalanceStr, userPoolStagedBalanceStr,\n        userPoolRewardedBalanceStr, userPoolClaimableBalanceStr,\n      ] = await Promise.all([\n        getTokenBalance(QSD.addr, user),\n        getBalanceOfStaged(QSDS.addr, user),\n        getBalanceBonded(QSDS.addr, user),\n\n        getTokenBalance(QSD.addr, UNI.addr),\n        getTokenTotalSupply(UNI.addr),\n        getTokenBalance(UNI.addr, user),\n        getPoolBalanceOfBonded(poolAddress, user),\n        getPoolBalanceOfStaged(poolAddress, user),\n        getPoolBalanceOfRewarded(poolAddress, user),\n        getPoolBalanceOfClaimable(poolAddress, user),\n      ]);\n\n      const userBalance = toTokenUnitsBN(esdBalance, QSD.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, QSDS.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, QSDS.decimals);\n\n      const userUNIBalance = toTokenUnitsBN(userUNIBalanceStr, QSDS.decimals);\n      const userPoolBondedBalance = toTokenUnitsBN(userPoolBondedBalanceStr, QSDS.decimals);\n      const userPoolStagedBalance = toTokenUnitsBN(userPoolStagedBalanceStr, QSDS.decimals);\n      const userPoolRewardedBalance = toTokenUnitsBN(userPoolRewardedBalanceStr, QSDS.decimals);\n      const userPoolClaimableBalance = toTokenUnitsBN(userPoolClaimableBalanceStr, QSDS.decimals);\n\n      const UNItoQSD = new BigNumber(pairBalanceQSDStr).dividedBy(new BigNumber(pairTotalSupplyUNIStr));\n\n      const daoTotalBalance = userStagedBalance.plus(userBondedBalance);\n      const poolTotalBalance = UNItoQSD.multipliedBy(userPoolStagedBalance.plus(userPoolBondedBalance))\n        .plus(userPoolRewardedBalance.plus(userPoolClaimableBalance));\n      const circulationBalance = UNItoQSD.multipliedBy(userUNIBalance).plus(userBalance)\n\n      const totalBalance = daoTotalBalance.plus(poolTotalBalance).plus(circulationBalance)\n\n      if (!isCancelled) {\n        setTotalBalance(totalBalance);\n      }\n    }\n\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n\n  return (\n    <div style={{ fontSize: 14, padding: 3, fontWeight: 400, lineHeight: 1.5, fontFamily: 'aragon-ui-monospace, monospace'}}>\n      ${formatBN(totalBalance, 2)}\n    </div>\n  );\n}\n\n\nexport default TotalBalance;\n"]},"metadata":{},"sourceType":"module"}