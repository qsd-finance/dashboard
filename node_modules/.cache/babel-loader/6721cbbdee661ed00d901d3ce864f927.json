{"ast":null,"code":"var _jsxFileName = \"/Users/J/crypto/dashboard/src/components/Wallet/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Layout } from '@aragon/ui';\nimport BigNumber from 'bignumber.js';\nimport { getBalanceBonded, getBalanceOfStaged, getEpoch, getExpansionAmount, getFluidUntil, getInstantaneousQSDPrice, getLockedUntil, getStatusOf, getTokenAllowance, getTokenBalance, getTokenTotalSupply, getTotalBonded } from '../../utils/infura';\nimport { QSD, QSDS } from '../../constants/tokens';\nimport { DAO_EXIT_LOCKUP_EPOCHS } from '../../constants/values';\nimport { toTokenUnitsBN, toBaseUnitBN, toFloat } from '../../utils/number';\nimport { approve, deposit, withdraw, bond, unbondUnderlying } from '../../utils/web3';\nimport AccountPageHeader from './Header';\nimport { WithdrawDeposit, BondUnbond, IconHeader, Guide } from '../common';\n\nfunction Wallet({\n  user\n}) {\n  const {\n    override\n  } = useParams();\n\n  if (override) {\n    user = override;\n  }\n\n  const [epoch, setEpoch] = useState(0);\n  const [qsdPrice, setQSDPrice] = useState(null);\n  const [totalBonded, setTotalBonded] = useState(new BigNumber(0));\n  const [userQSDBalance, setUserQSDBalance] = useState(new BigNumber(0));\n  const [userQSDAllowance, setUserQSDAllowance] = useState(new BigNumber(0));\n  const [userQSDSBalance, setUserQSDSBalance] = useState(new BigNumber(0));\n  const [totalQSDSSupply, setTotalQSDSSupply] = useState(new BigNumber(0));\n  const [userStagedBalance, setUserStagedBalance] = useState(new BigNumber(0));\n  const [userBondedBalance, setUserBondedBalance] = useState(new BigNumber(0));\n  const [userStatus, setUserStatus] = useState(0);\n  const [userStatusUnlocked, setUserStatusUnlocked] = useState(0);\n  const [lockup, setLockup] = useState(0);\n  const [expansionAmount, setExpansionAmount] = useState(null); // Updates APR\n\n  useEffect(() => {\n    const updateAPR = async () => {\n      const [epoch, qsdPrice, expansionAmount, esdsSupply, esdsBonded] = await Promise.all([getEpoch(QSDS.addr), getInstantaneousQSDPrice(), getExpansionAmount(), getTokenTotalSupply(QSDS.addr), getTotalBonded(QSDS.addr)]);\n      const totalQSDSSupply = toTokenUnitsBN(esdsSupply, QSDS.decimals);\n      setEpoch(parseInt(epoch, 10));\n      setLockup(DAO_EXIT_LOCKUP_EPOCHS);\n      setQSDPrice(qsdPrice);\n      setExpansionAmount(expansionAmount);\n      setTotalQSDSSupply(new BigNumber(totalQSDSSupply));\n      setTotalBonded(toTokenUnitsBN(esdsBonded, QSD.decimals));\n    };\n\n    updateAPR();\n  }, []); //Update User balances\n\n  useEffect(() => {\n    if (user === '') {\n      setUserQSDBalance(new BigNumber(0));\n      setUserQSDAllowance(new BigNumber(0));\n      setUserQSDSBalance(new BigNumber(0));\n      setTotalQSDSSupply(new BigNumber(0));\n      setUserStagedBalance(new BigNumber(0));\n      setUserBondedBalance(new BigNumber(0));\n      setUserStatus(0);\n      return;\n    }\n\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const [esdBalance, esdAllowance, esdsBalance, stagedBalance, bondedBalance, status, fluidUntilStr, lockedUntilStr] = await Promise.all([getTokenBalance(QSD.addr, user), getTokenAllowance(QSD.addr, user, QSDS.addr), getTokenBalance(QSDS.addr, user), getBalanceOfStaged(QSDS.addr, user), getBalanceBonded(QSDS.addr, user), getStatusOf(QSDS.addr, user), getFluidUntil(QSDS.addr, user), getLockedUntil(QSDS.addr, user)]);\n      const userQSDBalance = toTokenUnitsBN(esdBalance, QSD.decimals);\n      const userQSDSBalance = toTokenUnitsBN(esdsBalance, QSDS.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, QSDS.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, QSDS.decimals);\n      const userStatus = parseInt(status, 10);\n      const fluidUntil = parseInt(fluidUntilStr, 10);\n      const lockedUntil = parseInt(lockedUntilStr, 10);\n\n      if (!isCancelled) {\n        setUserQSDBalance(new BigNumber(userQSDBalance));\n        setUserQSDAllowance(new BigNumber(esdAllowance));\n        setUserQSDSBalance(new BigNumber(userQSDSBalance));\n        setUserStagedBalance(new BigNumber(userStagedBalance));\n        setUserBondedBalance(new BigNumber(userBondedBalance));\n        setUserStatus(userStatus);\n        setUserStatusUnlocked(Math.max(fluidUntil, lockedUntil));\n      }\n    }\n\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000); // eslint-disable-next-line consistent-return\n\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n  let daoWeeklyYield = '...';\n  let daoHourlyYield = '...';\n  let daoDailyYield = '...';\n  let daoMonthlyYield = '...'; // Define number formatting\n\n  var options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2\n  };\n  var numberFormat = new Intl.NumberFormat('en-US', options); // Calculate DAO APR (4 hrs)\n\n  if (qsdPrice && totalBonded && expansionAmount) {\n    if (epoch <= 72) {\n      const totalQSD = toFloat(totalBonded);\n      const qsdToAdd = expansionAmount / 2;\n      const daoYield = qsdToAdd / totalQSD * 100;\n      daoHourlyYield = numberFormat.format(daoYield / 4) + '%';\n      daoDailyYield = numberFormat.format(daoYield * 6) + '%';\n      daoWeeklyYield = numberFormat.format(daoYield * 6 * 7) + '%';\n      daoMonthlyYield = numberFormat.format(daoYield * 6 * 30) + '%';\n    } else {\n      daoWeeklyYield = '0%';\n      daoHourlyYield = '0%';\n      daoDailyYield = '0%';\n      daoMonthlyYield = '0%';\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Guide, {\n    aprs: {\n      hourly: daoHourlyYield,\n      daily: daoDailyYield,\n      weekly: daoWeeklyYield,\n      monthly: daoMonthlyYield\n    },\n    bodyInstructions: /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }\n    }, \"Note: Rewards are only applicable during bootstrapping phase i.e. the first 72 epochs\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }), \"Step 1: Stage your QSD\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }), \"Step 2: Bond your QSD\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }\n    }), \"Step 3: Unbond any amount of rewards you wish to claim\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }\n    }), \"Step 4: Claim rewards after 1 epoch\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }\n    }, \"Note: Please unbond your QSD during epoch 73. At the beginning of epoch 74 withdraw your QSD to your wallet and then stage and bond your tokens on the QSD page to continue receiving rewards. (You will be unable to bond QSD when TWAP is above peg from Epoch 75 onwards)\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(IconHeader, {\n    icon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-dot-circle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 15\n      }\n    }),\n    text: \"Bootstrapping Rewards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AccountPageHeader, {\n    accountQSDBalance: userQSDBalance,\n    accountQSDSBalance: userQSDSBalance,\n    totalQSDSSupply: totalQSDSSupply,\n    accountStagedBalance: userStagedBalance,\n    accountBondedBalance: userBondedBalance,\n    accountStatus: userStatus,\n    unlocked: userStatusUnlocked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(WithdrawDeposit, {\n    suffix: \"QSD\",\n    balance: userQSDBalance,\n    allowance: userQSDAllowance,\n    stagedBalance: userStagedBalance,\n    status: userStatus,\n    disabled: !user,\n    handleApprove: () => {\n      approve(QSD.addr, QSDS.addr);\n    },\n    handleDeposit: depositAmount => {\n      deposit(QSDS.addr, toBaseUnitBN(depositAmount, QSD.decimals));\n    },\n    handleWithdraw: withdrawAmount => {\n      withdraw(QSDS.addr, toBaseUnitBN(withdrawAmount, QSD.decimals));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BondUnbond, {\n    suffix: \"QSD\",\n    staged: userStagedBalance,\n    bonded: userBondedBalance,\n    status: userStatus,\n    lockup: lockup,\n    disabled: !user,\n    handleBond: bondAmount => {\n      bond(QSDS.addr, toBaseUnitBN(bondAmount, QSD.decimals));\n    },\n    handleUnbond: unbondAmount => {\n      unbondUnderlying(QSDS.addr, toBaseUnitBN(unbondAmount, QSD.decimals));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Wallet;","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/components/Wallet/index.tsx"],"names":["React","useState","useEffect","useParams","Layout","BigNumber","getBalanceBonded","getBalanceOfStaged","getEpoch","getExpansionAmount","getFluidUntil","getInstantaneousQSDPrice","getLockedUntil","getStatusOf","getTokenAllowance","getTokenBalance","getTokenTotalSupply","getTotalBonded","QSD","QSDS","DAO_EXIT_LOCKUP_EPOCHS","toTokenUnitsBN","toBaseUnitBN","toFloat","approve","deposit","withdraw","bond","unbondUnderlying","AccountPageHeader","WithdrawDeposit","BondUnbond","IconHeader","Guide","Wallet","user","override","epoch","setEpoch","qsdPrice","setQSDPrice","totalBonded","setTotalBonded","userQSDBalance","setUserQSDBalance","userQSDAllowance","setUserQSDAllowance","userQSDSBalance","setUserQSDSBalance","totalQSDSSupply","setTotalQSDSSupply","userStagedBalance","setUserStagedBalance","userBondedBalance","setUserBondedBalance","userStatus","setUserStatus","userStatusUnlocked","setUserStatusUnlocked","lockup","setLockup","expansionAmount","setExpansionAmount","updateAPR","esdsSupply","esdsBonded","Promise","all","addr","decimals","parseInt","isCancelled","updateUserInfo","esdBalance","esdAllowance","esdsBalance","stagedBalance","bondedBalance","status","fluidUntilStr","lockedUntilStr","fluidUntil","lockedUntil","Math","max","id","setInterval","clearInterval","daoWeeklyYield","daoHourlyYield","daoDailyYield","daoMonthlyYield","options","minimumFractionDigits","maximumFractionDigits","numberFormat","Intl","NumberFormat","totalQSD","qsdToAdd","daoYield","format","hourly","daily","weekly","monthly","depositAmount","withdrawAmount","bondAmount","unbondAmount"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Layout } from '@aragon/ui';\n\nimport BigNumber from 'bignumber.js';\nimport {\n  getBalanceBonded,\n  getBalanceOfStaged,\n  getEpoch,\n  getExpansionAmount,\n  getFluidUntil,\n  getInstantaneousQSDPrice,\n  getLockedUntil,\n  getStatusOf,\n  getTokenAllowance,\n  getTokenBalance,\n  getTokenTotalSupply,\n  getTotalBonded,\n} from '../../utils/infura';\nimport { QSD, QSDS } from '../../constants/tokens';\nimport { DAO_EXIT_LOCKUP_EPOCHS } from '../../constants/values';\nimport { toTokenUnitsBN, toBaseUnitBN, toFloat } from '../../utils/number';\nimport {\n  approve,\n  deposit,\n  withdraw,\n  bond,\n  unbondUnderlying,\n} from '../../utils/web3';\n\nimport AccountPageHeader from './Header';\nimport { WithdrawDeposit, BondUnbond, IconHeader, Guide } from '../common';\n\nfunction Wallet({ user }: { user: string }) {\n  const { override } = useParams();\n  if (override) {\n    user = override;\n  }\n\n  const [epoch, setEpoch] = useState<number>(0);\n  const [qsdPrice, setQSDPrice] = useState<BigNumber | null>(null);\n  const [totalBonded, setTotalBonded] = useState(new BigNumber(0));\n  const [userQSDBalance, setUserQSDBalance] = useState(new BigNumber(0));\n  const [userQSDAllowance, setUserQSDAllowance] = useState(new BigNumber(0));\n  const [userQSDSBalance, setUserQSDSBalance] = useState(new BigNumber(0));\n  const [totalQSDSSupply, setTotalQSDSSupply] = useState(new BigNumber(0));\n  const [userStagedBalance, setUserStagedBalance] = useState(new BigNumber(0));\n  const [userBondedBalance, setUserBondedBalance] = useState(new BigNumber(0));\n  const [userStatus, setUserStatus] = useState(0);\n  const [userStatusUnlocked, setUserStatusUnlocked] = useState(0);\n  const [lockup, setLockup] = useState(0);\n  const [expansionAmount, setExpansionAmount] = useState<number | null>(null);\n\n  // Updates APR\n  useEffect(() => {\n    const updateAPR = async () => {\n      const [\n        epoch,\n        qsdPrice,\n        expansionAmount,\n        esdsSupply,\n        esdsBonded,\n      ] = await Promise.all([\n        getEpoch(QSDS.addr),\n        getInstantaneousQSDPrice(),\n        getExpansionAmount(),\n        getTokenTotalSupply(QSDS.addr),\n        getTotalBonded(QSDS.addr),\n      ]);\n\n      const totalQSDSSupply = toTokenUnitsBN(esdsSupply, QSDS.decimals);\n\n      setEpoch(parseInt(epoch, 10));\n      setLockup(DAO_EXIT_LOCKUP_EPOCHS);\n      setQSDPrice(qsdPrice);\n      setExpansionAmount(expansionAmount);\n      setTotalQSDSSupply(new BigNumber(totalQSDSSupply));\n      setTotalBonded(toTokenUnitsBN(esdsBonded, QSD.decimals));\n    };\n\n    updateAPR();\n  }, []);\n\n  //Update User balances\n  useEffect(() => {\n    if (user === '') {\n      setUserQSDBalance(new BigNumber(0));\n      setUserQSDAllowance(new BigNumber(0));\n      setUserQSDSBalance(new BigNumber(0));\n      setTotalQSDSSupply(new BigNumber(0));\n      setUserStagedBalance(new BigNumber(0));\n      setUserBondedBalance(new BigNumber(0));\n      setUserStatus(0);\n      return;\n    }\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const [\n        esdBalance,\n        esdAllowance,\n        esdsBalance,\n        stagedBalance,\n        bondedBalance,\n        status,\n        fluidUntilStr,\n        lockedUntilStr,\n      ] = await Promise.all([\n        getTokenBalance(QSD.addr, user),\n        getTokenAllowance(QSD.addr, user, QSDS.addr),\n        getTokenBalance(QSDS.addr, user),\n        getBalanceOfStaged(QSDS.addr, user),\n        getBalanceBonded(QSDS.addr, user),\n        getStatusOf(QSDS.addr, user),\n\n        getFluidUntil(QSDS.addr, user),\n        getLockedUntil(QSDS.addr, user),\n      ]);\n\n      const userQSDBalance = toTokenUnitsBN(esdBalance, QSD.decimals);\n      const userQSDSBalance = toTokenUnitsBN(esdsBalance, QSDS.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, QSDS.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, QSDS.decimals);\n      const userStatus = parseInt(status, 10);\n      const fluidUntil = parseInt(fluidUntilStr, 10);\n      const lockedUntil = parseInt(lockedUntilStr, 10);\n\n      if (!isCancelled) {\n        setUserQSDBalance(new BigNumber(userQSDBalance));\n        setUserQSDAllowance(new BigNumber(esdAllowance));\n        setUserQSDSBalance(new BigNumber(userQSDSBalance));\n        setUserStagedBalance(new BigNumber(userStagedBalance));\n        setUserBondedBalance(new BigNumber(userBondedBalance));\n        setUserStatus(userStatus);\n        setUserStatusUnlocked(Math.max(fluidUntil, lockedUntil));\n      }\n    }\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n\n  let daoWeeklyYield = '...';\n  let daoHourlyYield = '...';\n  let daoDailyYield = '...';\n  let daoMonthlyYield = '...';\n\n  // Define number formatting\n  var options = { minimumFractionDigits: 0,\n                maximumFractionDigits: 2 };\n  var numberFormat = new Intl.NumberFormat('en-US', options);\n\n  // Calculate DAO APR (4 hrs)\n  if (qsdPrice && totalBonded && expansionAmount) {\n    if (epoch <= 72) {\n      const totalQSD = toFloat(totalBonded);\n      const qsdToAdd = expansionAmount / 2;\n\n      const daoYield = (qsdToAdd / totalQSD) * 100;\n\n      daoHourlyYield = numberFormat.format(daoYield / 4) + '%';\n      daoDailyYield = numberFormat.format(daoYield * 6) + '%';\n      daoWeeklyYield = numberFormat.format(daoYield * 6 * 7) + '%';\n      daoMonthlyYield = numberFormat.format(daoYield * 6 * 30) + '%';\n    } else {\n      daoWeeklyYield = '0%';\n      daoHourlyYield = '0%';\n      daoDailyYield = '0%';\n      daoMonthlyYield = '0%';\n    }\n  }\n\n  return (\n    <Layout>\n      <Guide\n        aprs={{\n          hourly: daoHourlyYield,\n          daily: daoDailyYield,\n          weekly: daoWeeklyYield,\n          monthly: daoMonthlyYield\n        }}\n        bodyInstructions={\n          <p>\n            Note: Rewards are only applicable during bootstrapping phase i.e.\n            the first 72 epochs\n            <br />\n            <br />\n            Step 1: Stage your QSD\n            <br />\n            Step 2: Bond your QSD\n            <br />\n            Step 3: Unbond any amount of rewards you wish to claim\n            <br />\n            Step 4: Claim rewards after 1 epoch\n            <br />\n            <br />\n            <b>\n              Note: Please unbond your QSD during epoch 73. At the beginning of\n              epoch 74 withdraw your QSD to your wallet and then stage and bond\n              your tokens on the QSD page to continue receiving rewards. (You\n              will be unable to bond QSD when TWAP is above peg from Epoch 75\n              onwards)\n            </b>\n          </p>\n        }\n      />\n\n      <IconHeader\n        icon={<i className='fas fa-dot-circle' />}\n        text='Bootstrapping Rewards'\n      />\n\n      <AccountPageHeader\n        accountQSDBalance={userQSDBalance}\n        accountQSDSBalance={userQSDSBalance}\n        totalQSDSSupply={totalQSDSSupply}\n        accountStagedBalance={userStagedBalance}\n        accountBondedBalance={userBondedBalance}\n        accountStatus={userStatus}\n        unlocked={userStatusUnlocked}\n      />\n\n      {/* <WithdrawDeposit\n        user={user}\n        balance={userQSDBalance}\n        allowance={userQSDAllowance}\n        stagedBalance={userStagedBalance}\n        status={userStatus}\n      /> */}\n\n      <WithdrawDeposit\n        suffix='QSD'\n        balance={userQSDBalance}\n        allowance={userQSDAllowance}\n        stagedBalance={userStagedBalance}\n        status={userStatus}\n        disabled={!user}\n        handleApprove={() => {\n          approve(QSD.addr, QSDS.addr);\n        }}\n        handleDeposit={(depositAmount) => {\n          deposit(QSDS.addr, toBaseUnitBN(depositAmount, QSD.decimals));\n        }}\n        handleWithdraw={(withdrawAmount) => {\n          withdraw(QSDS.addr, toBaseUnitBN(withdrawAmount, QSD.decimals));\n        }}\n      />\n\n      {/* <BondUnbond\n        staged={userStagedBalance}\n        bonded={userBondedBalance}\n        status={userStatus}\n        lockup={lockup}\n      /> */}\n\n      <BondUnbond\n        suffix='QSD'\n        staged={userStagedBalance}\n        bonded={userBondedBalance}\n        status={userStatus}\n        lockup={lockup}\n        disabled={!user}\n        handleBond={(bondAmount) => {\n          bond(QSDS.addr, toBaseUnitBN(bondAmount, QSD.decimals));\n        }}\n        handleUnbond={(unbondAmount) => {\n          unbondUnderlying(QSDS.addr, toBaseUnitBN(unbondAmount, QSD.decimals));\n        }}\n      />\n    </Layout>\n  );\n}\n\nexport default Wallet;\n"]},"metadata":{},"sourceType":"module"}