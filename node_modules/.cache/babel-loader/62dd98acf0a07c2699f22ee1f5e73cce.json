{"ast":null,"code":"import _regeneratorRuntime from\"/Users/J/crypto/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/J/crypto/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/J/crypto/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import BigNumber from\"bignumber.js\";import{getBalanceBonded,getBalanceOfStaged,getPoolBalanceOfBonded,getPoolBalanceOfClaimable,getPoolBalanceOfRewarded,getPoolBalanceOfStaged,getTokenBalance,getTokenTotalSupply}from\"../../utils/infura\";import{QSD,QSDS,UNI}from\"../../constants/tokens\";import{toTokenUnitsBN}from\"../../utils/number\";import{getPoolBondingAddress}from\"../../utils/pool\";import{formatBN}from'../../utils/number';function TotalBalance(_ref){var user=_ref.user;// const [totalBalance, setTotalBalance] = useState(new BigNumber(0));\nvar _useState=useState(new BigNumber(0)),_useState2=_slicedToArray(_useState,2),totalBalance=_useState2[0],setTotalBalance=_useState2[1];//Update User balances\nuseEffect(function(){// if (user === '') {\n//   setTotalBalance(new BigNumber(0));\n//   return;\n// }\nvar isCancelled=false;function updateUserInfo(){return _updateUserInfo.apply(this,arguments);}function _updateUserInfo(){_updateUserInfo=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var poolAddress,_yield$Promise$all,_yield$Promise$all2,esdBalance,stagedBalance,bondedBalance,pairBalanceQSDStr,pairTotalSupplyUNIStr,userUNIBalanceStr,userPoolBondedBalanceStr,userPoolStagedBalanceStr,userPoolRewardedBalanceStr,userPoolClaimableBalanceStr,userBalance,userStagedBalance,userBondedBalance,userUNIBalance,userPoolBondedBalance,userPoolStagedBalance,userPoolRewardedBalance,userPoolClaimableBalance,UNItoQSD,daoTotalBalance,poolTotalBalance,circulationBalance,totalBalance;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getPoolBondingAddress();case 2:poolAddress=_context.sent;_context.next=5;return Promise.all([getTokenBalance(QSD.addr,user),getBalanceOfStaged(QSDS.addr,user),getBalanceBonded(QSDS.addr,user),getTokenBalance(QSD.addr,UNI.addr),getTokenTotalSupply(UNI.addr),getTokenBalance(UNI.addr,user),getPoolBalanceOfBonded(poolAddress,user),getPoolBalanceOfStaged(poolAddress,user),getPoolBalanceOfRewarded(poolAddress,user),getPoolBalanceOfClaimable(poolAddress,user)]);case 5:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,10);esdBalance=_yield$Promise$all2[0];stagedBalance=_yield$Promise$all2[1];bondedBalance=_yield$Promise$all2[2];pairBalanceQSDStr=_yield$Promise$all2[3];pairTotalSupplyUNIStr=_yield$Promise$all2[4];userUNIBalanceStr=_yield$Promise$all2[5];userPoolBondedBalanceStr=_yield$Promise$all2[6];userPoolStagedBalanceStr=_yield$Promise$all2[7];userPoolRewardedBalanceStr=_yield$Promise$all2[8];userPoolClaimableBalanceStr=_yield$Promise$all2[9];userBalance=toTokenUnitsBN(esdBalance,QSD.decimals);userStagedBalance=toTokenUnitsBN(stagedBalance,QSDS.decimals);userBondedBalance=toTokenUnitsBN(bondedBalance,QSDS.decimals);userUNIBalance=toTokenUnitsBN(userUNIBalanceStr,QSDS.decimals);userPoolBondedBalance=toTokenUnitsBN(userPoolBondedBalanceStr,QSDS.decimals);userPoolStagedBalance=toTokenUnitsBN(userPoolStagedBalanceStr,QSDS.decimals);userPoolRewardedBalance=toTokenUnitsBN(userPoolRewardedBalanceStr,QSDS.decimals);userPoolClaimableBalance=toTokenUnitsBN(userPoolClaimableBalanceStr,QSDS.decimals);UNItoQSD=new BigNumber(pairBalanceQSDStr).dividedBy(new BigNumber(pairTotalSupplyUNIStr));daoTotalBalance=userStagedBalance.plus(userBondedBalance);poolTotalBalance=UNItoQSD.multipliedBy(userPoolStagedBalance.plus(userPoolBondedBalance)).plus(userPoolRewardedBalance.plus(userPoolClaimableBalance));circulationBalance=UNItoQSD.multipliedBy(userUNIBalance).plus(userBalance);totalBalance=daoTotalBalance.plus(poolTotalBalance).plus(circulationBalance);if(!isCancelled){setTotalBalance(totalBalance);}case 31:case\"end\":return _context.stop();}}},_callee);}));return _updateUserInfo.apply(this,arguments);}updateUserInfo();var id=setInterval(updateUserInfo,15000);// eslint-disable-next-line consistent-return\nreturn function(){isCancelled=true;clearInterval(id);};},[user]);return/*#__PURE__*/React.createElement(\"div\",{style:{fontSize:14,padding:3,fontWeight:400,lineHeight:1.5,fontFamily:'aragon-ui-monospace, monospace',display:\"none\"}},\"$\",formatBN(totalBalance,2));}export default TotalBalance;","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/components/NavBar/TotalBalance.tsx"],"names":["React","useEffect","useState","BigNumber","getBalanceBonded","getBalanceOfStaged","getPoolBalanceOfBonded","getPoolBalanceOfClaimable","getPoolBalanceOfRewarded","getPoolBalanceOfStaged","getTokenBalance","getTokenTotalSupply","QSD","QSDS","UNI","toTokenUnitsBN","getPoolBondingAddress","formatBN","TotalBalance","user","totalBalance","setTotalBalance","isCancelled","updateUserInfo","poolAddress","Promise","all","addr","esdBalance","stagedBalance","bondedBalance","pairBalanceQSDStr","pairTotalSupplyUNIStr","userUNIBalanceStr","userPoolBondedBalanceStr","userPoolStagedBalanceStr","userPoolRewardedBalanceStr","userPoolClaimableBalanceStr","userBalance","decimals","userStagedBalance","userBondedBalance","userUNIBalance","userPoolBondedBalance","userPoolStagedBalance","userPoolRewardedBalance","userPoolClaimableBalance","UNItoQSD","dividedBy","daoTotalBalance","plus","poolTotalBalance","multipliedBy","circulationBalance","id","setInterval","clearInterval","fontSize","padding","fontWeight","lineHeight","fontFamily","display"],"mappings":"6aAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,QAA1B,KAAyC,OAAzC,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CACA,OACEC,gBADF,CAEEC,kBAFF,CAGEC,sBAHF,CAG0BC,yBAH1B,CAGqDC,wBAHrD,CAG+EC,sBAH/E,CAIEC,eAJF,CAKEC,mBALF,KAMO,oBANP,CAOA,OAAQC,GAAR,CAAaC,IAAb,CAAmBC,GAAnB,KAA6B,wBAA7B,CACA,OAASC,cAAT,KAA8B,oBAA9B,CACA,OAAQC,qBAAR,KAAoC,kBAApC,CACA,OAASC,QAAT,KAAyB,oBAAzB,CAOA,QAASC,CAAAA,YAAT,MAAmD,IAA3BC,CAAAA,IAA2B,MAA3BA,IAA2B,CACjD;AADiD,cAGTjB,QAAQ,CAAC,GAAIC,CAAAA,SAAJ,CAAc,CAAd,CAAD,CAHC,wCAG1CiB,YAH0C,eAG5BC,eAH4B,eAKjD;AACApB,SAAS,CAAC,UAAM,CACd;AACA;AACA;AACA;AACA,GAAIqB,CAAAA,WAAW,CAAG,KAAlB,CALc,QAOCC,CAAAA,cAPD,oJAOd,goBAC4BP,CAAAA,qBAAqB,EADjD,QACQQ,WADR,qCAQYC,CAAAA,OAAO,CAACC,GAAR,CAAY,CACpBhB,eAAe,CAACE,GAAG,CAACe,IAAL,CAAWR,IAAX,CADK,CAEpBd,kBAAkB,CAACQ,IAAI,CAACc,IAAN,CAAYR,IAAZ,CAFE,CAGpBf,gBAAgB,CAACS,IAAI,CAACc,IAAN,CAAYR,IAAZ,CAHI,CAKpBT,eAAe,CAACE,GAAG,CAACe,IAAL,CAAWb,GAAG,CAACa,IAAf,CALK,CAMpBhB,mBAAmB,CAACG,GAAG,CAACa,IAAL,CANC,CAOpBjB,eAAe,CAACI,GAAG,CAACa,IAAL,CAAWR,IAAX,CAPK,CAQpBb,sBAAsB,CAACkB,WAAD,CAAcL,IAAd,CARF,CASpBV,sBAAsB,CAACe,WAAD,CAAcL,IAAd,CATF,CAUpBX,wBAAwB,CAACgB,WAAD,CAAcL,IAAd,CAVJ,CAWpBZ,yBAAyB,CAACiB,WAAD,CAAcL,IAAd,CAXL,CAAZ,CARZ,mGAIIS,UAJJ,wBAIgBC,aAJhB,wBAI+BC,aAJ/B,wBAKIC,iBALJ,wBAKuBC,qBALvB,wBAK8CC,iBAL9C,wBAMIC,wBANJ,wBAM8BC,wBAN9B,wBAOIC,0BAPJ,wBAOgCC,2BAPhC,wBAsBQC,WAtBR,CAsBsBvB,cAAc,CAACa,UAAD,CAAahB,GAAG,CAAC2B,QAAjB,CAtBpC,CAuBQC,iBAvBR,CAuB4BzB,cAAc,CAACc,aAAD,CAAgBhB,IAAI,CAAC0B,QAArB,CAvB1C,CAwBQE,iBAxBR,CAwB4B1B,cAAc,CAACe,aAAD,CAAgBjB,IAAI,CAAC0B,QAArB,CAxB1C,CA0BQG,cA1BR,CA0ByB3B,cAAc,CAACkB,iBAAD,CAAoBpB,IAAI,CAAC0B,QAAzB,CA1BvC,CA2BQI,qBA3BR,CA2BgC5B,cAAc,CAACmB,wBAAD,CAA2BrB,IAAI,CAAC0B,QAAhC,CA3B9C,CA4BQK,qBA5BR,CA4BgC7B,cAAc,CAACoB,wBAAD,CAA2BtB,IAAI,CAAC0B,QAAhC,CA5B9C,CA6BQM,uBA7BR,CA6BkC9B,cAAc,CAACqB,0BAAD,CAA6BvB,IAAI,CAAC0B,QAAlC,CA7BhD,CA8BQO,wBA9BR,CA8BmC/B,cAAc,CAACsB,2BAAD,CAA8BxB,IAAI,CAAC0B,QAAnC,CA9BjD,CAgCQQ,QAhCR,CAgCmB,GAAI5C,CAAAA,SAAJ,CAAc4B,iBAAd,EAAiCiB,SAAjC,CAA2C,GAAI7C,CAAAA,SAAJ,CAAc6B,qBAAd,CAA3C,CAhCnB,CAkCQiB,eAlCR,CAkC0BT,iBAAiB,CAACU,IAAlB,CAAuBT,iBAAvB,CAlC1B,CAmCQU,gBAnCR,CAmC2BJ,QAAQ,CAACK,YAAT,CAAsBR,qBAAqB,CAACM,IAAtB,CAA2BP,qBAA3B,CAAtB,EACtBO,IADsB,CACjBL,uBAAuB,CAACK,IAAxB,CAA6BJ,wBAA7B,CADiB,CAnC3B,CAqCQO,kBArCR,CAqC6BN,QAAQ,CAACK,YAAT,CAAsBV,cAAtB,EAAsCQ,IAAtC,CAA2CZ,WAA3C,CArC7B,CAuCQlB,YAvCR,CAuCuB6B,eAAe,CAACC,IAAhB,CAAqBC,gBAArB,EAAuCD,IAAvC,CAA4CG,kBAA5C,CAvCvB,CAyCE,GAAI,CAAC/B,WAAL,CAAkB,CAChBD,eAAe,CAACD,YAAD,CAAf,CACD,CA3CH,uDAPc,iDAqDdG,cAAc,GACd,GAAM+B,CAAAA,EAAE,CAAGC,WAAW,CAAChC,cAAD,CAAiB,KAAjB,CAAtB,CAEA;AACA,MAAO,WAAM,CACXD,WAAW,CAAG,IAAd,CACAkC,aAAa,CAACF,EAAD,CAAb,CACD,CAHD,CAID,CA7DQ,CA6DN,CAACnC,IAAD,CA7DM,CAAT,CA+DA,mBACE,2BAAK,KAAK,CAAE,CAAEsC,QAAQ,CAAE,EAAZ,CAAgBC,OAAO,CAAE,CAAzB,CAA4BC,UAAU,CAAE,GAAxC,CAA6CC,UAAU,CAAE,GAAzD,CAA8DC,UAAU,CAAE,gCAA1E,CAA4GC,OAAO,CAAG,MAAtH,CAAZ,MACI7C,QAAQ,CAACG,YAAD,CAAe,CAAf,CADZ,CADF,CAMD,CAGD,cAAeF,CAAAA,YAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport BigNumber from \"bignumber.js\";\nimport {\n  getBalanceBonded,\n  getBalanceOfStaged,\n  getPoolBalanceOfBonded, getPoolBalanceOfClaimable, getPoolBalanceOfRewarded, getPoolBalanceOfStaged,\n  getTokenBalance,\n  getTokenTotalSupply\n} from \"../../utils/infura\";\nimport {QSD, QSDS, UNI} from \"../../constants/tokens\";\nimport { toTokenUnitsBN} from \"../../utils/number\";\nimport {getPoolBondingAddress} from \"../../utils/pool\";\nimport { formatBN } from '../../utils/number';\n\n\ntype TotalBalanceProps = {\n  user: string,\n}\n\nfunction TotalBalance({ user }: TotalBalanceProps) {\n  // const [totalBalance, setTotalBalance] = useState(new BigNumber(0));\n\n  const [totalBalance, setTotalBalance] = useState(new BigNumber(0));\n\n  //Update User balances\n  useEffect(() => {\n    // if (user === '') {\n    //   setTotalBalance(new BigNumber(0));\n    //   return;\n    // }\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const poolAddress = await getPoolBondingAddress();\n\n      const [\n        esdBalance, stagedBalance, bondedBalance,\n        pairBalanceQSDStr, pairTotalSupplyUNIStr, userUNIBalanceStr,\n        userPoolBondedBalanceStr, userPoolStagedBalanceStr,\n        userPoolRewardedBalanceStr, userPoolClaimableBalanceStr,\n      ] = await Promise.all([\n        getTokenBalance(QSD.addr, user),\n        getBalanceOfStaged(QSDS.addr, user),\n        getBalanceBonded(QSDS.addr, user),\n\n        getTokenBalance(QSD.addr, UNI.addr),\n        getTokenTotalSupply(UNI.addr),\n        getTokenBalance(UNI.addr, user),\n        getPoolBalanceOfBonded(poolAddress, user),\n        getPoolBalanceOfStaged(poolAddress, user),\n        getPoolBalanceOfRewarded(poolAddress, user),\n        getPoolBalanceOfClaimable(poolAddress, user),\n      ]);\n\n      const userBalance = toTokenUnitsBN(esdBalance, QSD.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, QSDS.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, QSDS.decimals);\n\n      const userUNIBalance = toTokenUnitsBN(userUNIBalanceStr, QSDS.decimals);\n      const userPoolBondedBalance = toTokenUnitsBN(userPoolBondedBalanceStr, QSDS.decimals);\n      const userPoolStagedBalance = toTokenUnitsBN(userPoolStagedBalanceStr, QSDS.decimals);\n      const userPoolRewardedBalance = toTokenUnitsBN(userPoolRewardedBalanceStr, QSDS.decimals);\n      const userPoolClaimableBalance = toTokenUnitsBN(userPoolClaimableBalanceStr, QSDS.decimals);\n\n      const UNItoQSD = new BigNumber(pairBalanceQSDStr).dividedBy(new BigNumber(pairTotalSupplyUNIStr));\n\n      const daoTotalBalance = userStagedBalance.plus(userBondedBalance);\n      const poolTotalBalance = UNItoQSD.multipliedBy(userPoolStagedBalance.plus(userPoolBondedBalance))\n        .plus(userPoolRewardedBalance.plus(userPoolClaimableBalance));\n      const circulationBalance = UNItoQSD.multipliedBy(userUNIBalance).plus(userBalance)\n\n      const totalBalance = daoTotalBalance.plus(poolTotalBalance).plus(circulationBalance)\n\n      if (!isCancelled) {\n        setTotalBalance(totalBalance);\n      }\n    }\n\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n\n  return (\n    <div style={{ fontSize: 14, padding: 3, fontWeight: 400, lineHeight: 1.5, fontFamily: 'aragon-ui-monospace, monospace', display : \"none\"}}>\n      ${formatBN(totalBalance, 2)}\n    </div>\n    \n  );\n}\n\n\nexport default TotalBalance;\n"]},"metadata":{},"sourceType":"module"}