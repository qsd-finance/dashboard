{"ast":null,"code":"import _regeneratorRuntime from\"/Users/J/crypto/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/J/crypto/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/J/crypto/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable react-hooks/exhaustive-deps */import BigNumber from'bignumber.js';import React,{useEffect,useState}from'react';import{useParams}from'react-router-dom';import{QSD,QSG}from'../../constants/tokens';import{POOL_EXIT_LOCKUP_EPOCHS}from'../../constants/values';import{Layout}from'@aragon/ui';import{getBalanceBonded,getBalanceOfStaged,getPoolFluidUntil,getPoolStatusOf,getPoolTotalBonded,getTokenAllowance,getTokenBalance,getPoolBalanceOfRewarded,getPoolBalanceOfClaimable,getLockedUntil}from'../../utils/infura';import{toBaseUnitBN,toTokenUnitsBN}from'../../utils/number';import{getPoolGovAddress}from'../../utils/pool';import{approve,bondPool,depositPool,unbondPool,withdrawPool}from'../../utils/web3';import{BondUnbond,Guide,IconHeader,WithdrawDeposit}from'../common';import AccountPageHeader from'./Header';import{Rewards}from'./Rewards';import{Claim}from'./Claim';function PoolGov(_ref){var user=_ref.user;var _useParams=useParams(),override=_useParams.override;if(override){user=override;}var _useState=useState(new BigNumber(0)),_useState2=_slicedToArray(_useState,2),totalBonded=_useState2[0],setTotalBonded=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),poolGovAddress=_useState4[0],setPoolGovAddress=_useState4[1];var _useState5=useState(new BigNumber(0)),_useState6=_slicedToArray(_useState5,2),userQSGBalance=_useState6[0],setUserQSGBalance=_useState6[1];var _useState7=useState(new BigNumber(0)),_useState8=_slicedToArray(_useState7,2),userQSGAllowance=_useState8[0],setUserQSGAllowance=_useState8[1];var _useState9=useState(new BigNumber(0)),_useState10=_slicedToArray(_useState9,2),totalQSGSupply=_useState10[0],setTotalQSGSupply=_useState10[1];var _useState11=useState(new BigNumber(0)),_useState12=_slicedToArray(_useState11,2),userStagedBalance=_useState12[0],setUserStagedBalance=_useState12[1];var _useState13=useState(new BigNumber(0)),_useState14=_slicedToArray(_useState13,2),userBondedBalance=_useState14[0],setUserBondedBalance=_useState14[1];var _useState15=useState(0),_useState16=_slicedToArray(_useState15,2),userStatus=_useState16[0],setUserStatus=_useState16[1];var _useState17=useState(0),_useState18=_slicedToArray(_useState17,2),userStatusUnlocked=_useState18[0],setUserStatusUnlocked=_useState18[1];var _useState19=useState(0),_useState20=_slicedToArray(_useState19,2),lockup=_useState20[0],setLockup=_useState20[1];var _useState21=useState(new BigNumber(0)),_useState22=_slicedToArray(_useState21,2),userRewardedQSD=_useState22[0],setUserRewardedQSD=_useState22[1];var _useState23=useState(new BigNumber(0)),_useState24=_slicedToArray(_useState23,2),userClaimableQSD=_useState24[0],setUserClaimableQSD=_useState24[1];//Update User balances\nuseEffect(function(){if(user===''){setUserQSGBalance(new BigNumber(0));setUserQSGAllowance(new BigNumber(0));setUserQSGBalance(new BigNumber(0));setTotalQSGSupply(new BigNumber(0));setUserStagedBalance(new BigNumber(0));setUserBondedBalance(new BigNumber(0));setUserStatus(0);return;}var isCancelled=false;function updateUserInfo(){return _updateUserInfo.apply(this,arguments);}function _updateUserInfo(){_updateUserInfo=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var poolAddress,_yield$Promise$all,_yield$Promise$all2,poolTotalBondedStr,QSGBalance,QSGAllowance,stagedBalance,bondedBalance,status,fluidUntilStr,lockedUntilStr,qsdRewardedStr,qsdClaimableStr,qsdRewarded,qsdClaimable,poolTotalBonded,userQSGBalance,userStagedBalance,userBondedBalance,userStatus,fluidUntil,lockedUntil;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getPoolGovAddress();case 2:poolAddress=_context.sent;_context.next=5;return Promise.all([getPoolTotalBonded(poolAddress),getTokenBalance(QSG.addr,user),getTokenAllowance(QSG.addr,user,poolAddress),getBalanceOfStaged(poolAddress,user),getBalanceBonded(poolAddress,user),getPoolStatusOf(poolAddress,user),getPoolFluidUntil(poolAddress,user),getLockedUntil(poolAddress,user),getPoolBalanceOfRewarded(poolAddress,user),getPoolBalanceOfClaimable(poolAddress,user)]);case 5:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,10);poolTotalBondedStr=_yield$Promise$all2[0];QSGBalance=_yield$Promise$all2[1];QSGAllowance=_yield$Promise$all2[2];stagedBalance=_yield$Promise$all2[3];bondedBalance=_yield$Promise$all2[4];status=_yield$Promise$all2[5];fluidUntilStr=_yield$Promise$all2[6];lockedUntilStr=_yield$Promise$all2[7];qsdRewardedStr=_yield$Promise$all2[8];qsdClaimableStr=_yield$Promise$all2[9];qsdRewarded=toTokenUnitsBN(qsdRewardedStr,QSD.decimals);qsdClaimable=toTokenUnitsBN(qsdClaimableStr,QSD.decimals);poolTotalBonded=toTokenUnitsBN(poolTotalBondedStr,QSG.decimals);userQSGBalance=toTokenUnitsBN(QSGBalance,QSG.decimals);userStagedBalance=toTokenUnitsBN(stagedBalance,QSG.decimals);userBondedBalance=toTokenUnitsBN(bondedBalance,QSG.decimals);userStatus=parseInt(status,10);fluidUntil=parseInt(fluidUntilStr,10);lockedUntil=parseInt(lockedUntilStr,10);if(!isCancelled){setTotalBonded(poolTotalBonded);setPoolGovAddress(poolAddress);setUserQSGBalance(new BigNumber(userQSGBalance));setUserQSGAllowance(new BigNumber(QSGAllowance));setUserQSGBalance(new BigNumber(userQSGBalance));setTotalQSGSupply(new BigNumber(totalQSGSupply));setUserStagedBalance(new BigNumber(userStagedBalance));setUserBondedBalance(new BigNumber(userBondedBalance));setUserRewardedQSD(new BigNumber(qsdRewarded));setUserClaimableQSD(new BigNumber(qsdClaimable));setUserStatus(userStatus);setUserStatusUnlocked(Math.max(fluidUntil,lockedUntil));setLockup(POOL_EXIT_LOCKUP_EPOCHS);}case 27:case\"end\":return _context.stop();}}},_callee);}));return _updateUserInfo.apply(this,arguments);}updateUserInfo();var id=setInterval(updateUserInfo,15000);// eslint-disable-next-line consistent-return\nreturn function(){isCancelled=true;clearInterval(id);};},[user]);return/*#__PURE__*/React.createElement(Layout,null,/*#__PURE__*/React.createElement(Guide,{bodyInstructions:/*#__PURE__*/React.createElement(\"p\",null,\"Step 1. Earn QSG by bonding QSD when TWAP is < 1\",/*#__PURE__*/React.createElement(\"br\",null),\"Step 2. Stage your QSG into the Governance Pool\",/*#__PURE__*/React.createElement(\"br\",null),\"Step 3. Bond your QSG into the Governance Pool\",/*#__PURE__*/React.createElement(\"br\",null),\"\\xA0\\xA0 Note: If you'd like to submit a proposal your QSG needs to remain bonded\")}),/*#__PURE__*/React.createElement(IconHeader,{icon:/*#__PURE__*/React.createElement(\"i\",{className:\"fas fa-university\"}),text:\"QSG Rewards\"}),/*#__PURE__*/React.createElement(AccountPageHeader,{accountQSGBalance:userQSGBalance,totalBonded:totalBonded,accountStagedBalance:userStagedBalance,accountBondedBalance:userBondedBalance,accountStatus:userStatus,unlocked:userStatusUnlocked}),/*#__PURE__*/React.createElement(WithdrawDeposit,{suffix:\"QSG\",balance:userQSGBalance,allowance:userQSGAllowance,stagedBalance:userStagedBalance,status:userStatus,disabled:!user,handleApprove:function handleApprove(){approve(QSG.addr,poolGovAddress);},handleDeposit:function handleDeposit(depositAmount){depositPool(poolGovAddress,toBaseUnitBN(depositAmount,QSG.decimals),function(){});},handleWithdraw:function handleWithdraw(withdrawAmount){withdrawPool(poolGovAddress,toBaseUnitBN(withdrawAmount,QSG.decimals),function(){});}}),/*#__PURE__*/React.createElement(BondUnbond,{suffix:\"QSG\",staged:userStagedBalance,bonded:userBondedBalance,status:userStatus,lockup:lockup,disabled:!user,handleBond:function handleBond(bondAmount){bondPool(poolGovAddress,toBaseUnitBN(bondAmount,QSG.decimals),function(){});},handleUnbond:function handleUnbond(unbondAmount){unbondPool(poolGovAddress,toBaseUnitBN(unbondAmount,QSG.decimals),function(){});}}),/*#__PURE__*/React.createElement(Claim,{userStatus:userStatus,poolAddress:poolGovAddress,amountQSD:userClaimableQSD}),/*#__PURE__*/React.createElement(Rewards,{poolAddress:poolGovAddress,amountQSD:userRewardedQSD}));}export default PoolGov;","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/components/PoolGov/index.tsx"],"names":["BigNumber","React","useEffect","useState","useParams","QSD","QSG","POOL_EXIT_LOCKUP_EPOCHS","Layout","getBalanceBonded","getBalanceOfStaged","getPoolFluidUntil","getPoolStatusOf","getPoolTotalBonded","getTokenAllowance","getTokenBalance","getPoolBalanceOfRewarded","getPoolBalanceOfClaimable","getLockedUntil","toBaseUnitBN","toTokenUnitsBN","getPoolGovAddress","approve","bondPool","depositPool","unbondPool","withdrawPool","BondUnbond","Guide","IconHeader","WithdrawDeposit","AccountPageHeader","Rewards","Claim","PoolGov","user","override","totalBonded","setTotalBonded","poolGovAddress","setPoolGovAddress","userQSGBalance","setUserQSGBalance","userQSGAllowance","setUserQSGAllowance","totalQSGSupply","setTotalQSGSupply","userStagedBalance","setUserStagedBalance","userBondedBalance","setUserBondedBalance","userStatus","setUserStatus","userStatusUnlocked","setUserStatusUnlocked","lockup","setLockup","userRewardedQSD","setUserRewardedQSD","userClaimableQSD","setUserClaimableQSD","isCancelled","updateUserInfo","poolAddress","Promise","all","addr","poolTotalBondedStr","QSGBalance","QSGAllowance","stagedBalance","bondedBalance","status","fluidUntilStr","lockedUntilStr","qsdRewardedStr","qsdClaimableStr","qsdRewarded","decimals","qsdClaimable","poolTotalBonded","parseInt","fluidUntil","lockedUntil","Math","max","id","setInterval","clearInterval","depositAmount","withdrawAmount","bondAmount","unbondAmount"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n\nimport BigNumber from 'bignumber.js';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { QSD, QSG } from '../../constants/tokens';\nimport { POOL_EXIT_LOCKUP_EPOCHS } from '../../constants/values';\nimport { Layout } from '@aragon/ui';\nimport {\n  getBalanceBonded,\n  getBalanceOfStaged,\n  getPoolFluidUntil,\n  getPoolStatusOf,\n  getPoolTotalBonded,\n  getTokenAllowance,\n  getTokenBalance,\n  getPoolBalanceOfRewarded,\n  getPoolBalanceOfClaimable,\n  getLockedUntil,\n} from '../../utils/infura';\nimport { toBaseUnitBN, toTokenUnitsBN } from '../../utils/number';\nimport { getPoolGovAddress } from '../../utils/pool';\nimport {\n  approve,\n  bondPool,\n  depositPool,\n  unbondPool,\n  withdrawPool,\n} from '../../utils/web3';\nimport { BondUnbond, Guide, IconHeader, WithdrawDeposit } from '../common';\nimport AccountPageHeader from './Header';\nimport { Rewards } from './Rewards';\nimport { Claim } from './Claim';\n\nfunction PoolGov({ user }: { user: string }) {\n  const { override } = useParams();\n  if (override) {\n    user = override;\n  }\n\n  const [totalBonded, setTotalBonded] = useState(new BigNumber(0));\n  const [poolGovAddress, setPoolGovAddress] = useState<null | string>(null);\n  const [userQSGBalance, setUserQSGBalance] = useState(new BigNumber(0));\n  const [userQSGAllowance, setUserQSGAllowance] = useState(new BigNumber(0));\n  const [totalQSGSupply, setTotalQSGSupply] = useState(new BigNumber(0));\n  const [userStagedBalance, setUserStagedBalance] = useState(new BigNumber(0));\n  const [userBondedBalance, setUserBondedBalance] = useState(new BigNumber(0));\n  const [userStatus, setUserStatus] = useState(0);\n  const [userStatusUnlocked, setUserStatusUnlocked] = useState(0);\n  const [lockup, setLockup] = useState(0);\n  const [userRewardedQSD, setUserRewardedQSD] = useState(new BigNumber(0));\n  const [userClaimableQSD, setUserClaimableQSD] = useState(new BigNumber(0));\n\n  //Update User balances\n  useEffect(() => {\n    if (user === '') {\n      setUserQSGBalance(new BigNumber(0));\n      setUserQSGAllowance(new BigNumber(0));\n      setUserQSGBalance(new BigNumber(0));\n      setTotalQSGSupply(new BigNumber(0));\n      setUserStagedBalance(new BigNumber(0));\n      setUserBondedBalance(new BigNumber(0));\n      setUserStatus(0);\n      return;\n    }\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const poolAddress = await getPoolGovAddress();\n\n      const [\n        poolTotalBondedStr,\n        QSGBalance,\n        QSGAllowance,\n        stagedBalance,\n        bondedBalance,\n        status,\n        fluidUntilStr,\n        lockedUntilStr,\n        qsdRewardedStr,\n        qsdClaimableStr,\n      ] = await Promise.all([\n        getPoolTotalBonded(poolAddress),\n        getTokenBalance(QSG.addr, user),\n        getTokenAllowance(QSG.addr, user, poolAddress),\n        getBalanceOfStaged(poolAddress, user),\n        getBalanceBonded(poolAddress, user),\n        getPoolStatusOf(poolAddress, user),\n        getPoolFluidUntil(poolAddress, user),\n        getLockedUntil(poolAddress, user),\n        getPoolBalanceOfRewarded(poolAddress, user),\n        getPoolBalanceOfClaimable(poolAddress, user),\n      ]);\n\n      const qsdRewarded = toTokenUnitsBN(qsdRewardedStr, QSD.decimals);\n      const qsdClaimable = toTokenUnitsBN(qsdClaimableStr, QSD.decimals);\n      const poolTotalBonded = toTokenUnitsBN(poolTotalBondedStr, QSG.decimals);\n      const userQSGBalance = toTokenUnitsBN(QSGBalance, QSG.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, QSG.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, QSG.decimals);\n      const userStatus = parseInt(status, 10);\n      const fluidUntil = parseInt(fluidUntilStr, 10);\n      const lockedUntil = parseInt(lockedUntilStr, 10);\n\n      if (!isCancelled) {\n        setTotalBonded(poolTotalBonded);\n        setPoolGovAddress(poolAddress);\n        setUserQSGBalance(new BigNumber(userQSGBalance));\n        setUserQSGAllowance(new BigNumber(QSGAllowance));\n        setUserQSGBalance(new BigNumber(userQSGBalance));\n        setTotalQSGSupply(new BigNumber(totalQSGSupply));\n        setUserStagedBalance(new BigNumber(userStagedBalance));\n        setUserBondedBalance(new BigNumber(userBondedBalance));\n        setUserRewardedQSD(new BigNumber(qsdRewarded));\n        setUserClaimableQSD(new BigNumber(qsdClaimable));\n        setUserStatus(userStatus);\n        setUserStatusUnlocked(Math.max(fluidUntil, lockedUntil));\n        setLockup(POOL_EXIT_LOCKUP_EPOCHS);\n      }\n    }\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n\n  return (\n    <Layout>\n      <Guide\n        bodyInstructions={\n          <p>\n            Step 1. Earn QSG by bonding QSD when TWAP is &lt; 1\n            <br />\n            Step 2. Stage your QSG into the Governance Pool\n            <br />\n            Step 3. Bond your QSG into the Governance Pool\n            <br />\n            &nbsp;&nbsp; Note: If you'd like to submit a proposal your QSG needs\n            to remain bonded\n          </p>\n        }\n      />\n\n      <IconHeader\n        icon={<i className='fas fa-university' />}\n        text='QSG Rewards'\n      />\n\n      <AccountPageHeader\n        accountQSGBalance={userQSGBalance}\n        totalBonded={totalBonded}\n        accountStagedBalance={userStagedBalance}\n        accountBondedBalance={userBondedBalance}\n        accountStatus={userStatus}\n        unlocked={userStatusUnlocked}\n      />\n\n      <WithdrawDeposit\n        suffix='QSG'\n        balance={userQSGBalance}\n        allowance={userQSGAllowance}\n        stagedBalance={userStagedBalance}\n        status={userStatus}\n        disabled={!user}\n        handleApprove={() => {\n          approve(QSG.addr, poolGovAddress);\n        }}\n        handleDeposit={(depositAmount) => {\n          depositPool(\n            poolGovAddress,\n            toBaseUnitBN(depositAmount, QSG.decimals),\n            () => {}\n          );\n        }}\n        handleWithdraw={(withdrawAmount) => {\n          withdrawPool(\n            poolGovAddress,\n            toBaseUnitBN(withdrawAmount, QSG.decimals),\n            () => {}\n          );\n        }}\n      />\n\n      <BondUnbond\n        suffix='QSG'\n        staged={userStagedBalance}\n        bonded={userBondedBalance}\n        status={userStatus}\n        lockup={lockup}\n        disabled={!user}\n        handleBond={(bondAmount) => {\n          bondPool(\n            poolGovAddress,\n            toBaseUnitBN(bondAmount, QSG.decimals),\n            () => {}\n          );\n        }}\n        handleUnbond={(unbondAmount) => {\n          unbondPool(\n            poolGovAddress,\n            toBaseUnitBN(unbondAmount, QSG.decimals),\n            () => {}\n          );\n        }}\n      />\n\n      <Claim\n        userStatus={userStatus}\n        poolAddress={poolGovAddress}\n        amountQSD={userClaimableQSD}\n      />\n\n      <Rewards poolAddress={poolGovAddress} amountQSD={userRewardedQSD} />\n    </Layout>\n  );\n}\n\nexport default PoolGov;\n"]},"metadata":{},"sourceType":"module"}