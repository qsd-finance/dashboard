{"ast":null,"code":"/* eslint-disable camelcase */\nimport Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport { notify } from './txNotifier.ts';\nimport { UniswapV2Router02 } from '../constants/contracts';\nimport { QSD, DAI } from '../constants/tokens';\n\nconst uniswapRouterAbi = require('../constants/abi/UniswapV2Router02.json');\n\nconst testnetDAIAbi = require('../constants/abi/TestnetUSDC.json');\n\nconst daoAbi = require('../constants/abi/Implementation.json');\n\nconst poolAbi = require('../constants/abi/Pool.json');\n\nconst poolBondingAbi = require('../constants/abi/PoolBonding.json');\n\nconst poolLPAbi = require('../constants/abi/PoolLP.json');\n\nconst DEADLINE_FROM_NOW = 60 * 15;\nconst UINT256_MAX = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n/**\n * Connection Utilities\n */\n\nexport const updateModalMode = async theme => {\n  window.darkMode = theme === 'dark';\n};\nexport const connect = async ethereum => {\n  window.web3 = new Web3(ethereum);\n  let addresses = await window.web3.eth.getAccounts();\n\n  if (!addresses.length) {\n    try {\n      addresses = await window.ethereum.enable();\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  }\n\n  return addresses.length ? addresses[0].toLowerCase() : null;\n}; // eslint-disable-next-line consistent-return\n\nexport const checkConnectedAndGetAddress = async () => {\n  let addresses = await window.web3.eth.getAccounts();\n\n  if (!addresses.length) {\n    try {\n      addresses = await window.ethereum.enable(); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n\n  return addresses[0];\n};\n/**\n * ERC20 Utilities\n */\n\nexport const approve = async (tokenAddr, spender, amt = UINT256_MAX) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new window.web3.eth.Contract(testnetDAIAbi, tokenAddr);\n  await oToken.methods.approve(spender, amt).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const mintTestnetDAI = async amount => {\n  const account = await checkConnectedAndGetAddress();\n  const usdc = new window.web3.eth.Contract(testnetDAIAbi, DAI.addr);\n  await usdc.methods.mint(account, new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\n/**\n * Uniswap Protocol\n */\n\nexport const buyQSD = async (buyAmount, maxInputAmount) => {\n  const account = await checkConnectedAndGetAddress();\n  const router = new window.web3.eth.Contract(uniswapRouterAbi, UniswapV2Router02);\n  const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n  await router.methods.swapTokensForExactTokens(buyAmount, maxInputAmount, [DAI.addr, QSD.addr], account, deadline).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const sellQSD = async (sellAmount, minOutputAmount) => {\n  const account = await checkConnectedAndGetAddress();\n  const router = new window.web3.eth.Contract(uniswapRouterAbi, UniswapV2Router02);\n  const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n  await router.methods.swapExactTokensForTokens(sellAmount, minOutputAmount, [QSD.addr, DAI.addr], account, deadline).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const addLiquidity = async (amountQSD, amountDAI, slippage) => {\n  const account = await checkConnectedAndGetAddress();\n  const router = new window.web3.eth.Contract(uniswapRouterAbi, UniswapV2Router02);\n  const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n  const slippageBN = new BigNumber(slippage);\n  const minAmountQSD = new BigNumber(amountQSD).multipliedBy(new BigNumber(1).minus(slippageBN)).integerValue(BigNumber.ROUND_FLOOR);\n  const minAmountDAI = new BigNumber(amountDAI).multipliedBy(new BigNumber(1).minus(slippageBN)).integerValue(BigNumber.ROUND_FLOOR);\n  await router.methods.addLiquidity(QSD.addr, DAI.addr, new BigNumber(amountQSD).toFixed(), new BigNumber(amountDAI).toFixed(), minAmountQSD, minAmountDAI, account, deadline).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const removeLiquidity = async (liquidityAmount, minAmountQSD, minAmountDAI) => {\n  const account = await checkConnectedAndGetAddress();\n  const router = new window.web3.eth.Contract(uniswapRouterAbi, UniswapV2Router02);\n  const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n  await router.methods.removeLiquidity(QSD.addr, DAI.addr, new BigNumber(liquidityAmount).toFixed(), new BigNumber(minAmountQSD).toFixed(), new BigNumber(minAmountDAI).toFixed(), account, deadline).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\n/**\n * QSD Protocol\n */\n\nexport const advance = async dao => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods.advance().send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const deposit = async (dao, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods.deposit(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const withdraw = async (dao, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods.withdraw(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const bond = async (dao, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods.bond(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const unbond = async (dao, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods.unbond(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const unbondUnderlying = async (dao, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods.unbondUnderlying(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const purchaseCoupons = async (dao, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods.purchaseCoupons(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const redeemCoupons = async (dao, epoch, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods.redeemCoupons(epoch, new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const migrateCoupons = async (dao, epoch) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods.migrateCoupons(epoch).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const recordVote = async (dao, candidate, voteType) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods.vote(candidate, voteType).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const commit = async (dao, candidate) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods.commit(candidate).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\n/* UNI-V2 Incentivization Pool */\n\nexport const depositPool = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods.deposit(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n};\nexport const withdrawPool = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods.withdraw(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n};\nexport const bondPool = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods.bond(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n};\nexport const unbondPool = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods.unbond(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n};\nexport const claimPool = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods.claim(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n};\nexport const providePool = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods.provide(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n};\nexport const providePoolOptimalOneSided = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolLPAbi, pool);\n  await poolContract.methods.provideOneSided(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n};\nexport const pokeRewards = async (pool, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolBondingAbi, pool);\n  await poolContract.methods.pokeRewards().send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n\n    if (callback) {\n      callback(hash);\n    }\n  });\n};\nexport const claimRewards = async (pool, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolBondingAbi, pool);\n  await poolContract.methods.claimAll().send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n\n    if (callback) {\n      callback(hash);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/utils/web3.js"],"names":["Web3","BigNumber","notify","UniswapV2Router02","QSD","DAI","uniswapRouterAbi","require","testnetDAIAbi","daoAbi","poolAbi","poolBondingAbi","poolLPAbi","DEADLINE_FROM_NOW","UINT256_MAX","updateModalMode","theme","window","darkMode","connect","ethereum","web3","addresses","eth","getAccounts","length","enable","e","console","log","toLowerCase","checkConnectedAndGetAddress","approve","tokenAddr","spender","amt","account","oToken","Contract","methods","send","from","on","hash","mintTestnetDAI","amount","usdc","addr","mint","toFixed","buyQSD","buyAmount","maxInputAmount","router","deadline","Math","ceil","Date","now","swapTokensForExactTokens","sellQSD","sellAmount","minOutputAmount","swapExactTokensForTokens","addLiquidity","amountQSD","amountDAI","slippage","slippageBN","minAmountQSD","multipliedBy","minus","integerValue","ROUND_FLOOR","minAmountDAI","removeLiquidity","liquidityAmount","advance","dao","daoContract","deposit","withdraw","bond","unbond","unbondUnderlying","purchaseCoupons","redeemCoupons","epoch","migrateCoupons","recordVote","candidate","voteType","vote","commit","depositPool","pool","callback","poolContract","withdrawPool","bondPool","unbondPool","claimPool","claim","providePool","provide","providePoolOptimalOneSided","provideOneSided","pokeRewards","claimRewards","claimAll"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\n\nimport { notify } from './txNotifier.ts';\nimport { UniswapV2Router02 } from '../constants/contracts';\n\nimport { QSD, DAI } from '../constants/tokens';\n\nconst uniswapRouterAbi = require('../constants/abi/UniswapV2Router02.json');\nconst testnetDAIAbi = require('../constants/abi/TestnetUSDC.json');\nconst daoAbi = require('../constants/abi/Implementation.json');\nconst poolAbi = require('../constants/abi/Pool.json');\nconst poolBondingAbi = require('../constants/abi/PoolBonding.json');\nconst poolLPAbi = require('../constants/abi/PoolLP.json');\n\nconst DEADLINE_FROM_NOW = 60 * 15;\nconst UINT256_MAX =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n\n/**\n * Connection Utilities\n */\n\nexport const updateModalMode = async (theme) => {\n  window.darkMode = theme === 'dark';\n};\n\nexport const connect = async (ethereum) => {\n  window.web3 = new Web3(ethereum);\n  let addresses = await window.web3.eth.getAccounts();\n  if (!addresses.length) {\n    try {\n      addresses = await window.ethereum.enable();\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  }\n\n  return addresses.length ? addresses[0].toLowerCase() : null;\n};\n\n// eslint-disable-next-line consistent-return\nexport const checkConnectedAndGetAddress = async () => {\n  let addresses = await window.web3.eth.getAccounts();\n  if (!addresses.length) {\n    try {\n      addresses = await window.ethereum.enable();\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n\n  return addresses[0];\n};\n\n/**\n * ERC20 Utilities\n */\n\nexport const approve = async (tokenAddr, spender, amt = UINT256_MAX) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new window.web3.eth.Contract(testnetDAIAbi, tokenAddr);\n  await oToken.methods\n    .approve(spender, amt)\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const mintTestnetDAI = async (amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const usdc = new window.web3.eth.Contract(testnetDAIAbi, DAI.addr);\n\n  await usdc.methods\n    .mint(account, new BigNumber(amount).toFixed())\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n/**\n * Uniswap Protocol\n */\n\nexport const buyQSD = async (buyAmount, maxInputAmount) => {\n  const account = await checkConnectedAndGetAddress();\n  const router = new window.web3.eth.Contract(\n    uniswapRouterAbi,\n    UniswapV2Router02\n  );\n  const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n\n  await router.methods\n    .swapTokensForExactTokens(\n      buyAmount,\n      maxInputAmount,\n      [DAI.addr, QSD.addr],\n      account,\n      deadline\n    )\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const sellQSD = async (sellAmount, minOutputAmount) => {\n  const account = await checkConnectedAndGetAddress();\n  const router = new window.web3.eth.Contract(\n    uniswapRouterAbi,\n    UniswapV2Router02\n  );\n  const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n\n  await router.methods\n    .swapExactTokensForTokens(\n      sellAmount,\n      minOutputAmount,\n      [QSD.addr, DAI.addr],\n      account,\n      deadline\n    )\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const addLiquidity = async (amountQSD, amountDAI, slippage) => {\n  const account = await checkConnectedAndGetAddress();\n  const router = new window.web3.eth.Contract(\n    uniswapRouterAbi,\n    UniswapV2Router02\n  );\n  const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n  const slippageBN = new BigNumber(slippage);\n  const minAmountQSD = new BigNumber(amountQSD)\n    .multipliedBy(new BigNumber(1).minus(slippageBN))\n    .integerValue(BigNumber.ROUND_FLOOR);\n  const minAmountDAI = new BigNumber(amountDAI)\n    .multipliedBy(new BigNumber(1).minus(slippageBN))\n    .integerValue(BigNumber.ROUND_FLOOR);\n\n  await router.methods\n    .addLiquidity(\n      QSD.addr,\n      DAI.addr,\n      new BigNumber(amountQSD).toFixed(),\n      new BigNumber(amountDAI).toFixed(),\n      minAmountQSD,\n      minAmountDAI,\n      account,\n      deadline\n    )\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const removeLiquidity = async (\n  liquidityAmount,\n  minAmountQSD,\n  minAmountDAI\n) => {\n  const account = await checkConnectedAndGetAddress();\n  const router = new window.web3.eth.Contract(\n    uniswapRouterAbi,\n    UniswapV2Router02\n  );\n  const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n\n  await router.methods\n    .removeLiquidity(\n      QSD.addr,\n      DAI.addr,\n      new BigNumber(liquidityAmount).toFixed(),\n      new BigNumber(minAmountQSD).toFixed(),\n      new BigNumber(minAmountDAI).toFixed(),\n      account,\n      deadline\n    )\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n/**\n * QSD Protocol\n */\n\nexport const advance = async (dao) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods\n    .advance()\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const deposit = async (dao, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods\n    .deposit(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const withdraw = async (dao, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods\n    .withdraw(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const bond = async (dao, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods\n    .bond(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const unbond = async (dao, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods\n    .unbond(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const unbondUnderlying = async (dao, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods\n    .unbondUnderlying(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const purchaseCoupons = async (dao, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods\n    .purchaseCoupons(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const redeemCoupons = async (dao, epoch, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods\n    .redeemCoupons(epoch, new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const migrateCoupons = async (dao, epoch) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods\n    .migrateCoupons(epoch)\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const recordVote = async (dao, candidate, voteType) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods\n    .vote(candidate, voteType)\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const commit = async (dao, candidate) => {\n  const account = await checkConnectedAndGetAddress();\n  const daoContract = new window.web3.eth.Contract(daoAbi, dao);\n  await daoContract.methods\n    .commit(candidate)\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n/* UNI-V2 Incentivization Pool */\nexport const depositPool = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods\n    .deposit(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\nexport const withdrawPool = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods\n    .withdraw(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\nexport const bondPool = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods\n    .bond(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\nexport const unbondPool = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods\n    .unbond(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\nexport const claimPool = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods\n    .claim(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\nexport const providePool = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods\n    .provide(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\nexport const providePoolOptimalOneSided = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolLPAbi, pool);\n  await poolContract.methods\n    .provideOneSided(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\nexport const pokeRewards = async (pool, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolBondingAbi, pool);\n  await poolContract.methods\n    .pokeRewards()\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      if (callback) {\n        callback(hash);\n      }\n    });\n};\n\nexport const claimRewards = async (pool, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolBondingAbi, pool);\n  await poolContract.methods\n    .claimAll()\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      if (callback) {\n        callback(hash);\n      }\n    });\n};\n"]},"metadata":{},"sourceType":"module"}