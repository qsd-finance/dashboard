{"ast":null,"code":"var _jsxFileName = \"/Users/J/crypto/dashboard/src/components/PoolGov/index.tsx\";\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport BigNumber from 'bignumber.js';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { QSD, QSG } from '../../constants/tokens';\nimport { POOL_EXIT_LOCKUP_EPOCHS } from '../../constants/values';\nimport { Layout } from '@aragon/ui';\nimport { getBalanceBonded, getBalanceOfStaged, getPoolFluidUntil, getPoolStatusOf, getPoolTotalBonded, getTokenAllowance, getTokenBalance, getPoolBalanceOfRewarded, getPoolBalanceOfClaimable, getLockedUntil } from '../../utils/infura';\nimport { toBaseUnitBN, toTokenUnitsBN } from '../../utils/number';\nimport { getPoolGovAddress } from '../../utils/pool';\nimport { approve, bondPool, depositPool, unbondPool, withdrawPool } from '../../utils/web3';\nimport { BondUnbond, Guide, IconHeader, WithdrawDeposit } from '../common';\nimport AccountPageHeader from './Header';\nimport { Rewards } from './Rewards';\nimport { Claim } from './Claim';\n\nfunction PoolGov({\n  user\n}) {\n  const {\n    override\n  } = useParams();\n\n  if (override) {\n    user = override;\n  }\n\n  const [totalBonded, setTotalBonded] = useState(new BigNumber(0));\n  const [poolGovAddress, setPoolGovAddress] = useState(null);\n  const [userQSGBalance, setUserQSGBalance] = useState(new BigNumber(0));\n  const [userQSGAllowance, setUserQSGAllowance] = useState(new BigNumber(0));\n  const [totalQSGSupply, setTotalQSGSupply] = useState(new BigNumber(0));\n  const [userStagedBalance, setUserStagedBalance] = useState(new BigNumber(0));\n  const [userBondedBalance, setUserBondedBalance] = useState(new BigNumber(0));\n  const [userStatus, setUserStatus] = useState(0);\n  const [userStatusUnlocked, setUserStatusUnlocked] = useState(0);\n  const [lockup, setLockup] = useState(0);\n  const [userRewardedQSD, setUserRewardedQSD] = useState(new BigNumber(0));\n  const [userClaimableQSD, setUserClaimableQSD] = useState(new BigNumber(0)); //Update User balances\n\n  useEffect(() => {\n    if (user === '') {\n      setUserQSGBalance(new BigNumber(0));\n      setUserQSGAllowance(new BigNumber(0));\n      setUserQSGBalance(new BigNumber(0));\n      setTotalQSGSupply(new BigNumber(0));\n      setUserStagedBalance(new BigNumber(0));\n      setUserBondedBalance(new BigNumber(0));\n      setUserStatus(0);\n      return;\n    }\n\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const poolAddress = await getPoolGovAddress();\n      const [poolTotalBondedStr, QSGBalance, QSGAllowance, stagedBalance, bondedBalance, status, fluidUntilStr, lockedUntilStr, qsdRewardedStr, qsdClaimableStr] = await Promise.all([getPoolTotalBonded(poolAddress), getTokenBalance(QSG.addr, user), getTokenAllowance(QSG.addr, user, poolAddress), getBalanceOfStaged(poolAddress, user), getBalanceBonded(poolAddress, user), getPoolStatusOf(poolAddress, user), getPoolFluidUntil(poolAddress, user), getLockedUntil(poolAddress, user), getPoolBalanceOfRewarded(poolAddress, user), getPoolBalanceOfClaimable(poolAddress, user)]);\n      const qsdRewarded = toTokenUnitsBN(qsdRewardedStr, QSD.decimals);\n      const qsdClaimable = toTokenUnitsBN(qsdClaimableStr, QSD.decimals);\n      const poolTotalBonded = toTokenUnitsBN(poolTotalBondedStr, QSG.decimals);\n      const userQSGBalance = toTokenUnitsBN(QSGBalance, QSG.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, QSG.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, QSG.decimals);\n      const userStatus = parseInt(status, 10);\n      const fluidUntil = parseInt(fluidUntilStr, 10);\n      const lockedUntil = parseInt(lockedUntilStr, 10);\n\n      if (!isCancelled) {\n        setTotalBonded(poolTotalBonded);\n        setPoolGovAddress(poolAddress);\n        setUserQSGBalance(new BigNumber(userQSGBalance));\n        setUserQSGAllowance(new BigNumber(QSGAllowance));\n        setUserQSGBalance(new BigNumber(userQSGBalance));\n        setTotalQSGSupply(new BigNumber(totalQSGSupply));\n        setUserStagedBalance(new BigNumber(userStagedBalance));\n        setUserBondedBalance(new BigNumber(userBondedBalance));\n        setUserRewardedQSD(new BigNumber(qsdRewarded));\n        setUserClaimableQSD(new BigNumber(qsdClaimable));\n        setUserStatus(userStatus);\n        setUserStatusUnlocked(Math.max(fluidUntil, lockedUntil));\n        setLockup(POOL_EXIT_LOCKUP_EPOCHS);\n      }\n    }\n\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000); // eslint-disable-next-line consistent-return\n\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n  return /*#__PURE__*/React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Guide, {\n    bodyInstructions: /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }, \"Step 1. Earn QSG by bonding QSD when TWAP is < 1\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }), \"Step 2. Stage your QSG into the Governance Pool\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }), \"Step 3. Bond your QSG into the Governance Pool\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }), \"\\xA0\\xA0 Note: If you'd like to submit a proposal your QSG needs to remain bonded\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(IconHeader, {\n    icon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-university\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }),\n    text: \"QSG Rewards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AccountPageHeader, {\n    accountQSGBalance: userQSGBalance,\n    totalBonded: totalBonded,\n    accountStagedBalance: userStagedBalance,\n    accountBondedBalance: userBondedBalance,\n    accountStatus: userStatus,\n    unlocked: userStatusUnlocked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(WithdrawDeposit, {\n    suffix: \"QSG\",\n    balance: userQSGBalance,\n    allowance: userQSGAllowance,\n    stagedBalance: userStagedBalance,\n    status: userStatus,\n    disabled: !user,\n    handleApprove: () => {\n      approve(QSG.addr, poolGovAddress);\n    },\n    handleDeposit: depositAmount => {\n      depositPool(poolGovAddress, toBaseUnitBN(depositAmount, QSG.decimals), () => {});\n    },\n    handleWithdraw: withdrawAmount => {\n      withdrawPool(poolGovAddress, toBaseUnitBN(withdrawAmount, QSG.decimals), () => {});\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BondUnbond, {\n    suffix: \"QSG\",\n    staged: userStagedBalance,\n    bonded: userBondedBalance,\n    status: userStatus,\n    lockup: lockup,\n    disabled: !user,\n    handleBond: bondAmount => {\n      bondPool(poolGovAddress, toBaseUnitBN(bondAmount, QSG.decimals), () => {});\n    },\n    handleUnbond: unbondAmount => {\n      unbondPool(poolGovAddress, toBaseUnitBN(unbondAmount, QSG.decimals), () => {});\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Claim, {\n    userStatus: userStatus,\n    poolAddress: poolGovAddress,\n    amountQSD: userClaimableQSD,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Rewards, {\n    poolAddress: poolGovAddress,\n    amountQSD: userRewardedQSD,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default PoolGov;","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/components/PoolGov/index.tsx"],"names":["BigNumber","React","useEffect","useState","useParams","QSD","QSG","POOL_EXIT_LOCKUP_EPOCHS","Layout","getBalanceBonded","getBalanceOfStaged","getPoolFluidUntil","getPoolStatusOf","getPoolTotalBonded","getTokenAllowance","getTokenBalance","getPoolBalanceOfRewarded","getPoolBalanceOfClaimable","getLockedUntil","toBaseUnitBN","toTokenUnitsBN","getPoolGovAddress","approve","bondPool","depositPool","unbondPool","withdrawPool","BondUnbond","Guide","IconHeader","WithdrawDeposit","AccountPageHeader","Rewards","Claim","PoolGov","user","override","totalBonded","setTotalBonded","poolGovAddress","setPoolGovAddress","userQSGBalance","setUserQSGBalance","userQSGAllowance","setUserQSGAllowance","totalQSGSupply","setTotalQSGSupply","userStagedBalance","setUserStagedBalance","userBondedBalance","setUserBondedBalance","userStatus","setUserStatus","userStatusUnlocked","setUserStatusUnlocked","lockup","setLockup","userRewardedQSD","setUserRewardedQSD","userClaimableQSD","setUserClaimableQSD","isCancelled","updateUserInfo","poolAddress","poolTotalBondedStr","QSGBalance","QSGAllowance","stagedBalance","bondedBalance","status","fluidUntilStr","lockedUntilStr","qsdRewardedStr","qsdClaimableStr","Promise","all","addr","qsdRewarded","decimals","qsdClaimable","poolTotalBonded","parseInt","fluidUntil","lockedUntil","Math","max","id","setInterval","clearInterval","depositAmount","withdrawAmount","bondAmount","unbondAmount"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n\nimport BigNumber from 'bignumber.js';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { QSD, QSG } from '../../constants/tokens';\nimport { POOL_EXIT_LOCKUP_EPOCHS } from '../../constants/values';\nimport { Layout } from '@aragon/ui';\nimport {\n  getBalanceBonded,\n  getBalanceOfStaged,\n  getPoolFluidUntil,\n  getPoolStatusOf,\n  getPoolTotalBonded,\n  getTokenAllowance,\n  getTokenBalance,\n  getPoolBalanceOfRewarded,\n  getPoolBalanceOfClaimable,\n  getLockedUntil,\n} from '../../utils/infura';\nimport { toBaseUnitBN, toTokenUnitsBN } from '../../utils/number';\nimport { getPoolGovAddress } from '../../utils/pool';\nimport {\n  approve,\n  bondPool,\n  depositPool,\n  unbondPool,\n  withdrawPool,\n} from '../../utils/web3';\nimport { BondUnbond, Guide, IconHeader, WithdrawDeposit } from '../common';\nimport AccountPageHeader from './Header';\nimport { Rewards } from './Rewards';\nimport { Claim } from './Claim';\n\nfunction PoolGov({ user }: { user: string }) {\n  const { override } = useParams();\n  if (override) {\n    user = override;\n  }\n\n  const [totalBonded, setTotalBonded] = useState(new BigNumber(0));\n  const [poolGovAddress, setPoolGovAddress] = useState<null | string>(null);\n  const [userQSGBalance, setUserQSGBalance] = useState(new BigNumber(0));\n  const [userQSGAllowance, setUserQSGAllowance] = useState(new BigNumber(0));\n  const [totalQSGSupply, setTotalQSGSupply] = useState(new BigNumber(0));\n  const [userStagedBalance, setUserStagedBalance] = useState(new BigNumber(0));\n  const [userBondedBalance, setUserBondedBalance] = useState(new BigNumber(0));\n  const [userStatus, setUserStatus] = useState(0);\n  const [userStatusUnlocked, setUserStatusUnlocked] = useState(0);\n  const [lockup, setLockup] = useState(0);\n  const [userRewardedQSD, setUserRewardedQSD] = useState(new BigNumber(0));\n  const [userClaimableQSD, setUserClaimableQSD] = useState(new BigNumber(0));\n\n  //Update User balances\n  useEffect(() => {\n    if (user === '') {\n      setUserQSGBalance(new BigNumber(0));\n      setUserQSGAllowance(new BigNumber(0));\n      setUserQSGBalance(new BigNumber(0));\n      setTotalQSGSupply(new BigNumber(0));\n      setUserStagedBalance(new BigNumber(0));\n      setUserBondedBalance(new BigNumber(0));\n      setUserStatus(0);\n      return;\n    }\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const poolAddress = await getPoolGovAddress();\n\n      const [\n        poolTotalBondedStr,\n        QSGBalance,\n        QSGAllowance,\n        stagedBalance,\n        bondedBalance,\n        status,\n        fluidUntilStr,\n        lockedUntilStr,\n        qsdRewardedStr,\n        qsdClaimableStr,\n      ] = await Promise.all([\n        getPoolTotalBonded(poolAddress),\n        getTokenBalance(QSG.addr, user),\n        getTokenAllowance(QSG.addr, user, poolAddress),\n        getBalanceOfStaged(poolAddress, user),\n        getBalanceBonded(poolAddress, user),\n        getPoolStatusOf(poolAddress, user),\n        getPoolFluidUntil(poolAddress, user),\n        getLockedUntil(poolAddress, user),\n        getPoolBalanceOfRewarded(poolAddress, user),\n        getPoolBalanceOfClaimable(poolAddress, user),\n      ]);\n\n      const qsdRewarded = toTokenUnitsBN(qsdRewardedStr, QSD.decimals);\n      const qsdClaimable = toTokenUnitsBN(qsdClaimableStr, QSD.decimals);\n      const poolTotalBonded = toTokenUnitsBN(poolTotalBondedStr, QSG.decimals);\n      const userQSGBalance = toTokenUnitsBN(QSGBalance, QSG.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, QSG.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, QSG.decimals);\n      const userStatus = parseInt(status, 10);\n      const fluidUntil = parseInt(fluidUntilStr, 10);\n      const lockedUntil = parseInt(lockedUntilStr, 10);\n\n      if (!isCancelled) {\n        setTotalBonded(poolTotalBonded);\n        setPoolGovAddress(poolAddress);\n        setUserQSGBalance(new BigNumber(userQSGBalance));\n        setUserQSGAllowance(new BigNumber(QSGAllowance));\n        setUserQSGBalance(new BigNumber(userQSGBalance));\n        setTotalQSGSupply(new BigNumber(totalQSGSupply));\n        setUserStagedBalance(new BigNumber(userStagedBalance));\n        setUserBondedBalance(new BigNumber(userBondedBalance));\n        setUserRewardedQSD(new BigNumber(qsdRewarded));\n        setUserClaimableQSD(new BigNumber(qsdClaimable));\n        setUserStatus(userStatus);\n        setUserStatusUnlocked(Math.max(fluidUntil, lockedUntil));\n        setLockup(POOL_EXIT_LOCKUP_EPOCHS);\n      }\n    }\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n\n  return (\n    <Layout>\n      <Guide\n        bodyInstructions={\n          <p>\n            Step 1. Earn QSG by bonding QSD when TWAP is &lt; 1\n            <br />\n            Step 2. Stage your QSG into the Governance Pool\n            <br />\n            Step 3. Bond your QSG into the Governance Pool\n            <br />\n            &nbsp;&nbsp; Note: If you'd like to submit a proposal your QSG needs\n            to remain bonded\n          </p>\n        }\n      />\n\n      <IconHeader\n        icon={<i className='fas fa-university' />}\n        text='QSG Rewards'\n      />\n\n      <AccountPageHeader\n        accountQSGBalance={userQSGBalance}\n        totalBonded={totalBonded}\n        accountStagedBalance={userStagedBalance}\n        accountBondedBalance={userBondedBalance}\n        accountStatus={userStatus}\n        unlocked={userStatusUnlocked}\n      />\n\n      <WithdrawDeposit\n        suffix='QSG'\n        balance={userQSGBalance}\n        allowance={userQSGAllowance}\n        stagedBalance={userStagedBalance}\n        status={userStatus}\n        disabled={!user}\n        handleApprove={() => {\n          approve(QSG.addr, poolGovAddress);\n        }}\n        handleDeposit={(depositAmount) => {\n          depositPool(\n            poolGovAddress,\n            toBaseUnitBN(depositAmount, QSG.decimals),\n            () => {}\n          );\n        }}\n        handleWithdraw={(withdrawAmount) => {\n          withdrawPool(\n            poolGovAddress,\n            toBaseUnitBN(withdrawAmount, QSG.decimals),\n            () => {}\n          );\n        }}\n      />\n\n      <BondUnbond\n        suffix='QSG'\n        staged={userStagedBalance}\n        bonded={userBondedBalance}\n        status={userStatus}\n        lockup={lockup}\n        disabled={!user}\n        handleBond={(bondAmount) => {\n          bondPool(\n            poolGovAddress,\n            toBaseUnitBN(bondAmount, QSG.decimals),\n            () => {}\n          );\n        }}\n        handleUnbond={(unbondAmount) => {\n          unbondPool(\n            poolGovAddress,\n            toBaseUnitBN(unbondAmount, QSG.decimals),\n            () => {}\n          );\n        }}\n      />\n\n      <Claim\n        userStatus={userStatus}\n        poolAddress={poolGovAddress}\n        amountQSD={userClaimableQSD}\n      />\n\n      <Rewards poolAddress={poolGovAddress} amountQSD={userRewardedQSD} />\n    </Layout>\n  );\n}\n\nexport default PoolGov;\n"]},"metadata":{},"sourceType":"module"}