{"ast":null,"code":"import { _ as _slicedToArray } from './slicedToArray-4e274c67.js';\nimport './unsupportedIterableToArray-137e449b.js';\nimport React, { useMemo, useCallback, useRef, useState, useEffect } from 'react';\nimport './_commonjsHelpers-97e6d7b1.js';\nimport './index-097535f1.js';\nimport './defineProperty-a0480c32.js';\nimport { _ as _toConsumableArray } from './toConsumableArray-127424c2.js';\nimport _styled from 'styled-components';\nimport './getPrototypeOf-b96da1e1.js';\nimport './color.js';\nimport './components.js';\nimport './contains-component.js';\nimport { unselectable } from './css.js';\nimport './dayjs.min-e57fb69a.js';\nimport './date.js';\nimport './miscellaneous.js';\nimport './environment.js';\nimport './font.js';\nimport './math-e6d0e93a.js';\nimport './characters.js';\nimport './format.js';\nimport './keycodes.js';\nimport './url.js';\nimport './web3.js';\nimport './constants.js';\nimport './breakpoints.js';\nimport { springs } from './springs.js';\nimport './text-styles.js';\nimport { _ as _extends } from './extends-db4f0c26.js';\nimport { _ as _objectWithoutProperties } from './objectWithoutProperties-234758e1.js';\nimport './objectWithoutPropertiesLoose-9606ad13.js';\nimport 'react-dom';\nimport { S as Spring } from './web-a351a0a1.js';\nimport { P as PropTypes } from './proptypes-c8a77d05.js';\nvar LABELS_HEIGHT = 30;\nvar WIDTH_DEFAULT = 300;\n\nfunction useMeasuredWidth() {\n  var ref = useRef();\n\n  var _useState = useState(WIDTH_DEFAULT),\n      _useState2 = _slicedToArray(_useState, 2),\n      measuredWidth = _useState2[0],\n      setMeasuredWidth = _useState2[1];\n\n  var onResize = useCallback(function () {\n    if (ref.current) {\n      setMeasuredWidth(ref.current.clientWidth);\n    }\n  }, []);\n  var onRef = useCallback(function (element) {\n    ref.current = element;\n    onResize();\n  }, [onResize]);\n  useEffect(function () {\n    window.addEventListener('resize', onResize);\n    return function () {\n      return window.removeEventListener('resize', onResize);\n    };\n  }, [onResize]);\n  return [measuredWidth, onRef];\n}\n\nvar _StyledSvg = _styled(\"svg\").withConfig({\n  displayName: \"LineChart___StyledSvg\",\n  componentId: \"sc-8kiakb-0\"\n})([\"display:block\"]);\n\nvar _StyledText = _styled(\"text\").withConfig({\n  displayName: \"LineChart___StyledText\",\n  componentId: \"sc-8kiakb-1\"\n})([\"alignment-baseline:middle;font-size:12px;font-weight:300;\", \";\"], unselectable);\n\nfunction LineChart(_ref) {\n  var animDelay = _ref.animDelay,\n      borderColor = _ref.borderColor,\n      color = _ref.color,\n      dotRadius = _ref.dotRadius,\n      height = _ref.height,\n      label = _ref.label,\n      labelColor = _ref.labelColor,\n      linesProps = _ref.lines,\n      reset = _ref.reset,\n      springConfig = _ref.springConfig,\n      total = _ref.total,\n      widthProps = _ref.width,\n      props = _objectWithoutProperties(_ref, [\"animDelay\", \"borderColor\", \"color\", \"dotRadius\", \"height\", \"label\", \"labelColor\", \"lines\", \"reset\", \"springConfig\", \"total\", \"width\"]);\n\n  var _useMeasuredWidth = useMeasuredWidth(),\n      _useMeasuredWidth2 = _slicedToArray(_useMeasuredWidth, 2),\n      width = _useMeasuredWidth2[0],\n      onSvgRef = _useMeasuredWidth2[1];\n\n  var lines = useMemo(function () {\n    return linesProps.map(function (lineOrValues) {\n      return Array.isArray(lineOrValues) ? {\n        values: lineOrValues\n      } : lineOrValues;\n    });\n  }, [linesProps]); // the count of provided values\n\n  var valuesCount = useMemo(function () {\n    // All the values have the same length, so we can use the first one.\n    return lines[0] ? lines[0].values.length : 0;\n  }, [lines]); // the total amount of values\n\n  var totalCount = useMemo(function () {\n    // If no total is provided, the total is the number of provided values.\n    return total > 0 && total > valuesCount ? total : valuesCount;\n  }, [valuesCount, total]);\n  var getX = useCallback(function (index) {\n    return width / Math.max(1, totalCount - 1) * index;\n  }, [width, totalCount]);\n  var getY = useCallback(function (percentage, progress, height) {\n    var padding = dotRadius + 2;\n    return height - padding - (height - padding * 2) * percentage * progress;\n  }, [dotRadius]);\n  var getLabelPosition = useCallback(function (index, length) {\n    if (index === 0) return 'start';\n    if (index === length - 1) return 'end';\n    return 'middle';\n  }, []);\n  var labels = label && totalCount > 0 ? _toConsumableArray(Array(totalCount).keys()).map(label) : null;\n  var chartHeight = height - (labels ? LABELS_HEIGHT : 0);\n  var rectangle = /*#__PURE__*/React.createElement(\"rect\", {\n    width: width,\n    height: chartHeight,\n    rx: \"3\",\n    ry: \"3\",\n    fill: \"#ffffff\",\n    strokeWidth: \"1\",\n    stroke: borderColor\n  });\n  return /*#__PURE__*/React.createElement(Spring, {\n    from: {\n      progress: 0\n    },\n    to: {\n      progress: 1\n    },\n    config: springConfig,\n    delay: animDelay,\n    reset: reset\n  }, function (_ref2) {\n    var progress = _ref2.progress;\n    return /*#__PURE__*/React.createElement(_StyledSvg, _extends({\n      ref: onSvgRef,\n      viewBox: \"0 0 \".concat(width, \" \").concat(height),\n      width: widthProps || 'auto',\n      height: \"auto\"\n    }, props), /*#__PURE__*/React.createElement(\"mask\", {\n      id: \"chart-mask\"\n    }, rectangle), rectangle, /*#__PURE__*/React.createElement(\"g\", {\n      mask: \"url(#chart-mask)\"\n    }, totalCount > 0 && /*#__PURE__*/React.createElement(\"path\", {\n      d: \"\\n                  \".concat(_toConsumableArray(new Array(totalCount - 1)).reduce(function (path, _, index) {\n        return \"\".concat(path, \" M \").concat(getX(index), \",\").concat(chartHeight, \" l 0,-8\");\n      }, ''), \"\\n                \"),\n      stroke: borderColor,\n      strokeWidth: \"1\"\n    }), lines.map(function (line, lineIndex) {\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: \"line-plot-\".concat(line.id || lineIndex)\n      }, /*#__PURE__*/React.createElement(\"path\", {\n        d: \"\\n                    M\\n                    \".concat(getX(0), \",\\n                    \").concat(getY(line.values[0], progress, chartHeight), \"\\n\\n                    \").concat(line.values.slice(1).map(function (val, index) {\n          return \"L\\n                           \".concat(getX((index + 1) * progress), \",\\n                           \").concat(getY(val, progress, chartHeight), \"\\n                          \");\n        }).join(''), \"\\n                  \"),\n        fill: \"transparent\",\n        stroke: line.color || color(lineIndex, {\n          lines: lines\n        }),\n        strokeWidth: \"2\"\n      }), line.values.slice(1, -1).map(function (val, index) {\n        return /*#__PURE__*/React.createElement(\"circle\", {\n          key: index,\n          cx: getX(index + 1) * progress,\n          cy: getY(val, progress, chartHeight),\n          r: dotRadius,\n          fill: \"white\",\n          stroke: line.color || color(lineIndex, {\n            lines: lines\n          }),\n          strokeWidth: \"1\"\n        });\n      }));\n    }), /*#__PURE__*/React.createElement(\"line\", {\n      x1: getX(valuesCount - 1) * progress,\n      y1: \"0\",\n      x2: getX(valuesCount - 1) * progress,\n      y2: chartHeight,\n      stroke: \"#DAEAEF\",\n      strokeWidth: \"3\"\n    })), labels && /*#__PURE__*/React.createElement(\"g\", {\n      transform: \"translate(0,\".concat(chartHeight, \")\")\n    }, labels.map(function (label, index) {\n      return /*#__PURE__*/React.createElement(_StyledText, {\n        key: index,\n        x: getX(index),\n        y: LABELS_HEIGHT / 2,\n        textAnchor: getLabelPosition(index, labels.length),\n        fill: labelColor\n      }, label);\n    })));\n  });\n}\n\nLineChart.propTypes = {\n  springConfig: PropTypes._spring,\n  total: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  dotRadius: PropTypes.number,\n  animDelay: PropTypes.number,\n  borderColor: PropTypes.string,\n  labelColor: PropTypes.string,\n  reset: PropTypes.bool,\n  lines: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({\n    id: PropTypes.number,\n    values: PropTypes.arrayOf(PropTypes.number).isRequired,\n    // numbers between 0 and 1\n    color: PropTypes.string // overrides the color() prop if set\n\n  }), // values can also be passed directly\n  PropTypes.arrayOf(PropTypes.number)])),\n  label: PropTypes.oneOfType([PropTypes.func, PropTypes._null]),\n  color: PropTypes.func\n};\nLineChart.defaultProps = {\n  springConfig: springs.lazy,\n  total: -1,\n  height: 200,\n  dotRadius: 7 / 2,\n  animDelay: 500,\n  reset: false,\n  borderColor: 'rgba(209, 209, 209, 0.5)',\n  labelColor: '#6d777b',\n  lines: [],\n  label: function label(index) {\n    return index + 1;\n  },\n  color: function color(index, _ref3) {\n    var lines = _ref3.lines;\n    return \"hsl(\".concat((index * (360 / lines.length) + 40) % 360, \", 60%, 70%)\");\n  }\n};\nexport default LineChart;","map":{"version":3,"sources":["../../src/components/LineChart/LineChart.js"],"names":["LABELS_HEIGHT","WIDTH_DEFAULT","ref","useRef","measuredWidth","setMeasuredWidth","useState","onResize","useCallback","onRef","useEffect","window","animDelay","borderColor","color","dotRadius","height","label","labelColor","lines","linesProps","reset","springConfig","total","width","widthProps","props","onSvgRef","useMeasuredWidth","useMemo","values","lineOrValues","valuesCount","totalCount","getX","Math","getY","padding","getLabelPosition","index","length","labels","Array","chartHeight","rectangle","progress","line","unselectable","LineChart","PropTypes","id","func","springs"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Spring } from 'react-spring'\nimport PropTypes from '../../proptypes'\nimport { springs } from '../../style'\nimport { unselectable } from '../../utils'\n\nconst LABELS_HEIGHT = 30\nconst WIDTH_DEFAULT = 300\n\nfunction useMeasuredWidth() {\n  const ref = useRef()\n  const [measuredWidth, setMeasuredWidth] = useState(WIDTH_DEFAULT)\n\n  const onResize = useCallback(() => {\n    if (ref.current) {\n      setMeasuredWidth(ref.current.clientWidth)\n    }\n  }, [])\n\n  const onRef = useCallback(\n    element => {\n      ref.current = element\n      onResize()\n    },\n    [onResize]\n  )\n\n  useEffect(() => {\n    window.addEventListener('resize', onResize)\n    return () => window.removeEventListener('resize', onResize)\n  }, [onResize])\n\n  return [measuredWidth, onRef]\n}\n\nfunction LineChart({\n  animDelay,\n  borderColor,\n  color,\n  dotRadius,\n  height,\n  label,\n  labelColor,\n  lines: linesProps,\n  reset,\n  springConfig,\n  total,\n  width: widthProps,\n  ...props\n}) {\n  const [width, onSvgRef] = useMeasuredWidth()\n\n  const lines = useMemo(() => {\n    return linesProps.map(lineOrValues =>\n      Array.isArray(lineOrValues) ? { values: lineOrValues } : lineOrValues\n    )\n  }, [linesProps])\n\n  // the count of provided values\n  const valuesCount = useMemo(() => {\n    // All the values have the same length, so we can use the first one.\n    return lines[0] ? lines[0].values.length : 0\n  }, [lines])\n\n  // the total amount of values\n  const totalCount = useMemo(() => {\n    // If no total is provided, the total is the number of provided values.\n    return total > 0 && total > valuesCount ? total : valuesCount\n  }, [valuesCount, total])\n\n  const getX = useCallback(\n    index => {\n      return (width / Math.max(1, totalCount - 1)) * index\n    },\n    [width, totalCount]\n  )\n\n  const getY = useCallback(\n    (percentage, progress, height) => {\n      const padding = dotRadius + 2\n      return height - padding - (height - padding * 2) * percentage * progress\n    },\n    [dotRadius]\n  )\n\n  const getLabelPosition = useCallback((index, length) => {\n    if (index === 0) return 'start'\n    if (index === length - 1) return 'end'\n    return 'middle'\n  }, [])\n\n  const labels =\n    label && totalCount > 0 ? [...Array(totalCount).keys()].map(label) : null\n\n  const chartHeight = height - (labels ? LABELS_HEIGHT : 0)\n\n  const rectangle = (\n    <rect\n      width={width}\n      height={chartHeight}\n      rx=\"3\"\n      ry=\"3\"\n      fill=\"#ffffff\"\n      strokeWidth=\"1\"\n      stroke={borderColor}\n    />\n  )\n\n  return (\n    <Spring\n      from={{ progress: 0 }}\n      to={{ progress: 1 }}\n      config={springConfig}\n      delay={animDelay}\n      reset={reset}\n    >\n      {({ progress }) => (\n        <svg\n          ref={onSvgRef}\n          viewBox={`0 0 ${width} ${height}`}\n          width={widthProps || 'auto'}\n          height=\"auto\"\n          css=\"display: block\"\n          {...props}\n        >\n          <mask id=\"chart-mask\">{rectangle}</mask>\n          {rectangle}\n\n          <g mask=\"url(#chart-mask)\">\n            {totalCount > 0 && (\n              <path\n                d={`\n                  ${[...new Array(totalCount - 1)].reduce(\n                    (path, _, index) =>\n                      `${path} M ${getX(index)},${chartHeight} l 0,-8`,\n                    ''\n                  )}\n                `}\n                stroke={borderColor}\n                strokeWidth=\"1\"\n              />\n            )}\n            {lines.map((line, lineIndex) => (\n              <g key={`line-plot-${line.id || lineIndex}`}>\n                <path\n                  d={`\n                    M\n                    ${getX(0)},\n                    ${getY(line.values[0], progress, chartHeight)}\n\n                    ${line.values\n                      .slice(1)\n                      .map(\n                        (val, index) =>\n                          `L\n                           ${getX((index + 1) * progress)},\n                           ${getY(val, progress, chartHeight)}\n                          `\n                      )\n                      .join('')}\n                  `}\n                  fill=\"transparent\"\n                  stroke={line.color || color(lineIndex, { lines })}\n                  strokeWidth=\"2\"\n                />\n                {line.values.slice(1, -1).map((val, index) => (\n                  <circle\n                    key={index}\n                    cx={getX(index + 1) * progress}\n                    cy={getY(val, progress, chartHeight)}\n                    r={dotRadius}\n                    fill=\"white\"\n                    stroke={line.color || color(lineIndex, { lines })}\n                    strokeWidth=\"1\"\n                  />\n                ))}\n              </g>\n            ))}\n            <line\n              x1={getX(valuesCount - 1) * progress}\n              y1=\"0\"\n              x2={getX(valuesCount - 1) * progress}\n              y2={chartHeight}\n              stroke=\"#DAEAEF\"\n              strokeWidth=\"3\"\n            />\n          </g>\n          {labels && (\n            <g transform={`translate(0,${chartHeight})`}>\n              {labels.map((label, index) => (\n                <text\n                  key={index}\n                  x={getX(index)}\n                  y={LABELS_HEIGHT / 2}\n                  textAnchor={getLabelPosition(index, labels.length)}\n                  fill={labelColor}\n                  css={`\n                    alignment-baseline: middle;\n                    font-size: 12px;\n                    font-weight: 300;\n                    ${unselectable};\n                  `}\n                >\n                  {label}\n                </text>\n              ))}\n            </g>\n          )}\n        </svg>\n      )}\n    </Spring>\n  )\n}\n\nLineChart.propTypes = {\n  springConfig: PropTypes._spring,\n  total: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  dotRadius: PropTypes.number,\n  animDelay: PropTypes.number,\n  borderColor: PropTypes.string,\n  labelColor: PropTypes.string,\n  reset: PropTypes.bool,\n  lines: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.shape({\n        id: PropTypes.number,\n        values: PropTypes.arrayOf(PropTypes.number).isRequired, // numbers between 0 and 1\n        color: PropTypes.string, // overrides the color() prop if set\n      }),\n      // values can also be passed directly\n      PropTypes.arrayOf(PropTypes.number),\n    ])\n  ),\n  label: PropTypes.oneOfType([PropTypes.func, PropTypes._null]),\n  color: PropTypes.func,\n}\n\nLineChart.defaultProps = {\n  springConfig: springs.lazy,\n  total: -1,\n  height: 200,\n  dotRadius: 7 / 2,\n  animDelay: 500,\n  reset: false,\n  borderColor: 'rgba(209, 209, 209, 0.5)',\n  labelColor: '#6d777b',\n  lines: [],\n  label: index => index + 1,\n  color: (index, { lines }) =>\n    `hsl(${(index * (360 / lines.length) + 40) % 360}, 60%, 70%)`,\n}\n\nexport default LineChart\n"]},"metadata":{},"sourceType":"module"}