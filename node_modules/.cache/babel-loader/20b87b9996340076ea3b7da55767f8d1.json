{"ast":null,"code":"var _jsxFileName = \"/Users/J/crypto/dashboard/src/components/Pool/index.tsx\";\nimport BigNumber from 'bignumber.js';\nimport React, { useEffect, useState } from 'react';\nimport { Layout } from '@aragon/ui';\nimport { useParams } from 'react-router-dom';\nimport { DollarPool4 } from '../../constants/contracts';\nimport { DAI, QSD, UNI } from '../../constants/tokens';\nimport { POOL_EXIT_LOCKUP_EPOCHS } from '../../constants/values';\nimport { getExpansionAmount, getInstantaneousQSDPrice, getLPBondedLiquidity, getPoolBalanceOfBonded, getPoolBalanceOfClaimable, getPoolBalanceOfRewarded, getPoolBalanceOfStaged, getPoolFluidUntil, getPoolStatusOf, getPoolTotalBonded, getTokenAllowance, getTokenBalance } from '../../utils/infura';\nimport { toBaseUnitBN, toFloat, toTokenUnitsBN } from '../../utils/number';\nimport { getPoolLPAddress } from '../../utils/pool';\nimport { approve, bondPool, depositPool, unbondPool, withdrawPool, claimPool } from '../../utils/web3';\nimport { BondUnbond, IconHeader, WithdrawDeposit, Claim, Guide } from '../common'; // import Claim from './Claim';\n// import WithdrawDeposit from \"./WithdrawDeposit\";\n// import BondUnbond from './BondUnbond';\n\nimport PoolPageHeader from './Header';\nimport Provide from './Provide';\n\nfunction Pool({\n  user\n}) {\n  const {\n    override\n  } = useParams();\n\n  if (override) {\n    user = override;\n  }\n\n  const [qsdLiquidity, setQSDLiquidity] = useState(null);\n  const [daiLiquidity, setDAILiquidity] = useState(null);\n  const [qsdPrice, setQSDPrice] = useState(null);\n  const [expansionAmount, setExpansionAmount] = useState(null);\n  const [poolAddress, setPoolAddress] = useState('');\n  const [poolTotalBonded, setPoolTotalBonded] = useState(new BigNumber(0));\n  const [pairBalanceQSD, setPairBalanceQSD] = useState(new BigNumber(0));\n  const [pairBalanceDAI, setPairBalanceDAI] = useState(new BigNumber(0));\n  const [userUNIBalance, setUserUNIBalance] = useState(new BigNumber(0));\n  const [userUNIAllowance, setUserUNIAllowance] = useState(new BigNumber(0));\n  const [userDAIBalance, setUserDAIBalance] = useState(new BigNumber(0));\n  const [userDAIAllowance, setUserDAIAllowance] = useState(new BigNumber(0));\n  const [userStagedBalance, setUserStagedBalance] = useState(new BigNumber(0));\n  const [userBondedBalance, setUserBondedBalance] = useState(new BigNumber(0));\n  const [userRewardedBalance, setUserRewardedBalance] = useState(new BigNumber(0));\n  const [userClaimableBalance, setUserClaimableBalance] = useState(new BigNumber(0));\n  const [userStatus, setUserStatus] = useState(0);\n  const [userStatusUnlocked, setUserStatusUnlocked] = useState(0);\n  const [lockup, setLockup] = useState(0); //APR\n\n  useEffect(() => {\n    const updateAPR = async () => {\n      const [spot, expansionAmount, liquidity] = await Promise.all([getInstantaneousQSDPrice(), getExpansionAmount(), getLPBondedLiquidity()]);\n      setQSDPrice(toTokenUnitsBN(spot, 18));\n      setQSDLiquidity(liquidity.qsd);\n      setDAILiquidity(liquidity.dai);\n      setExpansionAmount(expansionAmount);\n    };\n\n    updateAPR();\n  }, []); //Update User balances\n\n  useEffect(() => {\n    if (user === '') {\n      setPoolAddress('');\n      setPoolTotalBonded(new BigNumber(0));\n      setPairBalanceQSD(new BigNumber(0));\n      setPairBalanceDAI(new BigNumber(0));\n      setUserUNIBalance(new BigNumber(0));\n      setUserUNIAllowance(new BigNumber(0));\n      setUserDAIBalance(new BigNumber(0));\n      setUserDAIAllowance(new BigNumber(0));\n      setUserStagedBalance(new BigNumber(0));\n      setUserBondedBalance(new BigNumber(0));\n      setUserRewardedBalance(new BigNumber(0));\n      setUserClaimableBalance(new BigNumber(0));\n      setUserStatus(0);\n      setUserStatusUnlocked(0);\n      return;\n    }\n\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const poolAddressStr = await getPoolLPAddress();\n      const [poolTotalBondedStr, pairBalanceQSDStr, pairBalanceDAIStr, balance, daiBalance, allowance, usdcAllowance, stagedBalance, bondedBalance, rewardedBalance, claimableBalance, status, fluidUntilStr] = await Promise.all([getPoolTotalBonded(poolAddressStr), getTokenBalance(QSD.addr, UNI.addr), getTokenBalance(DAI.addr, UNI.addr), getTokenBalance(UNI.addr, user), getTokenBalance(DAI.addr, user), getTokenAllowance(UNI.addr, user, poolAddressStr), getTokenAllowance(DAI.addr, user, poolAddressStr), getPoolBalanceOfStaged(poolAddressStr, user), getPoolBalanceOfBonded(poolAddressStr, user), getPoolBalanceOfRewarded(poolAddressStr, user), getPoolBalanceOfClaimable(poolAddressStr, user), getPoolStatusOf(poolAddressStr, user), getPoolFluidUntil(poolAddressStr, user)]);\n      const poolTotalBonded = toTokenUnitsBN(poolTotalBondedStr, QSD.decimals);\n      const pairQSDBalance = toTokenUnitsBN(pairBalanceQSDStr, QSD.decimals);\n      const pairDAIBalance = toTokenUnitsBN(pairBalanceDAIStr, DAI.decimals);\n      const userUNIBalance = toTokenUnitsBN(balance, UNI.decimals);\n      const userDAIBalance = toTokenUnitsBN(daiBalance, DAI.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, UNI.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, UNI.decimals);\n      const userRewardedBalance = toTokenUnitsBN(rewardedBalance, QSD.decimals);\n      const userClaimableBalance = toTokenUnitsBN(claimableBalance, QSD.decimals);\n      const userStatus = parseInt(status, 10);\n      const fluidUntil = parseInt(fluidUntilStr, 10);\n\n      if (!isCancelled) {\n        setPoolAddress(poolAddressStr);\n        setPoolTotalBonded(new BigNumber(poolTotalBonded));\n        setPairBalanceQSD(new BigNumber(pairQSDBalance));\n        setPairBalanceDAI(new BigNumber(pairDAIBalance));\n        setUserUNIBalance(new BigNumber(userUNIBalance));\n        setUserUNIAllowance(new BigNumber(allowance));\n        setUserDAIAllowance(new BigNumber(usdcAllowance));\n        setUserDAIBalance(new BigNumber(userDAIBalance));\n        setUserStagedBalance(new BigNumber(userStagedBalance));\n        setUserBondedBalance(new BigNumber(userBondedBalance));\n        setUserRewardedBalance(new BigNumber(userRewardedBalance));\n        setUserClaimableBalance(new BigNumber(userClaimableBalance));\n        setUserStatus(userStatus);\n        setUserStatusUnlocked(fluidUntil);\n        setLockup(poolAddressStr === DollarPool4 ? POOL_EXIT_LOCKUP_EPOCHS : 1);\n      }\n    }\n\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000); // eslint-disable-next-line consistent-return\n\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n  let lpHourlyAPR = '...';\n  let lpDailyAPR = '...';\n  let lpWeeklyAPR = '...';\n  let lpMonthlyAPR = '...'; // Define number formatting\n\n  var options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2\n  };\n  var numberFormat = new Intl.NumberFormat('en-US', options);\n\n  if (qsdPrice && qsdLiquidity && daiLiquidity && expansionAmount) {\n    const totalDAI = qsdLiquidity * toFloat(qsdPrice) + daiLiquidity;\n    const daiToAdd = expansionAmount / 2 * toFloat(qsdPrice);\n    const lpYield = daiToAdd / totalDAI * 100;\n    lpHourlyAPR = numberFormat.format(lpYield / 4) + '%';\n    lpDailyAPR = numberFormat.format(lpYield * 6) + '%';\n    lpWeeklyAPR = numberFormat.format(lpYield * 6 * 7) + '%';\n    lpMonthlyAPR = numberFormat.format(lpYield * 6 * 30) + '%';\n  }\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Guide, {\n    aprs: {\n      hourly: lpHourlyAPR,\n      daily: lpDailyAPR,\n      weekly: lpWeeklyAPR,\n      monthly: lpMonthlyAPR\n    },\n    bodyInstructions: /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }\n    }, \"Step 1: Stage your UNI-V2\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }\n    }), \"Step 2: Bond your UNI-V2\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }), \"Step 3: Unbond your UNI-V2 to move rewards to claimable\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }), \"\\xA0\\xA0 (Remember to re-bond your UNI-V2 to continue getting rewards)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }), \"Step 4: Wait 1 epoch to claim claimable QSD\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }), \"Step 5: Provide your rewards to compound your returns\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }\n    }), \"\\xA0\\xA0 5.1: Dual Supply - Match your rewards with DAI from your wallet and add to LP\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }\n    }), \"\\xA0\\xA0 5.2: Single Sided Supply - Add your rewards directly to your LP\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(IconHeader, {\n    icon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-parachute-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 15\n      }\n    }),\n    text: \"LP Rewards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PoolPageHeader, {\n    accountUNIBalance: userUNIBalance,\n    accountBondedBalance: userBondedBalance,\n    accountRewardedQSDBalance: userRewardedBalance,\n    accountClaimableQSDBalance: userClaimableBalance,\n    poolTotalBonded: poolTotalBonded,\n    accountPoolStatus: userStatus,\n    unlocked: userStatusUnlocked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(WithdrawDeposit, {\n    suffix: \"UNI-V2\",\n    balance: userUNIBalance,\n    allowance: userUNIAllowance,\n    stagedBalance: userStagedBalance,\n    status: userStatus,\n    disabled: !poolAddress,\n    handleApprove: () => {\n      approve(UNI.addr, poolAddress);\n    },\n    handleDeposit: (depositAmount, callback) => {\n      depositPool(poolAddress, toBaseUnitBN(depositAmount, UNI.decimals), callback);\n    },\n    handleWithdraw: (withdrawAmount, callback) => {\n      withdrawPool(poolAddress, toBaseUnitBN(withdrawAmount, UNI.decimals), callback);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BondUnbond, {\n    suffix: \"UNI-V2\",\n    staged: userStagedBalance,\n    bonded: userBondedBalance,\n    status: userStatus,\n    lockup: lockup,\n    disabled: !poolAddress,\n    handleBond: (bondAmount, callback) => {\n      bondPool(poolAddress, toBaseUnitBN(bondAmount, UNI.decimals), callback);\n    },\n    handleUnbond: (unbondAmount, callback) => {\n      unbondPool(poolAddress, toBaseUnitBN(unbondAmount, UNI.decimals), callback);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Claim, {\n    suffix: \"QSD\",\n    claimable: userClaimableBalance,\n    status: userStatus,\n    disabled: !poolAddress,\n    handleClaim: (claimAmount, callback) => {\n      claimPool(poolAddress, toBaseUnitBN(claimAmount, QSD.decimals), callback);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Provide, {\n    poolAddress: poolAddress,\n    user: user,\n    rewarded: userRewardedBalance,\n    status: userStatus,\n    pairBalanceQSD: pairBalanceQSD,\n    pairBalanceDAI: pairBalanceDAI,\n    userDAIBalance: userDAIBalance,\n    userDAIAllowance: userDAIAllowance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pool;","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/components/Pool/index.tsx"],"names":["BigNumber","React","useEffect","useState","Layout","useParams","DollarPool4","DAI","QSD","UNI","POOL_EXIT_LOCKUP_EPOCHS","getExpansionAmount","getInstantaneousQSDPrice","getLPBondedLiquidity","getPoolBalanceOfBonded","getPoolBalanceOfClaimable","getPoolBalanceOfRewarded","getPoolBalanceOfStaged","getPoolFluidUntil","getPoolStatusOf","getPoolTotalBonded","getTokenAllowance","getTokenBalance","toBaseUnitBN","toFloat","toTokenUnitsBN","getPoolLPAddress","approve","bondPool","depositPool","unbondPool","withdrawPool","claimPool","BondUnbond","IconHeader","WithdrawDeposit","Claim","Guide","PoolPageHeader","Provide","Pool","user","override","qsdLiquidity","setQSDLiquidity","daiLiquidity","setDAILiquidity","qsdPrice","setQSDPrice","expansionAmount","setExpansionAmount","poolAddress","setPoolAddress","poolTotalBonded","setPoolTotalBonded","pairBalanceQSD","setPairBalanceQSD","pairBalanceDAI","setPairBalanceDAI","userUNIBalance","setUserUNIBalance","userUNIAllowance","setUserUNIAllowance","userDAIBalance","setUserDAIBalance","userDAIAllowance","setUserDAIAllowance","userStagedBalance","setUserStagedBalance","userBondedBalance","setUserBondedBalance","userRewardedBalance","setUserRewardedBalance","userClaimableBalance","setUserClaimableBalance","userStatus","setUserStatus","userStatusUnlocked","setUserStatusUnlocked","lockup","setLockup","updateAPR","spot","liquidity","Promise","all","qsd","dai","isCancelled","updateUserInfo","poolAddressStr","poolTotalBondedStr","pairBalanceQSDStr","pairBalanceDAIStr","balance","daiBalance","allowance","usdcAllowance","stagedBalance","bondedBalance","rewardedBalance","claimableBalance","status","fluidUntilStr","addr","decimals","pairQSDBalance","pairDAIBalance","parseInt","fluidUntil","id","setInterval","clearInterval","lpHourlyAPR","lpDailyAPR","lpWeeklyAPR","lpMonthlyAPR","options","minimumFractionDigits","maximumFractionDigits","numberFormat","Intl","NumberFormat","totalDAI","daiToAdd","lpYield","format","hourly","daily","weekly","monthly","depositAmount","callback","withdrawAmount","bondAmount","unbondAmount","claimAmount"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,GAAnB,QAA8B,wBAA9B;AACA,SAASC,uBAAT,QAAwC,wBAAxC;AACA,SACEC,kBADF,EAEEC,wBAFF,EAGEC,oBAHF,EAIEC,sBAJF,EAKEC,yBALF,EAMEC,wBANF,EAOEC,sBAPF,EAQEC,iBARF,EASEC,eATF,EAUEC,kBAVF,EAWEC,iBAXF,EAYEC,eAZF,QAaO,oBAbP;AAcA,SAASC,YAAT,EAAuBC,OAAvB,EAAgCC,cAAhC,QAAsD,oBAAtD;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SACEC,OADF,EAEEC,QAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,YALF,EAMEC,SANF,QAOO,kBAPP;AAQA,SACEC,UADF,EAEEC,UAFF,EAGEC,eAHF,EAIEC,KAJF,EAKEC,KALF,QAMO,WANP,C,CAOA;AACA;AACA;;AACA,OAAOC,cAAP,MAA2B,UAA3B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAA0C;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAerC,SAAS,EAA9B;;AACA,MAAIqC,QAAJ,EAAc;AACZD,IAAAA,IAAI,GAAGC,QAAP;AACD;;AAED,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCzC,QAAQ,CAAgB,IAAhB,CAAhD;AACA,QAAM,CAAC0C,YAAD,EAAeC,eAAf,IAAkC3C,QAAQ,CAAgB,IAAhB,CAAhD;AACA,QAAM,CAAC4C,QAAD,EAAWC,WAAX,IAA0B7C,QAAQ,CAAmB,IAAnB,CAAxC;AACA,QAAM,CAAC8C,eAAD,EAAkBC,kBAAlB,IAAwC/C,QAAQ,CAAgB,IAAhB,CAAtD;AAEA,QAAM,CAACgD,WAAD,EAAcC,cAAd,IAAgCjD,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACkD,eAAD,EAAkBC,kBAAlB,IAAwCnD,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAAtD;AACA,QAAM,CAACuD,cAAD,EAAiBC,iBAAjB,IAAsCrD,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAApD;AACA,QAAM,CAACyD,cAAD,EAAiBC,iBAAjB,IAAsCvD,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAApD;AACA,QAAM,CAAC2D,cAAD,EAAiBC,iBAAjB,IAAsCzD,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAApD;AACA,QAAM,CAAC6D,gBAAD,EAAmBC,mBAAnB,IAA0C3D,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAAxD;AACA,QAAM,CAAC+D,cAAD,EAAiBC,iBAAjB,IAAsC7D,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAApD;AACA,QAAM,CAACiE,gBAAD,EAAmBC,mBAAnB,IAA0C/D,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAAxD;AACA,QAAM,CAACmE,iBAAD,EAAoBC,oBAApB,IAA4CjE,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAA1D;AACA,QAAM,CAACqE,iBAAD,EAAoBC,oBAApB,IAA4CnE,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAA1D;AACA,QAAM,CAACuE,mBAAD,EAAsBC,sBAAtB,IAAgDrE,QAAQ,CAC5D,IAAIH,SAAJ,CAAc,CAAd,CAD4D,CAA9D;AAGA,QAAM,CAACyE,oBAAD,EAAuBC,uBAAvB,IAAkDvE,QAAQ,CAC9D,IAAIH,SAAJ,CAAc,CAAd,CAD8D,CAAhE;AAGA,QAAM,CAAC2E,UAAD,EAAaC,aAAb,IAA8BzE,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAAC0E,kBAAD,EAAqBC,qBAArB,IAA8C3E,QAAQ,CAAC,CAAD,CAA5D;AACA,QAAM,CAAC4E,MAAD,EAASC,SAAT,IAAsB7E,QAAQ,CAAC,CAAD,CAApC,CA7BwC,CA+BxC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM+E,SAAS,GAAG,YAAY;AAC5B,YAAM,CAACC,IAAD,EAAOjC,eAAP,EAAwBkC,SAAxB,IAAqC,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC3DzE,wBAAwB,EADmC,EAE3DD,kBAAkB,EAFyC,EAG3DE,oBAAoB,EAHuC,CAAZ,CAAjD;AAMAmC,MAAAA,WAAW,CAACvB,cAAc,CAACyD,IAAD,EAAO,EAAP,CAAf,CAAX;AACAtC,MAAAA,eAAe,CAACuC,SAAS,CAACG,GAAX,CAAf;AACAxC,MAAAA,eAAe,CAACqC,SAAS,CAACI,GAAX,CAAf;AACArC,MAAAA,kBAAkB,CAACD,eAAD,CAAlB;AACD,KAXD;;AAaAgC,IAAAA,SAAS;AACV,GAfQ,EAeN,EAfM,CAAT,CAhCwC,CAiDxC;;AACA/E,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuC,IAAI,KAAK,EAAb,EAAiB;AACfW,MAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,MAAAA,kBAAkB,CAAC,IAAItD,SAAJ,CAAc,CAAd,CAAD,CAAlB;AACAwD,MAAAA,iBAAiB,CAAC,IAAIxD,SAAJ,CAAc,CAAd,CAAD,CAAjB;AACA0D,MAAAA,iBAAiB,CAAC,IAAI1D,SAAJ,CAAc,CAAd,CAAD,CAAjB;AACA4D,MAAAA,iBAAiB,CAAC,IAAI5D,SAAJ,CAAc,CAAd,CAAD,CAAjB;AACA8D,MAAAA,mBAAmB,CAAC,IAAI9D,SAAJ,CAAc,CAAd,CAAD,CAAnB;AACAgE,MAAAA,iBAAiB,CAAC,IAAIhE,SAAJ,CAAc,CAAd,CAAD,CAAjB;AACAkE,MAAAA,mBAAmB,CAAC,IAAIlE,SAAJ,CAAc,CAAd,CAAD,CAAnB;AACAoE,MAAAA,oBAAoB,CAAC,IAAIpE,SAAJ,CAAc,CAAd,CAAD,CAApB;AACAsE,MAAAA,oBAAoB,CAAC,IAAItE,SAAJ,CAAc,CAAd,CAAD,CAApB;AACAwE,MAAAA,sBAAsB,CAAC,IAAIxE,SAAJ,CAAc,CAAd,CAAD,CAAtB;AACA0E,MAAAA,uBAAuB,CAAC,IAAI1E,SAAJ,CAAc,CAAd,CAAD,CAAvB;AACA4E,MAAAA,aAAa,CAAC,CAAD,CAAb;AACAE,MAAAA,qBAAqB,CAAC,CAAD,CAArB;AACA;AACD;;AACD,QAAIU,WAAW,GAAG,KAAlB;;AAEA,mBAAeC,cAAf,GAAgC;AAC9B,YAAMC,cAAc,GAAG,MAAMhE,gBAAgB,EAA7C;AAEA,YAAM,CACJiE,kBADI,EAEJC,iBAFI,EAGJC,iBAHI,EAIJC,OAJI,EAKJC,UALI,EAMJC,SANI,EAOJC,aAPI,EAQJC,aARI,EASJC,aATI,EAUJC,eAVI,EAWJC,gBAXI,EAYJC,MAZI,EAaJC,aAbI,IAcF,MAAMnB,OAAO,CAACC,GAAR,CAAY,CACpBjE,kBAAkB,CAACsE,cAAD,CADE,EAEpBpE,eAAe,CAACd,GAAG,CAACgG,IAAL,EAAW/F,GAAG,CAAC+F,IAAf,CAFK,EAGpBlF,eAAe,CAACf,GAAG,CAACiG,IAAL,EAAW/F,GAAG,CAAC+F,IAAf,CAHK,EAIpBlF,eAAe,CAACb,GAAG,CAAC+F,IAAL,EAAW/D,IAAX,CAJK,EAKpBnB,eAAe,CAACf,GAAG,CAACiG,IAAL,EAAW/D,IAAX,CALK,EAOpBpB,iBAAiB,CAACZ,GAAG,CAAC+F,IAAL,EAAW/D,IAAX,EAAiBiD,cAAjB,CAPG,EAQpBrE,iBAAiB,CAACd,GAAG,CAACiG,IAAL,EAAW/D,IAAX,EAAiBiD,cAAjB,CARG,EASpBzE,sBAAsB,CAACyE,cAAD,EAAiBjD,IAAjB,CATF,EAUpB3B,sBAAsB,CAAC4E,cAAD,EAAiBjD,IAAjB,CAVF,EAYpBzB,wBAAwB,CAAC0E,cAAD,EAAiBjD,IAAjB,CAZJ,EAapB1B,yBAAyB,CAAC2E,cAAD,EAAiBjD,IAAjB,CAbL,EAcpBtB,eAAe,CAACuE,cAAD,EAAiBjD,IAAjB,CAdK,EAepBvB,iBAAiB,CAACwE,cAAD,EAAiBjD,IAAjB,CAfG,CAAZ,CAdV;AAgCA,YAAMY,eAAe,GAAG5B,cAAc,CAACkE,kBAAD,EAAqBnF,GAAG,CAACiG,QAAzB,CAAtC;AACA,YAAMC,cAAc,GAAGjF,cAAc,CAACmE,iBAAD,EAAoBpF,GAAG,CAACiG,QAAxB,CAArC;AACA,YAAME,cAAc,GAAGlF,cAAc,CAACoE,iBAAD,EAAoBtF,GAAG,CAACkG,QAAxB,CAArC;AACA,YAAM9C,cAAc,GAAGlC,cAAc,CAACqE,OAAD,EAAUrF,GAAG,CAACgG,QAAd,CAArC;AACA,YAAM1C,cAAc,GAAGtC,cAAc,CAACsE,UAAD,EAAaxF,GAAG,CAACkG,QAAjB,CAArC;AACA,YAAMtC,iBAAiB,GAAG1C,cAAc,CAACyE,aAAD,EAAgBzF,GAAG,CAACgG,QAApB,CAAxC;AACA,YAAMpC,iBAAiB,GAAG5C,cAAc,CAAC0E,aAAD,EAAgB1F,GAAG,CAACgG,QAApB,CAAxC;AACA,YAAMlC,mBAAmB,GAAG9C,cAAc,CAAC2E,eAAD,EAAkB5F,GAAG,CAACiG,QAAtB,CAA1C;AACA,YAAMhC,oBAAoB,GAAGhD,cAAc,CACzC4E,gBADyC,EAEzC7F,GAAG,CAACiG,QAFqC,CAA3C;AAIA,YAAM9B,UAAU,GAAGiC,QAAQ,CAACN,MAAD,EAAS,EAAT,CAA3B;AACA,YAAMO,UAAU,GAAGD,QAAQ,CAACL,aAAD,EAAgB,EAAhB,CAA3B;;AAEA,UAAI,CAACf,WAAL,EAAkB;AAChBpC,QAAAA,cAAc,CAACsC,cAAD,CAAd;AACApC,QAAAA,kBAAkB,CAAC,IAAItD,SAAJ,CAAcqD,eAAd,CAAD,CAAlB;AACAG,QAAAA,iBAAiB,CAAC,IAAIxD,SAAJ,CAAc0G,cAAd,CAAD,CAAjB;AACAhD,QAAAA,iBAAiB,CAAC,IAAI1D,SAAJ,CAAc2G,cAAd,CAAD,CAAjB;AACA/C,QAAAA,iBAAiB,CAAC,IAAI5D,SAAJ,CAAc2D,cAAd,CAAD,CAAjB;AACAG,QAAAA,mBAAmB,CAAC,IAAI9D,SAAJ,CAAcgG,SAAd,CAAD,CAAnB;AACA9B,QAAAA,mBAAmB,CAAC,IAAIlE,SAAJ,CAAciG,aAAd,CAAD,CAAnB;AACAjC,QAAAA,iBAAiB,CAAC,IAAIhE,SAAJ,CAAc+D,cAAd,CAAD,CAAjB;AACAK,QAAAA,oBAAoB,CAAC,IAAIpE,SAAJ,CAAcmE,iBAAd,CAAD,CAApB;AACAG,QAAAA,oBAAoB,CAAC,IAAItE,SAAJ,CAAcqE,iBAAd,CAAD,CAApB;AACAG,QAAAA,sBAAsB,CAAC,IAAIxE,SAAJ,CAAcuE,mBAAd,CAAD,CAAtB;AACAG,QAAAA,uBAAuB,CAAC,IAAI1E,SAAJ,CAAcyE,oBAAd,CAAD,CAAvB;AACAG,QAAAA,aAAa,CAACD,UAAD,CAAb;AACAG,QAAAA,qBAAqB,CAAC+B,UAAD,CAArB;AACA7B,QAAAA,SAAS,CAACU,cAAc,KAAKpF,WAAnB,GAAiCI,uBAAjC,GAA2D,CAA5D,CAAT;AACD;AACF;;AACD+E,IAAAA,cAAc;AACd,UAAMqB,EAAE,GAAGC,WAAW,CAACtB,cAAD,EAAiB,KAAjB,CAAtB,CAzFc,CA2Fd;;AACA,WAAO,MAAM;AACXD,MAAAA,WAAW,GAAG,IAAd;AACAwB,MAAAA,aAAa,CAACF,EAAD,CAAb;AACD,KAHD;AAID,GAhGQ,EAgGN,CAACrE,IAAD,CAhGM,CAAT;AAkGA,MAAIwE,WAAW,GAAG,KAAlB;AACA,MAAIC,UAAU,GAAG,KAAjB;AACA,MAAIC,WAAW,GAAG,KAAlB;AACA,MAAIC,YAAY,GAAG,KAAnB,CAvJwC,CAyJxC;;AACA,MAAIC,OAAO,GAAG;AAAEC,IAAAA,qBAAqB,EAAE,CAAzB;AACAC,IAAAA,qBAAqB,EAAE;AADvB,GAAd;AAEA,MAAIC,YAAY,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+BL,OAA/B,CAAnB;;AAEA,MAAItE,QAAQ,IAAIJ,YAAZ,IAA4BE,YAA5B,IAA4CI,eAAhD,EAAiE;AAC/D,UAAM0E,QAAQ,GAAGhF,YAAY,GAAGnB,OAAO,CAACuB,QAAD,CAAtB,GAAmCF,YAApD;AACA,UAAM+E,QAAQ,GAAI3E,eAAe,GAAG,CAAnB,GAAwBzB,OAAO,CAACuB,QAAD,CAAhD;AAEA,UAAM8E,OAAO,GAAID,QAAQ,GAAGD,QAAZ,GAAwB,GAAxC;AAEAV,IAAAA,WAAW,GAAGO,YAAY,CAACM,MAAb,CAAoBD,OAAO,GAAG,CAA9B,IAAmC,GAAjD;AACAX,IAAAA,UAAU,GAAGM,YAAY,CAACM,MAAb,CAAoBD,OAAO,GAAG,CAA9B,IAAmC,GAAhD;AACAV,IAAAA,WAAW,GAAGK,YAAY,CAACM,MAAb,CAAoBD,OAAO,GAAG,CAAV,GAAc,CAAlC,IAAuC,GAArD;AACAT,IAAAA,YAAY,GAAGI,YAAY,CAACM,MAAb,CAAoBD,OAAO,GAAG,CAAV,GAAc,EAAlC,IAAwC,GAAvD;AACD;;AAED,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAE;AACJE,MAAAA,MAAM,EAAEd,WADJ;AAEJe,MAAAA,KAAK,EAAEd,UAFH;AAGJe,MAAAA,MAAM,EAAEd,WAHJ;AAIJe,MAAAA,OAAO,EAAEd;AAJL,KADR;AAOE,IAAA,gBAAgB,eACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,2CAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,0EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,yFASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,8DAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,wEAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,yGAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBF,6EARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAgCE,oBAAC,UAAD;AACE,IAAA,IAAI,eAAE;AAAG,MAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADR;AAEE,IAAA,IAAI,EAAC,YAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCF,eAqCE,oBAAC,cAAD;AACE,IAAA,iBAAiB,EAAEzD,cADrB;AAEE,IAAA,oBAAoB,EAAEU,iBAFxB;AAGE,IAAA,yBAAyB,EAAEE,mBAH7B;AAIE,IAAA,0BAA0B,EAAEE,oBAJ9B;AAKE,IAAA,eAAe,EAAEpB,eALnB;AAME,IAAA,iBAAiB,EAAEsB,UANrB;AAOE,IAAA,QAAQ,EAAEE,kBAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArCF,eAwDE,oBAAC,eAAD;AACE,IAAA,MAAM,EAAC,QADT;AAEE,IAAA,OAAO,EAAElB,cAFX;AAGE,IAAA,SAAS,EAAEE,gBAHb;AAIE,IAAA,aAAa,EAAEM,iBAJjB;AAKE,IAAA,MAAM,EAAEQ,UALV;AAME,IAAA,QAAQ,EAAE,CAACxB,WANb;AAOE,IAAA,aAAa,EAAE,MAAM;AACnBxB,MAAAA,OAAO,CAAClB,GAAG,CAAC+F,IAAL,EAAWrD,WAAX,CAAP;AACD,KATH;AAUE,IAAA,aAAa,EAAE,CAACgF,aAAD,EAAgBC,QAAhB,KAA6B;AAC1CvG,MAAAA,WAAW,CACTsB,WADS,EAET5B,YAAY,CAAC4G,aAAD,EAAgB1H,GAAG,CAACgG,QAApB,CAFH,EAGT2B,QAHS,CAAX;AAKD,KAhBH;AAiBE,IAAA,cAAc,EAAE,CAACC,cAAD,EAAiBD,QAAjB,KAA8B;AAC5CrG,MAAAA,YAAY,CACVoB,WADU,EAEV5B,YAAY,CAAC8G,cAAD,EAAiB5H,GAAG,CAACgG,QAArB,CAFF,EAGV2B,QAHU,CAAZ;AAKD,KAvBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxDF,eA0FE,oBAAC,UAAD;AACE,IAAA,MAAM,EAAC,QADT;AAEE,IAAA,MAAM,EAAEjE,iBAFV;AAGE,IAAA,MAAM,EAAEE,iBAHV;AAIE,IAAA,MAAM,EAAEM,UAJV;AAKE,IAAA,MAAM,EAAEI,MALV;AAME,IAAA,QAAQ,EAAE,CAAC5B,WANb;AAOE,IAAA,UAAU,EAAE,CAACmF,UAAD,EAAaF,QAAb,KAA0B;AACpCxG,MAAAA,QAAQ,CACNuB,WADM,EAEN5B,YAAY,CAAC+G,UAAD,EAAa7H,GAAG,CAACgG,QAAjB,CAFN,EAGN2B,QAHM,CAAR;AAKD,KAbH;AAcE,IAAA,YAAY,EAAE,CAACG,YAAD,EAAeH,QAAf,KAA4B;AACxCtG,MAAAA,UAAU,CACRqB,WADQ,EAER5B,YAAY,CAACgH,YAAD,EAAe9H,GAAG,CAACgG,QAAnB,CAFJ,EAGR2B,QAHQ,CAAV;AAKD,KApBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1FF,eAuHE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAC,KADT;AAEE,IAAA,SAAS,EAAE3D,oBAFb;AAGE,IAAA,MAAM,EAAEE,UAHV;AAIE,IAAA,QAAQ,EAAE,CAACxB,WAJb;AAKE,IAAA,WAAW,EAAE,CAACqF,WAAD,EAAcJ,QAAd,KAA2B;AACtCpG,MAAAA,SAAS,CACPmB,WADO,EAEP5B,YAAY,CAACiH,WAAD,EAAchI,GAAG,CAACiG,QAAlB,CAFL,EAGP2B,QAHO,CAAT;AAKD,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvHF,eAqIE,oBAAC,OAAD;AACE,IAAA,WAAW,EAAEjF,WADf;AAEE,IAAA,IAAI,EAAEV,IAFR;AAGE,IAAA,QAAQ,EAAE8B,mBAHZ;AAIE,IAAA,MAAM,EAAEI,UAJV;AAKE,IAAA,cAAc,EAAEpB,cALlB;AAME,IAAA,cAAc,EAAEE,cANlB;AAOE,IAAA,cAAc,EAAEM,cAPlB;AAQE,IAAA,gBAAgB,EAAEE,gBARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArIF,CADF;AAkJD;;AAED,eAAezB,IAAf","sourcesContent":["import BigNumber from 'bignumber.js';\nimport React, { useEffect, useState } from 'react';\nimport { Layout } from '@aragon/ui';\nimport { useParams } from 'react-router-dom';\nimport { DollarPool4 } from '../../constants/contracts';\nimport { DAI, QSD, UNI } from '../../constants/tokens';\nimport { POOL_EXIT_LOCKUP_EPOCHS } from '../../constants/values';\nimport {\n  getExpansionAmount,\n  getInstantaneousQSDPrice,\n  getLPBondedLiquidity,\n  getPoolBalanceOfBonded,\n  getPoolBalanceOfClaimable,\n  getPoolBalanceOfRewarded,\n  getPoolBalanceOfStaged,\n  getPoolFluidUntil,\n  getPoolStatusOf,\n  getPoolTotalBonded,\n  getTokenAllowance,\n  getTokenBalance,\n} from '../../utils/infura';\nimport { toBaseUnitBN, toFloat, toTokenUnitsBN } from '../../utils/number';\nimport { getPoolLPAddress } from '../../utils/pool';\nimport {\n  approve,\n  bondPool,\n  depositPool,\n  unbondPool,\n  withdrawPool,\n  claimPool,\n} from '../../utils/web3';\nimport {\n  BondUnbond,\n  IconHeader,\n  WithdrawDeposit,\n  Claim,\n  Guide,\n} from '../common';\n// import Claim from './Claim';\n// import WithdrawDeposit from \"./WithdrawDeposit\";\n// import BondUnbond from './BondUnbond';\nimport PoolPageHeader from './Header';\nimport Provide from './Provide';\n\nfunction Pool({ user }: { user: string }) {\n  const { override } = useParams();\n  if (override) {\n    user = override;\n  }\n\n  const [qsdLiquidity, setQSDLiquidity] = useState<number | null>(null);\n  const [daiLiquidity, setDAILiquidity] = useState<number | null>(null);\n  const [qsdPrice, setQSDPrice] = useState<BigNumber | null>(null);\n  const [expansionAmount, setExpansionAmount] = useState<number | null>(null);\n\n  const [poolAddress, setPoolAddress] = useState('');\n  const [poolTotalBonded, setPoolTotalBonded] = useState(new BigNumber(0));\n  const [pairBalanceQSD, setPairBalanceQSD] = useState(new BigNumber(0));\n  const [pairBalanceDAI, setPairBalanceDAI] = useState(new BigNumber(0));\n  const [userUNIBalance, setUserUNIBalance] = useState(new BigNumber(0));\n  const [userUNIAllowance, setUserUNIAllowance] = useState(new BigNumber(0));\n  const [userDAIBalance, setUserDAIBalance] = useState(new BigNumber(0));\n  const [userDAIAllowance, setUserDAIAllowance] = useState(new BigNumber(0));\n  const [userStagedBalance, setUserStagedBalance] = useState(new BigNumber(0));\n  const [userBondedBalance, setUserBondedBalance] = useState(new BigNumber(0));\n  const [userRewardedBalance, setUserRewardedBalance] = useState(\n    new BigNumber(0)\n  );\n  const [userClaimableBalance, setUserClaimableBalance] = useState(\n    new BigNumber(0)\n  );\n  const [userStatus, setUserStatus] = useState(0);\n  const [userStatusUnlocked, setUserStatusUnlocked] = useState(0);\n  const [lockup, setLockup] = useState(0);\n\n  //APR\n  useEffect(() => {\n    const updateAPR = async () => {\n      const [spot, expansionAmount, liquidity] = await Promise.all([\n        getInstantaneousQSDPrice(),\n        getExpansionAmount(),\n        getLPBondedLiquidity(),\n      ]);\n\n      setQSDPrice(toTokenUnitsBN(spot, 18));\n      setQSDLiquidity(liquidity.qsd);\n      setDAILiquidity(liquidity.dai);\n      setExpansionAmount(expansionAmount);\n    };\n\n    updateAPR();\n  }, []);\n\n  //Update User balances\n  useEffect(() => {\n    if (user === '') {\n      setPoolAddress('');\n      setPoolTotalBonded(new BigNumber(0));\n      setPairBalanceQSD(new BigNumber(0));\n      setPairBalanceDAI(new BigNumber(0));\n      setUserUNIBalance(new BigNumber(0));\n      setUserUNIAllowance(new BigNumber(0));\n      setUserDAIBalance(new BigNumber(0));\n      setUserDAIAllowance(new BigNumber(0));\n      setUserStagedBalance(new BigNumber(0));\n      setUserBondedBalance(new BigNumber(0));\n      setUserRewardedBalance(new BigNumber(0));\n      setUserClaimableBalance(new BigNumber(0));\n      setUserStatus(0);\n      setUserStatusUnlocked(0);\n      return;\n    }\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const poolAddressStr = await getPoolLPAddress();\n\n      const [\n        poolTotalBondedStr,\n        pairBalanceQSDStr,\n        pairBalanceDAIStr,\n        balance,\n        daiBalance,\n        allowance,\n        usdcAllowance,\n        stagedBalance,\n        bondedBalance,\n        rewardedBalance,\n        claimableBalance,\n        status,\n        fluidUntilStr,\n      ] = await Promise.all([\n        getPoolTotalBonded(poolAddressStr),\n        getTokenBalance(QSD.addr, UNI.addr),\n        getTokenBalance(DAI.addr, UNI.addr),\n        getTokenBalance(UNI.addr, user),\n        getTokenBalance(DAI.addr, user),\n\n        getTokenAllowance(UNI.addr, user, poolAddressStr),\n        getTokenAllowance(DAI.addr, user, poolAddressStr),\n        getPoolBalanceOfStaged(poolAddressStr, user),\n        getPoolBalanceOfBonded(poolAddressStr, user),\n\n        getPoolBalanceOfRewarded(poolAddressStr, user),\n        getPoolBalanceOfClaimable(poolAddressStr, user),\n        getPoolStatusOf(poolAddressStr, user),\n        getPoolFluidUntil(poolAddressStr, user),\n      ]);\n\n      const poolTotalBonded = toTokenUnitsBN(poolTotalBondedStr, QSD.decimals);\n      const pairQSDBalance = toTokenUnitsBN(pairBalanceQSDStr, QSD.decimals);\n      const pairDAIBalance = toTokenUnitsBN(pairBalanceDAIStr, DAI.decimals);\n      const userUNIBalance = toTokenUnitsBN(balance, UNI.decimals);\n      const userDAIBalance = toTokenUnitsBN(daiBalance, DAI.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, UNI.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, UNI.decimals);\n      const userRewardedBalance = toTokenUnitsBN(rewardedBalance, QSD.decimals);\n      const userClaimableBalance = toTokenUnitsBN(\n        claimableBalance,\n        QSD.decimals\n      );\n      const userStatus = parseInt(status, 10);\n      const fluidUntil = parseInt(fluidUntilStr, 10);\n\n      if (!isCancelled) {\n        setPoolAddress(poolAddressStr);\n        setPoolTotalBonded(new BigNumber(poolTotalBonded));\n        setPairBalanceQSD(new BigNumber(pairQSDBalance));\n        setPairBalanceDAI(new BigNumber(pairDAIBalance));\n        setUserUNIBalance(new BigNumber(userUNIBalance));\n        setUserUNIAllowance(new BigNumber(allowance));\n        setUserDAIAllowance(new BigNumber(usdcAllowance));\n        setUserDAIBalance(new BigNumber(userDAIBalance));\n        setUserStagedBalance(new BigNumber(userStagedBalance));\n        setUserBondedBalance(new BigNumber(userBondedBalance));\n        setUserRewardedBalance(new BigNumber(userRewardedBalance));\n        setUserClaimableBalance(new BigNumber(userClaimableBalance));\n        setUserStatus(userStatus);\n        setUserStatusUnlocked(fluidUntil);\n        setLockup(poolAddressStr === DollarPool4 ? POOL_EXIT_LOCKUP_EPOCHS : 1);\n      }\n    }\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n\n  let lpHourlyAPR = '...';\n  let lpDailyAPR = '...';\n  let lpWeeklyAPR = '...';\n  let lpMonthlyAPR = '...';\n\n  // Define number formatting\n  var options = { minimumFractionDigits: 0,\n                maximumFractionDigits: 2 };\n  var numberFormat = new Intl.NumberFormat('en-US', options);\n\n  if (qsdPrice && qsdLiquidity && daiLiquidity && expansionAmount) {\n    const totalDAI = qsdLiquidity * toFloat(qsdPrice) + daiLiquidity;\n    const daiToAdd = (expansionAmount / 2) * toFloat(qsdPrice);\n\n    const lpYield = (daiToAdd / totalDAI) * 100;\n\n    lpHourlyAPR = numberFormat.format(lpYield / 4) + '%';\n    lpDailyAPR = numberFormat.format(lpYield * 6) + '%';\n    lpWeeklyAPR = numberFormat.format(lpYield * 6 * 7) + '%';\n    lpMonthlyAPR = numberFormat.format(lpYield * 6 * 30) + '%';\n  }\n\n  return (\n    <Layout>\n      <Guide\n        aprs={{\n          hourly: lpHourlyAPR,\n          daily: lpDailyAPR,\n          weekly: lpWeeklyAPR,\n          monthly: lpMonthlyAPR\n        }}\n        bodyInstructions={\n          <p>\n            Step 1: Stage your UNI-V2\n            <br />\n            Step 2: Bond your UNI-V2\n            <br />\n            Step 3: Unbond your UNI-V2 to move rewards to claimable\n            <br />\n            &nbsp;&nbsp; (Remember to re-bond your UNI-V2 to continue getting\n            rewards)\n            <br />\n            Step 4: Wait 1 epoch to claim claimable QSD\n            <br />\n            Step 5: Provide your rewards to compound your returns\n            <br />\n            &nbsp;&nbsp; 5.1: Dual Supply - Match your rewards with DAI from\n            your wallet and add to LP\n            <br />\n            &nbsp;&nbsp; 5.2: Single Sided Supply - Add your rewards directly to\n            your LP\n          </p>\n        }\n      />\n\n      <IconHeader\n        icon={<i className='fas fa-parachute-box' />}\n        text='LP Rewards'\n      />\n\n      <PoolPageHeader\n        accountUNIBalance={userUNIBalance}\n        accountBondedBalance={userBondedBalance}\n        accountRewardedQSDBalance={userRewardedBalance}\n        accountClaimableQSDBalance={userClaimableBalance}\n        poolTotalBonded={poolTotalBonded}\n        accountPoolStatus={userStatus}\n        unlocked={userStatusUnlocked}\n      />\n\n      {/* <WithdrawDeposit\n        poolAddress={poolAddress}\n        user={user}\n        balance={userUNIBalance}\n        allowance={userUNIAllowance}\n        stagedBalance={userStagedBalance}\n        status={userStatus}\n      /> */}\n\n      <WithdrawDeposit\n        suffix='UNI-V2'\n        balance={userUNIBalance}\n        allowance={userUNIAllowance}\n        stagedBalance={userStagedBalance}\n        status={userStatus}\n        disabled={!poolAddress}\n        handleApprove={() => {\n          approve(UNI.addr, poolAddress);\n        }}\n        handleDeposit={(depositAmount, callback) => {\n          depositPool(\n            poolAddress,\n            toBaseUnitBN(depositAmount, UNI.decimals),\n            callback\n          );\n        }}\n        handleWithdraw={(withdrawAmount, callback) => {\n          withdrawPool(\n            poolAddress,\n            toBaseUnitBN(withdrawAmount, UNI.decimals),\n            callback\n          );\n        }}\n      />\n\n      {/* <BondUnbond\n        poolAddress={poolAddress}\n        staged={userStagedBalance}\n        bonded={userBondedBalance}\n        status={userStatus}\n        lockup={lockup}\n      /> */}\n\n      <BondUnbond\n        suffix='UNI-V2'\n        staged={userStagedBalance}\n        bonded={userBondedBalance}\n        status={userStatus}\n        lockup={lockup}\n        disabled={!poolAddress}\n        handleBond={(bondAmount, callback) => {\n          bondPool(\n            poolAddress,\n            toBaseUnitBN(bondAmount, UNI.decimals),\n            callback\n          );\n        }}\n        handleUnbond={(unbondAmount, callback) => {\n          unbondPool(\n            poolAddress,\n            toBaseUnitBN(unbondAmount, UNI.decimals),\n            callback\n          );\n        }}\n      />\n\n      {/* <Claim\n        poolAddress={poolAddress}\n        claimable={userClaimableBalance}\n        status={userStatus}\n      /> */}\n\n      <Claim\n        suffix='QSD'\n        claimable={userClaimableBalance}\n        status={userStatus}\n        disabled={!poolAddress}\n        handleClaim={(claimAmount, callback) => {\n          claimPool(\n            poolAddress,\n            toBaseUnitBN(claimAmount, QSD.decimals),\n            callback\n          );\n        }}\n      />\n\n      <Provide\n        poolAddress={poolAddress}\n        user={user}\n        rewarded={userRewardedBalance}\n        status={userStatus}\n        pairBalanceQSD={pairBalanceQSD}\n        pairBalanceDAI={pairBalanceDAI}\n        userDAIBalance={userDAIBalance}\n        userDAIAllowance={userDAIAllowance}\n      />\n    </Layout>\n  );\n}\n\nexport default Pool;\n"]},"metadata":{},"sourceType":"module"}