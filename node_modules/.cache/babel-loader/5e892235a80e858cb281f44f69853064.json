{"ast":null,"code":"var _jsxFileName = \"/Users/J/crypto/dashboard/src/components/Bonding/index.tsx\";\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Layout } from '@aragon/ui';\nimport BigNumber from 'bignumber.js';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { QSD, QSDS, QSG } from '../../constants/tokens';\nimport { POOL_EXIT_LOCKUP_EPOCHS } from '../../constants/values';\nimport { getBalanceBonded, getBalanceOfStaged, getEpoch, getExpansionAmount, getInstantaneousQSDPrice, getPoolBalanceOfClaimable1, getPoolBalanceOfClaimable2, getPoolBalanceOfRewarded1, getPoolBalanceOfRewarded2, getPoolFluidUntil, getPoolStatusOf, getPoolTotalBonded, getTokenAllowance, getTokenBalance } from '../../utils/infura';\nimport { toBaseUnitBN, toFloat, toTokenUnitsBN } from '../../utils/number';\nimport { getPoolBondingAddress } from '../../utils/pool';\nimport { approve, bondPool, depositPool, unbondPool, withdrawPool } from '../../utils/web3';\nimport { BondUnbond, Guide, IconHeader, WithdrawDeposit } from '../common';\nimport { Claim } from './Claim';\nimport AccountPageHeader from './Header';\nimport { Rewards } from './Rewards';\n\nfunction Bonding({\n  user\n}) {\n  const {\n    override\n  } = useParams();\n\n  if (override) {\n    user = override;\n  }\n\n  const [epoch, setEpoch] = useState(0);\n  const [totalBonded, setTotalBonded] = useState(new BigNumber(0));\n  const [poolBondingAddress, setPoolBondingAddress] = useState(null);\n  const [userQSDBalance, setUserQSDBalance] = useState(new BigNumber(0));\n  const [userQSDAllowance, setUserQSDAllowance] = useState(new BigNumber(0));\n  const [userQSDSBalance, setUserQSDSBalance] = useState(new BigNumber(0));\n  const [totalQSDSSupply, setTotalQSDSSupply] = useState(new BigNumber(0));\n  const [userStagedBalance, setUserStagedBalance] = useState(new BigNumber(0));\n  const [userBondedBalance, setUserBondedBalance] = useState(new BigNumber(0));\n  const [userStatus, setUserStatus] = useState(0);\n  const [userStatusUnlocked, setUserStatusUnlocked] = useState(0);\n  const [lockup, setLockup] = useState(0);\n  const [userRewardedQSD, setUserRewardedQSD] = useState(new BigNumber(0));\n  const [userRewardedQSG, setUserRewardedQSG] = useState(new BigNumber(0));\n  const [userClaimableQSD, setUserClaimableQSD] = useState(new BigNumber(0));\n  const [userClaimableQSG, setUserClaimableQSG] = useState(new BigNumber(0));\n  const [qsdPrice, setQSDPrice] = useState(null);\n  const [expansionAmount, setExpansionAmount] = useState(null); //APR and stuff\n\n  useEffect(() => {\n    const updateAPR = async () => {\n      const poolBonding = await getPoolBondingAddress();\n      const [epoch, qsdPrice, expansionAmount, totalBonded] = await Promise.all([getEpoch(QSDS.addr), getInstantaneousQSDPrice(), getExpansionAmount(), getPoolTotalBonded(poolBonding)]);\n      setEpoch(parseInt(epoch, 10));\n      setQSDPrice(qsdPrice);\n      setExpansionAmount(expansionAmount);\n      setTotalQSDSSupply(new BigNumber(totalQSDSSupply));\n      setTotalBonded(toTokenUnitsBN(totalBonded, QSD.decimals));\n    };\n\n    updateAPR();\n  }, []); //Update User balances\n\n  useEffect(() => {\n    if (user === '') {\n      setUserQSDBalance(new BigNumber(0));\n      setUserQSDAllowance(new BigNumber(0));\n      setUserQSDSBalance(new BigNumber(0));\n      setTotalQSDSSupply(new BigNumber(0));\n      setUserStagedBalance(new BigNumber(0));\n      setUserBondedBalance(new BigNumber(0));\n      setUserStatus(0);\n      return;\n    }\n\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const poolAddress = await getPoolBondingAddress();\n      const [poolTotalBondedStr, qsdBalance, qsdAllowance, stagedBalance, bondedBalance, status, fluidUntilStr, qsdRewardedStr, qsgRewardedStr, qsdClaimableStr, qsgClaimableStr] = await Promise.all([getPoolTotalBonded(poolAddress), getTokenBalance(QSD.addr, user), getTokenAllowance(QSD.addr, user, poolAddress), getBalanceOfStaged(poolAddress, user), getBalanceBonded(poolAddress, user), getPoolStatusOf(poolAddress, user), getPoolFluidUntil(poolAddress, user), getPoolBalanceOfRewarded1(poolAddress, user), getPoolBalanceOfRewarded2(poolAddress, user), getPoolBalanceOfClaimable1(poolAddress, user), getPoolBalanceOfClaimable2(poolAddress, user)]);\n      const qsdRewarded = toTokenUnitsBN(qsdRewardedStr, QSD.decimals);\n      const qsgRewarded = toTokenUnitsBN(qsgRewardedStr, QSG.decimals);\n      const qsdClaimable = toTokenUnitsBN(qsdClaimableStr, QSD.decimals);\n      const qsgClaimable = toTokenUnitsBN(qsgClaimableStr, QSG.decimals);\n      const poolTotalBonded = toTokenUnitsBN(poolTotalBondedStr, QSD.decimals);\n      const userQSDBalance = toTokenUnitsBN(qsdBalance, QSD.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, QSDS.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, QSDS.decimals);\n      const userStatus = parseInt(status, 10);\n      const fluidUntil = parseInt(fluidUntilStr, 10);\n\n      if (!isCancelled) {\n        setTotalBonded(poolTotalBonded);\n        setPoolBondingAddress(poolAddress);\n        setUserQSDBalance(new BigNumber(userQSDBalance));\n        setUserQSDAllowance(new BigNumber(qsdAllowance));\n        setUserQSDSBalance(new BigNumber(userQSDSBalance));\n        setTotalQSDSSupply(new BigNumber(totalQSDSSupply));\n        setUserStagedBalance(new BigNumber(userStagedBalance));\n        setUserBondedBalance(new BigNumber(userBondedBalance));\n        setUserRewardedQSD(new BigNumber(qsdRewarded));\n        setUserRewardedQSG(new BigNumber(qsgRewarded));\n        setUserClaimableQSD(new BigNumber(qsdClaimable));\n        setUserClaimableQSG(new BigNumber(qsgClaimable));\n        setUserStatus(userStatus);\n        setUserStatusUnlocked(fluidUntil);\n        setLockup(POOL_EXIT_LOCKUP_EPOCHS);\n      }\n    }\n\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000); // eslint-disable-next-line consistent-return\n\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n  let bondingWeeklyYield = '...';\n  let bondingHourlyYield = '...';\n  let bondingDailyYield = '...'; // Define number formatting\n\n  var options = {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2\n  };\n  var numberFormat = new Intl.NumberFormat('en-US', options); // Calculate DAO APR (4 hrs)\n\n  if (qsdPrice && totalBonded && expansionAmount) {\n    if (epoch > 72) {\n      const totalQSD = toFloat(totalBonded);\n      const qsdToAdd = expansionAmount / 2;\n      const daoYield = qsdToAdd / totalQSD * 100;\n      bondingHourlyYield = numberFormat.format(daoYield / 4) + '%';\n      bondingDailyYield = numberFormat.format(daoYield * 6) + '%';\n      bondingWeeklyYield = numberFormat.format(daoYield * 6 * 7) + '%';\n    } else {\n      bondingHourlyYield = '0%';\n      bondingDailyYield = '0%';\n      bondingWeeklyYield = '0%';\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Guide // bodyApr={\n  //   <>\n  //     <div>Hourly: {bondingHourlyYield}</div>\n  //     <div>Daily: {bondingDailyYield}</div>\n  //     <div>Weekly: {bondingWeeklyYield}</div>\n  //   </>\n  // }\n  , {\n    aprs: {\n      hourly: bondingHourlyYield,\n      daily: bondingDailyYield,\n      weekly: bondingWeeklyYield\n    },\n    bodyInstructions: /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }\n    }, \"Note: Rewards in this section are applicable from epoch 73 onwards.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }\n    }), \"Step 1: Stage your QSD\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }\n    }), \"Step 2: Bond your QSD *Note that you can only bond QSD when TWAP is <1*\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }\n    }), \"\\xA0\\xA0 2.1: If TWAP is <1, you'll be rewarded QSG\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }), \"\\xA0\\xA0 2.2: If TWAP is >=1, you'll be rewarded QSD\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }), \"Step 3: Poke your rewards to move them to claimable\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }\n    }), \"Step 4: Wait 1 epoch to claim claimable QSD and/or QSG\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(IconHeader, {\n    icon: /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-atom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 25\n      }\n    }),\n    text: \"QSD Rewards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AccountPageHeader, {\n    accountQSDBalance: userQSDBalance,\n    accountQSDSBalance: userQSDSBalance,\n    totalBonded: totalBonded,\n    accountStagedBalance: userStagedBalance,\n    accountBondedBalance: userBondedBalance,\n    accountStatus: userStatus,\n    unlocked: userStatusUnlocked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(WithdrawDeposit, {\n    suffix: \"QSD\",\n    balance: userQSDBalance,\n    allowance: userQSDAllowance,\n    stagedBalance: userStagedBalance,\n    status: userStatus,\n    disabled: !user,\n    handleApprove: () => {\n      approve(QSD.addr, poolBondingAddress);\n    },\n    handleDeposit: depositAmount => {\n      depositPool(poolBondingAddress, toBaseUnitBN(depositAmount, QSD.decimals), () => {});\n    },\n    handleWithdraw: withdrawAmount => {\n      withdrawPool(poolBondingAddress, toBaseUnitBN(withdrawAmount, QSD.decimals), () => {});\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BondUnbond, {\n    extraTip: 'Can only bond when QSD < 1 DAI.',\n    suffix: \"QSD\",\n    staged: userStagedBalance,\n    bonded: userBondedBalance,\n    status: userStatus,\n    lockup: lockup,\n    disabled: !user,\n    handleBond: bondAmount => {\n      bondPool(poolBondingAddress, toBaseUnitBN(bondAmount, QSD.decimals), () => {});\n    },\n    handleUnbond: unbondAmount => {\n      unbondPool(poolBondingAddress, toBaseUnitBN(unbondAmount, QSD.decimals), () => {});\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Claim, {\n    userStatus: userStatus,\n    poolAddress: poolBondingAddress,\n    amountQSD: userClaimableQSD,\n    amountQSG: userClaimableQSG,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Rewards, {\n    poolAddress: poolBondingAddress,\n    amountQSD: userRewardedQSD,\n    amountQSG: userRewardedQSG,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Bonding;","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/components/Bonding/index.tsx"],"names":["Layout","BigNumber","React","useEffect","useState","useParams","QSD","QSDS","QSG","POOL_EXIT_LOCKUP_EPOCHS","getBalanceBonded","getBalanceOfStaged","getEpoch","getExpansionAmount","getInstantaneousQSDPrice","getPoolBalanceOfClaimable1","getPoolBalanceOfClaimable2","getPoolBalanceOfRewarded1","getPoolBalanceOfRewarded2","getPoolFluidUntil","getPoolStatusOf","getPoolTotalBonded","getTokenAllowance","getTokenBalance","toBaseUnitBN","toFloat","toTokenUnitsBN","getPoolBondingAddress","approve","bondPool","depositPool","unbondPool","withdrawPool","BondUnbond","Guide","IconHeader","WithdrawDeposit","Claim","AccountPageHeader","Rewards","Bonding","user","override","epoch","setEpoch","totalBonded","setTotalBonded","poolBondingAddress","setPoolBondingAddress","userQSDBalance","setUserQSDBalance","userQSDAllowance","setUserQSDAllowance","userQSDSBalance","setUserQSDSBalance","totalQSDSSupply","setTotalQSDSSupply","userStagedBalance","setUserStagedBalance","userBondedBalance","setUserBondedBalance","userStatus","setUserStatus","userStatusUnlocked","setUserStatusUnlocked","lockup","setLockup","userRewardedQSD","setUserRewardedQSD","userRewardedQSG","setUserRewardedQSG","userClaimableQSD","setUserClaimableQSD","userClaimableQSG","setUserClaimableQSG","qsdPrice","setQSDPrice","expansionAmount","setExpansionAmount","updateAPR","poolBonding","Promise","all","addr","parseInt","decimals","isCancelled","updateUserInfo","poolAddress","poolTotalBondedStr","qsdBalance","qsdAllowance","stagedBalance","bondedBalance","status","fluidUntilStr","qsdRewardedStr","qsgRewardedStr","qsdClaimableStr","qsgClaimableStr","qsdRewarded","qsgRewarded","qsdClaimable","qsgClaimable","poolTotalBonded","fluidUntil","id","setInterval","clearInterval","bondingWeeklyYield","bondingHourlyYield","bondingDailyYield","options","minimumFractionDigits","maximumFractionDigits","numberFormat","Intl","NumberFormat","totalQSD","qsdToAdd","daoYield","format","hourly","daily","weekly","depositAmount","withdrawAmount","bondAmount","unbondAmount"],"mappings":";;AAAA;AAEA,SAASA,MAAT,QAAuB,YAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,QAA+B,wBAA/B;AACA,SAASC,uBAAT,QAAwC,wBAAxC;AACA,SACEC,gBADF,EAEEC,kBAFF,EAGEC,QAHF,EAIEC,kBAJF,EAKEC,wBALF,EAMEC,0BANF,EAOEC,0BAPF,EAQEC,yBARF,EASEC,yBATF,EAUEC,iBAVF,EAWEC,eAXF,EAYEC,kBAZF,EAaEC,iBAbF,EAcEC,eAdF,QAeO,oBAfP;AAgBA,SAASC,YAAT,EAAuBC,OAAvB,EAAgCC,cAAhC,QAAsD,oBAAtD;AACA,SAASC,qBAAT,QAAsC,kBAAtC;AACA,SACEC,OADF,EAEEC,QAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,YALF,QAMO,kBANP;AAOA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,UAA5B,EAAwCC,eAAxC,QAA+D,WAA/D;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,OAAOC,iBAAP,MAA8B,UAA9B;AACA,SAASC,OAAT,QAAwB,WAAxB;;AAEA,SAASC,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA6C;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAerC,SAAS,EAA9B;;AACA,MAAIqC,QAAJ,EAAc;AACZD,IAAAA,IAAI,GAAGC,QAAP;AACD;;AAED,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBxC,QAAQ,CAAS,CAAT,CAAlC;AACA,QAAM,CAACyC,WAAD,EAAcC,cAAd,IAAgC1C,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAA9C;AACA,QAAM,CAAC8C,kBAAD,EAAqBC,qBAArB,IAA8C5C,QAAQ,CAC1D,IAD0D,CAA5D;AAGA,QAAM,CAAC6C,cAAD,EAAiBC,iBAAjB,IAAsC9C,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAApD;AACA,QAAM,CAACkD,gBAAD,EAAmBC,mBAAnB,IAA0ChD,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAAxD;AACA,QAAM,CAACoD,eAAD,EAAkBC,kBAAlB,IAAwClD,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAAtD;AACA,QAAM,CAACsD,eAAD,EAAkBC,kBAAlB,IAAwCpD,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAAtD;AACA,QAAM,CAACwD,iBAAD,EAAoBC,oBAApB,IAA4CtD,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAA1D;AACA,QAAM,CAAC0D,iBAAD,EAAoBC,oBAApB,IAA4CxD,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAA1D;AACA,QAAM,CAAC4D,UAAD,EAAaC,aAAb,IAA8B1D,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAAC2D,kBAAD,EAAqBC,qBAArB,IAA8C5D,QAAQ,CAAC,CAAD,CAA5D;AACA,QAAM,CAAC6D,MAAD,EAASC,SAAT,IAAsB9D,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAAC+D,eAAD,EAAkBC,kBAAlB,IAAwChE,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAAtD;AACA,QAAM,CAACoE,eAAD,EAAkBC,kBAAlB,IAAwClE,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAAtD;AACA,QAAM,CAACsE,gBAAD,EAAmBC,mBAAnB,IAA0CpE,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAAxD;AACA,QAAM,CAACwE,gBAAD,EAAmBC,mBAAnB,IAA0CtE,QAAQ,CAAC,IAAIH,SAAJ,CAAc,CAAd,CAAD,CAAxD;AAEA,QAAM,CAAC0E,QAAD,EAAWC,WAAX,IAA0BxE,QAAQ,CAAmB,IAAnB,CAAxC;AACA,QAAM,CAACyE,eAAD,EAAkBC,kBAAlB,IAAwC1E,QAAQ,CAAgB,IAAhB,CAAtD,CA1B2C,CA4B3C;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM4E,SAAS,GAAG,YAAY;AAC5B,YAAMC,WAAW,GAAG,MAAMrD,qBAAqB,EAA/C;AAEA,YAAM,CACJgB,KADI,EAEJgC,QAFI,EAGJE,eAHI,EAIJhC,WAJI,IAKF,MAAMoC,OAAO,CAACC,GAAR,CAAY,CACpBtE,QAAQ,CAACL,IAAI,CAAC4E,IAAN,CADY,EAEpBrE,wBAAwB,EAFJ,EAGpBD,kBAAkB,EAHE,EAIpBQ,kBAAkB,CAAC2D,WAAD,CAJE,CAAZ,CALV;AAYApC,MAAAA,QAAQ,CAACwC,QAAQ,CAACzC,KAAD,EAAQ,EAAR,CAAT,CAAR;AACAiC,MAAAA,WAAW,CAACD,QAAD,CAAX;AACAG,MAAAA,kBAAkB,CAACD,eAAD,CAAlB;AACArB,MAAAA,kBAAkB,CAAC,IAAIvD,SAAJ,CAAcsD,eAAd,CAAD,CAAlB;AACAT,MAAAA,cAAc,CAACpB,cAAc,CAACmB,WAAD,EAAcvC,GAAG,CAAC+E,QAAlB,CAAf,CAAd;AACD,KApBD;;AAsBAN,IAAAA,SAAS;AACV,GAxBQ,EAwBN,EAxBM,CAAT,CA7B2C,CAuD3C;;AACA5E,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsC,IAAI,KAAK,EAAb,EAAiB;AACfS,MAAAA,iBAAiB,CAAC,IAAIjD,SAAJ,CAAc,CAAd,CAAD,CAAjB;AACAmD,MAAAA,mBAAmB,CAAC,IAAInD,SAAJ,CAAc,CAAd,CAAD,CAAnB;AACAqD,MAAAA,kBAAkB,CAAC,IAAIrD,SAAJ,CAAc,CAAd,CAAD,CAAlB;AACAuD,MAAAA,kBAAkB,CAAC,IAAIvD,SAAJ,CAAc,CAAd,CAAD,CAAlB;AACAyD,MAAAA,oBAAoB,CAAC,IAAIzD,SAAJ,CAAc,CAAd,CAAD,CAApB;AACA2D,MAAAA,oBAAoB,CAAC,IAAI3D,SAAJ,CAAc,CAAd,CAAD,CAApB;AACA6D,MAAAA,aAAa,CAAC,CAAD,CAAb;AACA;AACD;;AACD,QAAIwB,WAAW,GAAG,KAAlB;;AAEA,mBAAeC,cAAf,GAAgC;AAC9B,YAAMC,WAAW,GAAG,MAAM7D,qBAAqB,EAA/C;AAEA,YAAM,CACJ8D,kBADI,EAEJC,UAFI,EAGJC,YAHI,EAIJC,aAJI,EAKJC,aALI,EAMJC,MANI,EAOJC,aAPI,EAQJC,cARI,EASJC,cATI,EAUJC,eAVI,EAWJC,eAXI,IAYF,MAAMlB,OAAO,CAACC,GAAR,CAAY,CACpB7D,kBAAkB,CAACmE,WAAD,CADE,EAEpBjE,eAAe,CAACjB,GAAG,CAAC6E,IAAL,EAAW1C,IAAX,CAFK,EAGpBnB,iBAAiB,CAAChB,GAAG,CAAC6E,IAAL,EAAW1C,IAAX,EAAiB+C,WAAjB,CAHG,EAIpB7E,kBAAkB,CAAC6E,WAAD,EAAc/C,IAAd,CAJE,EAKpB/B,gBAAgB,CAAC8E,WAAD,EAAc/C,IAAd,CALI,EAMpBrB,eAAe,CAACoE,WAAD,EAAc/C,IAAd,CANK,EAOpBtB,iBAAiB,CAACqE,WAAD,EAAc/C,IAAd,CAPG,EAQpBxB,yBAAyB,CAACuE,WAAD,EAAc/C,IAAd,CARL,EASpBvB,yBAAyB,CAACsE,WAAD,EAAc/C,IAAd,CATL,EAUpB1B,0BAA0B,CAACyE,WAAD,EAAc/C,IAAd,CAVN,EAWpBzB,0BAA0B,CAACwE,WAAD,EAAc/C,IAAd,CAXN,CAAZ,CAZV;AA0BA,YAAM2D,WAAW,GAAG1E,cAAc,CAACsE,cAAD,EAAiB1F,GAAG,CAAC+E,QAArB,CAAlC;AACA,YAAMgB,WAAW,GAAG3E,cAAc,CAACuE,cAAD,EAAiBzF,GAAG,CAAC6E,QAArB,CAAlC;AACA,YAAMiB,YAAY,GAAG5E,cAAc,CAACwE,eAAD,EAAkB5F,GAAG,CAAC+E,QAAtB,CAAnC;AACA,YAAMkB,YAAY,GAAG7E,cAAc,CAACyE,eAAD,EAAkB3F,GAAG,CAAC6E,QAAtB,CAAnC;AACA,YAAMmB,eAAe,GAAG9E,cAAc,CAAC+D,kBAAD,EAAqBnF,GAAG,CAAC+E,QAAzB,CAAtC;AACA,YAAMpC,cAAc,GAAGvB,cAAc,CAACgE,UAAD,EAAapF,GAAG,CAAC+E,QAAjB,CAArC;AACA,YAAM5B,iBAAiB,GAAG/B,cAAc,CAACkE,aAAD,EAAgBrF,IAAI,CAAC8E,QAArB,CAAxC;AACA,YAAM1B,iBAAiB,GAAGjC,cAAc,CAACmE,aAAD,EAAgBtF,IAAI,CAAC8E,QAArB,CAAxC;AACA,YAAMxB,UAAU,GAAGuB,QAAQ,CAACU,MAAD,EAAS,EAAT,CAA3B;AACA,YAAMW,UAAU,GAAGrB,QAAQ,CAACW,aAAD,EAAgB,EAAhB,CAA3B;;AAEA,UAAI,CAACT,WAAL,EAAkB;AAChBxC,QAAAA,cAAc,CAAC0D,eAAD,CAAd;AACAxD,QAAAA,qBAAqB,CAACwC,WAAD,CAArB;AACAtC,QAAAA,iBAAiB,CAAC,IAAIjD,SAAJ,CAAcgD,cAAd,CAAD,CAAjB;AACAG,QAAAA,mBAAmB,CAAC,IAAInD,SAAJ,CAAc0F,YAAd,CAAD,CAAnB;AACArC,QAAAA,kBAAkB,CAAC,IAAIrD,SAAJ,CAAcoD,eAAd,CAAD,CAAlB;AACAG,QAAAA,kBAAkB,CAAC,IAAIvD,SAAJ,CAAcsD,eAAd,CAAD,CAAlB;AACAG,QAAAA,oBAAoB,CAAC,IAAIzD,SAAJ,CAAcwD,iBAAd,CAAD,CAApB;AACAG,QAAAA,oBAAoB,CAAC,IAAI3D,SAAJ,CAAc0D,iBAAd,CAAD,CAApB;AACAS,QAAAA,kBAAkB,CAAC,IAAInE,SAAJ,CAAcmG,WAAd,CAAD,CAAlB;AACA9B,QAAAA,kBAAkB,CAAC,IAAIrE,SAAJ,CAAcoG,WAAd,CAAD,CAAlB;AACA7B,QAAAA,mBAAmB,CAAC,IAAIvE,SAAJ,CAAcqG,YAAd,CAAD,CAAnB;AACA5B,QAAAA,mBAAmB,CAAC,IAAIzE,SAAJ,CAAcsG,YAAd,CAAD,CAAnB;AACAzC,QAAAA,aAAa,CAACD,UAAD,CAAb;AACAG,QAAAA,qBAAqB,CAACyC,UAAD,CAArB;AACAvC,QAAAA,SAAS,CAACzD,uBAAD,CAAT;AACD;AACF;;AACD8E,IAAAA,cAAc;AACd,UAAMmB,EAAE,GAAGC,WAAW,CAACpB,cAAD,EAAiB,KAAjB,CAAtB,CAxEc,CA0Ed;;AACA,WAAO,MAAM;AACXD,MAAAA,WAAW,GAAG,IAAd;AACAsB,MAAAA,aAAa,CAACF,EAAD,CAAb;AACD,KAHD;AAID,GA/EQ,EA+EN,CAACjE,IAAD,CA/EM,CAAT;AAiFA,MAAIoE,kBAAkB,GAAG,KAAzB;AACA,MAAIC,kBAAkB,GAAG,KAAzB;AACA,MAAIC,iBAAiB,GAAG,KAAxB,CA3I2C,CA6I3C;;AACA,MAAIC,OAAO,GAAG;AAAEC,IAAAA,qBAAqB,EAAE,CAAzB;AACAC,IAAAA,qBAAqB,EAAE;AADvB,GAAd;AAEA,MAAIC,YAAY,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+BL,OAA/B,CAAnB,CAhJ2C,CAkJ3C;;AACA,MAAIrC,QAAQ,IAAI9B,WAAZ,IAA2BgC,eAA/B,EAAgD;AAC9C,QAAIlC,KAAK,GAAG,EAAZ,EAAgB;AACd,YAAM2E,QAAQ,GAAG7F,OAAO,CAACoB,WAAD,CAAxB;AACA,YAAM0E,QAAQ,GAAG1C,eAAe,GAAG,CAAnC;AAEA,YAAM2C,QAAQ,GAAID,QAAQ,GAAGD,QAAZ,GAAwB,GAAzC;AAEAR,MAAAA,kBAAkB,GAAGK,YAAY,CAACM,MAAb,CAAoBD,QAAQ,GAAG,CAA/B,IAAoC,GAAzD;AACAT,MAAAA,iBAAiB,GAAGI,YAAY,CAACM,MAAb,CAAoBD,QAAQ,GAAG,CAA/B,IAAoC,GAAxD;AACAX,MAAAA,kBAAkB,GAAGM,YAAY,CAACM,MAAb,CAAoBD,QAAQ,GAAG,CAAX,GAAe,CAAnC,IAAwC,GAA7D;AACD,KATD,MASO;AACLV,MAAAA,kBAAkB,GAAG,IAArB;AACAC,MAAAA,iBAAiB,GAAG,IAApB;AACAF,MAAAA,kBAAkB,GAAG,IAArB;AACD;AACF;;AAED,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD,CACE;AACA;AACA;AACA;AACA;AACA;AACA;AAPF;AAQE,IAAA,IAAI,EAAE;AACJa,MAAAA,MAAM,EAAEZ,kBADJ;AAEJa,MAAAA,KAAK,EAAEZ,iBAFH;AAGJa,MAAAA,MAAM,EAAEf;AAHJ,KARR;AAaE,IAAA,gBAAgB,eACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2FAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,yCAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,0FAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,sEASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,uEAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,sEAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,2DAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAkCE,oBAAC,UAAD;AAAY,IAAA,IAAI,eAAE;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB;AAAiD,IAAA,IAAI,EAAC,aAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCF,eAoCE,oBAAC,iBAAD;AACE,IAAA,iBAAiB,EAAE5D,cADrB;AAEE,IAAA,kBAAkB,EAAEI,eAFtB;AAGE,IAAA,WAAW,EAAER,WAHf;AAIE,IAAA,oBAAoB,EAAEY,iBAJxB;AAKE,IAAA,oBAAoB,EAAEE,iBALxB;AAME,IAAA,aAAa,EAAEE,UANjB;AAOE,IAAA,QAAQ,EAAEE,kBAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApCF,eA8CE,oBAAC,eAAD;AACE,IAAA,MAAM,EAAC,KADT;AAEE,IAAA,OAAO,EAAEd,cAFX;AAGE,IAAA,SAAS,EAAEE,gBAHb;AAIE,IAAA,aAAa,EAAEM,iBAJjB;AAKE,IAAA,MAAM,EAAEI,UALV;AAME,IAAA,QAAQ,EAAE,CAACpB,IANb;AAOE,IAAA,aAAa,EAAE,MAAM;AACnBb,MAAAA,OAAO,CAACtB,GAAG,CAAC6E,IAAL,EAAWpC,kBAAX,CAAP;AACD,KATH;AAUE,IAAA,aAAa,EAAG8E,aAAD,IAAmB;AAChC/F,MAAAA,WAAW,CACTiB,kBADS,EAETvB,YAAY,CAACqG,aAAD,EAAgBvH,GAAG,CAAC+E,QAApB,CAFH,EAGT,MAAM,CAAE,CAHC,CAAX;AAKD,KAhBH;AAiBE,IAAA,cAAc,EAAGyC,cAAD,IAAoB;AAClC9F,MAAAA,YAAY,CACVe,kBADU,EAEVvB,YAAY,CAACsG,cAAD,EAAiBxH,GAAG,CAAC+E,QAArB,CAFF,EAGV,MAAM,CAAE,CAHE,CAAZ;AAKD,KAvBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9CF,eAwEE,oBAAC,UAAD;AACE,IAAA,QAAQ,EAAE,iCADZ;AAEE,IAAA,MAAM,EAAC,KAFT;AAGE,IAAA,MAAM,EAAE5B,iBAHV;AAIE,IAAA,MAAM,EAAEE,iBAJV;AAKE,IAAA,MAAM,EAAEE,UALV;AAME,IAAA,MAAM,EAAEI,MANV;AAOE,IAAA,QAAQ,EAAE,CAACxB,IAPb;AAQE,IAAA,UAAU,EAAGsF,UAAD,IAAgB;AAC1BlG,MAAAA,QAAQ,CACNkB,kBADM,EAENvB,YAAY,CAACuG,UAAD,EAAazH,GAAG,CAAC+E,QAAjB,CAFN,EAGN,MAAM,CAAE,CAHF,CAAR;AAKD,KAdH;AAeE,IAAA,YAAY,EAAG2C,YAAD,IAAkB;AAC9BjG,MAAAA,UAAU,CACRgB,kBADQ,EAERvB,YAAY,CAACwG,YAAD,EAAe1H,GAAG,CAAC+E,QAAnB,CAFJ,EAGR,MAAM,CAAE,CAHA,CAAV;AAKD,KArBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxEF,eAgGE,oBAAC,KAAD;AACE,IAAA,UAAU,EAAExB,UADd;AAEE,IAAA,WAAW,EAAEd,kBAFf;AAGE,IAAA,SAAS,EAAEwB,gBAHb;AAIE,IAAA,SAAS,EAAEE,gBAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhGF,eAuGE,oBAAC,OAAD;AACE,IAAA,WAAW,EAAE1B,kBADf;AAEE,IAAA,SAAS,EAAEoB,eAFb;AAGE,IAAA,SAAS,EAAEE,eAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvGF,CADF;AA+GD;;AAED,eAAe7B,OAAf","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { Layout } from '@aragon/ui';\nimport BigNumber from 'bignumber.js';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { QSD, QSDS, QSG } from '../../constants/tokens';\nimport { POOL_EXIT_LOCKUP_EPOCHS } from '../../constants/values';\nimport {\n  getBalanceBonded,\n  getBalanceOfStaged,\n  getEpoch,\n  getExpansionAmount,\n  getInstantaneousQSDPrice,\n  getPoolBalanceOfClaimable1,\n  getPoolBalanceOfClaimable2,\n  getPoolBalanceOfRewarded1,\n  getPoolBalanceOfRewarded2,\n  getPoolFluidUntil,\n  getPoolStatusOf,\n  getPoolTotalBonded,\n  getTokenAllowance,\n  getTokenBalance,\n} from '../../utils/infura';\nimport { toBaseUnitBN, toFloat, toTokenUnitsBN } from '../../utils/number';\nimport { getPoolBondingAddress } from '../../utils/pool';\nimport {\n  approve,\n  bondPool,\n  depositPool,\n  unbondPool,\n  withdrawPool,\n} from '../../utils/web3';\nimport { BondUnbond, Guide, IconHeader, WithdrawDeposit } from '../common';\nimport { Claim } from './Claim';\nimport AccountPageHeader from './Header';\nimport { Rewards } from './Rewards';\n\nfunction Bonding({ user }: { user: string }) {\n  const { override } = useParams();\n  if (override) {\n    user = override;\n  }\n\n  const [epoch, setEpoch] = useState<number>(0);\n  const [totalBonded, setTotalBonded] = useState(new BigNumber(0));\n  const [poolBondingAddress, setPoolBondingAddress] = useState<null | string>(\n    null\n  );\n  const [userQSDBalance, setUserQSDBalance] = useState(new BigNumber(0));\n  const [userQSDAllowance, setUserQSDAllowance] = useState(new BigNumber(0));\n  const [userQSDSBalance, setUserQSDSBalance] = useState(new BigNumber(0));\n  const [totalQSDSSupply, setTotalQSDSSupply] = useState(new BigNumber(0));\n  const [userStagedBalance, setUserStagedBalance] = useState(new BigNumber(0));\n  const [userBondedBalance, setUserBondedBalance] = useState(new BigNumber(0));\n  const [userStatus, setUserStatus] = useState(0);\n  const [userStatusUnlocked, setUserStatusUnlocked] = useState(0);\n  const [lockup, setLockup] = useState(0);\n  const [userRewardedQSD, setUserRewardedQSD] = useState(new BigNumber(0));\n  const [userRewardedQSG, setUserRewardedQSG] = useState(new BigNumber(0));\n  const [userClaimableQSD, setUserClaimableQSD] = useState(new BigNumber(0));\n  const [userClaimableQSG, setUserClaimableQSG] = useState(new BigNumber(0));\n\n  const [qsdPrice, setQSDPrice] = useState<BigNumber | null>(null);\n  const [expansionAmount, setExpansionAmount] = useState<number | null>(null);\n\n  //APR and stuff\n  useEffect(() => {\n    const updateAPR = async () => {\n      const poolBonding = await getPoolBondingAddress();\n\n      const [\n        epoch,\n        qsdPrice,\n        expansionAmount,\n        totalBonded,\n      ] = await Promise.all([\n        getEpoch(QSDS.addr),\n        getInstantaneousQSDPrice(),\n        getExpansionAmount(),\n        getPoolTotalBonded(poolBonding),\n      ]);\n\n      setEpoch(parseInt(epoch, 10));\n      setQSDPrice(qsdPrice);\n      setExpansionAmount(expansionAmount);\n      setTotalQSDSSupply(new BigNumber(totalQSDSSupply));\n      setTotalBonded(toTokenUnitsBN(totalBonded, QSD.decimals));\n    };\n\n    updateAPR();\n  }, []);\n\n  //Update User balances\n  useEffect(() => {\n    if (user === '') {\n      setUserQSDBalance(new BigNumber(0));\n      setUserQSDAllowance(new BigNumber(0));\n      setUserQSDSBalance(new BigNumber(0));\n      setTotalQSDSSupply(new BigNumber(0));\n      setUserStagedBalance(new BigNumber(0));\n      setUserBondedBalance(new BigNumber(0));\n      setUserStatus(0);\n      return;\n    }\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const poolAddress = await getPoolBondingAddress();\n\n      const [\n        poolTotalBondedStr,\n        qsdBalance,\n        qsdAllowance,\n        stagedBalance,\n        bondedBalance,\n        status,\n        fluidUntilStr,\n        qsdRewardedStr,\n        qsgRewardedStr,\n        qsdClaimableStr,\n        qsgClaimableStr,\n      ] = await Promise.all([\n        getPoolTotalBonded(poolAddress),\n        getTokenBalance(QSD.addr, user),\n        getTokenAllowance(QSD.addr, user, poolAddress),\n        getBalanceOfStaged(poolAddress, user),\n        getBalanceBonded(poolAddress, user),\n        getPoolStatusOf(poolAddress, user),\n        getPoolFluidUntil(poolAddress, user),\n        getPoolBalanceOfRewarded1(poolAddress, user),\n        getPoolBalanceOfRewarded2(poolAddress, user),\n        getPoolBalanceOfClaimable1(poolAddress, user),\n        getPoolBalanceOfClaimable2(poolAddress, user),\n      ]);\n\n      const qsdRewarded = toTokenUnitsBN(qsdRewardedStr, QSD.decimals);\n      const qsgRewarded = toTokenUnitsBN(qsgRewardedStr, QSG.decimals);\n      const qsdClaimable = toTokenUnitsBN(qsdClaimableStr, QSD.decimals);\n      const qsgClaimable = toTokenUnitsBN(qsgClaimableStr, QSG.decimals);\n      const poolTotalBonded = toTokenUnitsBN(poolTotalBondedStr, QSD.decimals);\n      const userQSDBalance = toTokenUnitsBN(qsdBalance, QSD.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, QSDS.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, QSDS.decimals);\n      const userStatus = parseInt(status, 10);\n      const fluidUntil = parseInt(fluidUntilStr, 10);\n\n      if (!isCancelled) {\n        setTotalBonded(poolTotalBonded);\n        setPoolBondingAddress(poolAddress);\n        setUserQSDBalance(new BigNumber(userQSDBalance));\n        setUserQSDAllowance(new BigNumber(qsdAllowance));\n        setUserQSDSBalance(new BigNumber(userQSDSBalance));\n        setTotalQSDSSupply(new BigNumber(totalQSDSSupply));\n        setUserStagedBalance(new BigNumber(userStagedBalance));\n        setUserBondedBalance(new BigNumber(userBondedBalance));\n        setUserRewardedQSD(new BigNumber(qsdRewarded));\n        setUserRewardedQSG(new BigNumber(qsgRewarded));\n        setUserClaimableQSD(new BigNumber(qsdClaimable));\n        setUserClaimableQSG(new BigNumber(qsgClaimable));\n        setUserStatus(userStatus);\n        setUserStatusUnlocked(fluidUntil);\n        setLockup(POOL_EXIT_LOCKUP_EPOCHS);\n      }\n    }\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n\n  let bondingWeeklyYield = '...';\n  let bondingHourlyYield = '...';\n  let bondingDailyYield = '...';\n\n  // Define number formatting\n  var options = { minimumFractionDigits: 0,\n                maximumFractionDigits: 2 };\n  var numberFormat = new Intl.NumberFormat('en-US', options);\n\n  // Calculate DAO APR (4 hrs)\n  if (qsdPrice && totalBonded && expansionAmount) {\n    if (epoch > 72) {\n      const totalQSD = toFloat(totalBonded);\n      const qsdToAdd = expansionAmount / 2;\n\n      const daoYield = (qsdToAdd / totalQSD) * 100;\n\n      bondingHourlyYield = numberFormat.format(daoYield / 4) + '%';\n      bondingDailyYield = numberFormat.format(daoYield * 6) + '%';\n      bondingWeeklyYield = numberFormat.format(daoYield * 6 * 7) + '%';\n    } else {\n      bondingHourlyYield = '0%';\n      bondingDailyYield = '0%';\n      bondingWeeklyYield = '0%';\n    }\n  }\n\n  return (\n    <Layout>\n      <Guide\n        // bodyApr={\n        //   <>\n        //     <div>Hourly: {bondingHourlyYield}</div>\n        //     <div>Daily: {bondingDailyYield}</div>\n        //     <div>Weekly: {bondingWeeklyYield}</div>\n        //   </>\n        // }\n        aprs={{\n          hourly: bondingHourlyYield,\n          daily: bondingDailyYield,\n          weekly: bondingWeeklyYield,\n        }}\n        bodyInstructions={\n          <p>\n            Note: Rewards in this section are applicable from epoch 73 onwards.\n            <br />\n            Step 1: Stage your QSD\n            <br />\n            Step 2: Bond your QSD *Note that you can only bond QSD when TWAP is\n            &lt;1*\n            <br />\n            &nbsp;&nbsp; 2.1: If TWAP is &lt;1, you'll be rewarded QSG\n            <br />\n            &nbsp;&nbsp; 2.2: If TWAP is &gt;=1, you'll be rewarded QSD\n            <br />\n            Step 3: Poke your rewards to move them to claimable\n            <br />\n            Step 4: Wait 1 epoch to claim claimable QSD and/or QSG\n          </p>\n        }\n      />\n\n      <IconHeader icon={<i className='fas fa-atom' />} text='QSD Rewards' />\n\n      <AccountPageHeader\n        accountQSDBalance={userQSDBalance}\n        accountQSDSBalance={userQSDSBalance}\n        totalBonded={totalBonded}\n        accountStagedBalance={userStagedBalance}\n        accountBondedBalance={userBondedBalance}\n        accountStatus={userStatus}\n        unlocked={userStatusUnlocked}\n      />\n\n      <WithdrawDeposit\n        suffix='QSD'\n        balance={userQSDBalance}\n        allowance={userQSDAllowance}\n        stagedBalance={userStagedBalance}\n        status={userStatus}\n        disabled={!user}\n        handleApprove={() => {\n          approve(QSD.addr, poolBondingAddress);\n        }}\n        handleDeposit={(depositAmount) => {\n          depositPool(\n            poolBondingAddress,\n            toBaseUnitBN(depositAmount, QSD.decimals),\n            () => {}\n          );\n        }}\n        handleWithdraw={(withdrawAmount) => {\n          withdrawPool(\n            poolBondingAddress,\n            toBaseUnitBN(withdrawAmount, QSD.decimals),\n            () => {}\n          );\n        }}\n      />\n\n      <BondUnbond\n        extraTip={'Can only bond when QSD < 1 DAI.'}\n        suffix='QSD'\n        staged={userStagedBalance}\n        bonded={userBondedBalance}\n        status={userStatus}\n        lockup={lockup}\n        disabled={!user}\n        handleBond={(bondAmount) => {\n          bondPool(\n            poolBondingAddress,\n            toBaseUnitBN(bondAmount, QSD.decimals),\n            () => {}\n          );\n        }}\n        handleUnbond={(unbondAmount) => {\n          unbondPool(\n            poolBondingAddress,\n            toBaseUnitBN(unbondAmount, QSD.decimals),\n            () => {}\n          );\n        }}\n      />\n\n      <Claim\n        userStatus={userStatus}\n        poolAddress={poolBondingAddress}\n        amountQSD={userClaimableQSD}\n        amountQSG={userClaimableQSG}\n      />\n\n      <Rewards\n        poolAddress={poolBondingAddress}\n        amountQSD={userRewardedQSD}\n        amountQSG={userRewardedQSG}\n      />\n    </Layout>\n  );\n}\n\nexport default Bonding;\n"]},"metadata":{},"sourceType":"module"}