{"ast":null,"code":"import BigNumber from 'bignumber.js';\n/**\n * Convert 10.999 to 10999000\n */\n\nexport function toBaseUnitBN(rawAmt, decimals) {\n  const raw = new BigNumber(rawAmt);\n  const base = new BigNumber(10);\n  const decimalsBN = new BigNumber(decimals);\n  return raw.times(base.pow(decimalsBN)).integerValue();\n}\n/**\n * Convert 10999000 to 10.999\n */\n\nexport const toTokenUnitsBN = (tokenAmount, tokenDecimals) => {\n  const amt = new BigNumber(tokenAmount);\n  const digits = new BigNumber(10).pow(new BigNumber(tokenDecimals));\n  return amt.div(digits);\n};\nexport const isPos = amount => {\n  return !amount.isZero() && amount.isPositive();\n};\nexport const ownership = (balance, totalSupply) => {\n  return balance.multipliedBy(new BigNumber(100)).dividedBy(totalSupply);\n};\n/**\n * BigNumber string formatting\n */\n\nexport const formatBN = (amount, position) => {\n  if (amount.isLessThan(new BigNumber(1))) {\n    return pad(amount.precision(position, BigNumber.ROUND_FLOOR).toFixed(), position);\n  }\n\n  return delineate(amount.toFixed(position, BigNumber.ROUND_FLOOR));\n};\nexport const toFloat = a => {\n  return parseFloat(formatBN(a, 2).split(',').join(''));\n};\n\nfunction delineate(bnStr) {\n  const parts = bnStr.split('.');\n  return parts[0].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + '.' + parts[1];\n}\n\nfunction pad(bnStr, position) {\n  if (!bnStr.includes('.')) {\n    bnStr += '.';\n  }\n\n  const parts = bnStr.split('.');\n\n  for (let i = 0; i < position - parts[1].length; i++) {\n    bnStr += '0';\n  }\n\n  return bnStr;\n}\n\nexport function formatMoney(n) {\n  n = n.toPrecision(3);\n  return Math.abs(Number(n)) >= 1.0e9 ? Math.abs(Number(n)) / 1.0e9 + 'B' : Math.abs(Number(n)) >= 1.0e6 ? Math.abs(Number(n)) / 1.0e6 + 'MM' : Math.abs(Number(n)) >= 1.0e3 ? Math.abs(Number(n)) / 1.0e3 + 'K' : Math.abs(Number(n));\n}","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/utils/number.ts"],"names":["BigNumber","toBaseUnitBN","rawAmt","decimals","raw","base","decimalsBN","times","pow","integerValue","toTokenUnitsBN","tokenAmount","tokenDecimals","amt","digits","div","isPos","amount","isZero","isPositive","ownership","balance","totalSupply","multipliedBy","dividedBy","formatBN","position","isLessThan","pad","precision","ROUND_FLOOR","toFixed","delineate","toFloat","a","parseFloat","split","join","bnStr","parts","toString","replace","includes","i","length","formatMoney","n","toPrecision","Math","abs","Number"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\n\n/**\n * Convert 10.999 to 10999000\n */\nexport function toBaseUnitBN(\n  rawAmt: string | number | BigNumber,\n  decimals: number\n): BigNumber {\n  const raw = new BigNumber(rawAmt);\n  const base = new BigNumber(10);\n  const decimalsBN = new BigNumber(decimals);\n  return raw.times(base.pow(decimalsBN)).integerValue();\n}\n\n/**\n * Convert 10999000 to 10.999\n */\nexport const toTokenUnitsBN = (\n  tokenAmount: string | number | BigNumber,\n  tokenDecimals: number\n): BigNumber => {\n  const amt = new BigNumber(tokenAmount);\n  const digits = new BigNumber(10).pow(new BigNumber(tokenDecimals));\n  return amt.div(digits);\n};\n\nexport const isPos = (amount: BigNumber): boolean => {\n  return !amount.isZero() && amount.isPositive();\n};\n\nexport const ownership = (\n  balance: BigNumber,\n  totalSupply: BigNumber\n): BigNumber => {\n  return balance.multipliedBy(new BigNumber(100)).dividedBy(totalSupply);\n};\n\n/**\n * BigNumber string formatting\n */\n\nexport const formatBN = (amount: BigNumber, position: number): string => {\n  if (amount.isLessThan(new BigNumber(1))) {\n    return pad(\n      amount.precision(position, BigNumber.ROUND_FLOOR).toFixed(),\n      position\n    );\n  }\n  return delineate(amount.toFixed(position, BigNumber.ROUND_FLOOR));\n};\n\nexport const toFloat = (a: BigNumber) => {\n  return parseFloat(formatBN(a, 2).split(',').join(''));\n};\n\nfunction delineate(bnStr) {\n  const parts = bnStr.split('.');\n  return (\n    parts[0].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') + '.' + parts[1]\n  );\n}\n\nfunction pad(bnStr, position) {\n  if (!bnStr.includes('.')) {\n    bnStr += '.';\n  }\n\n  const parts = bnStr.split('.');\n  for (let i = 0; i < position - parts[1].length; i++) {\n    bnStr += '0';\n  }\n\n  return bnStr;\n}\n\nexport function formatMoney(n) {\n  n = n.toPrecision(3);\n  return Math.abs(Number(n)) >= 1.0e9\n    ? Math.abs(Number(n)) / 1.0e9 + 'B'\n    : Math.abs(Number(n)) >= 1.0e6\n    ? Math.abs(Number(n)) / 1.0e6 + 'MM'\n    : Math.abs(Number(n)) >= 1.0e3\n    ? Math.abs(Number(n)) / 1.0e3 + 'K'\n    : Math.abs(Number(n));\n}\n"]},"metadata":{},"sourceType":"module"}