{"ast":null,"code":"import './slicedToArray-4e274c67.js';\nimport './unsupportedIterableToArray-137e449b.js';\nimport React from 'react';\nimport './_commonjsHelpers-97e6d7b1.js';\nimport { P as PropTypes } from './index-097535f1.js';\nimport { _ as _defineProperty } from './defineProperty-a0480c32.js';\nimport './toConsumableArray-127424c2.js';\nimport 'styled-components';\nimport { _ as _inherits, a as _createClass, b as _classCallCheck, e as _assertThisInitialized, c as _getPrototypeOf, d as _possibleConstructorReturn } from './getPrototypeOf-b96da1e1.js';\nimport './color.js';\nimport './components.js';\nimport './contains-component.js';\nimport './css.js';\nimport { d as dayjs } from './dayjs.min-e57fb69a.js';\nimport { difference } from './date.js';\nimport './miscellaneous.js';\nimport './environment.js';\nimport './font.js';\nimport './math-e6d0e93a.js';\nimport './characters.js';\nimport './format.js';\nimport './keycodes.js';\nimport './url.js';\nimport './web3.js';\nimport './constants.js';\nimport './breakpoints.js';\nimport './springs.js';\nimport './text-styles.js';\nimport './extends-db4f0c26.js';\nimport './objectWithoutProperties-234758e1.js';\nimport './isObject-3c6ec07e.js';\nexport { V as Viewport, u as useViewport } from './Viewport-cc7debfb.js';\nimport { g as getDisplayName } from './getDisplayName-d5fc7707.js';\nexport { P as PublicUrl } from './index-edfeada6.js';\nexport { R as Root, u as useRoot } from './index-f754c2df.js';\nexport { observe } from './observe.js';\nexport { R as Redraw } from './index-f0d64c59.js';\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n} // adjusts the re-render timer to be one second, minute, or hour based on the\n// fromDate prop.\n// For a discussion on pitfalls, see\n// https://gist.github.com/staltz/08bf613199092eeb41ac8137d51eb5e6\n\n\nvar EVERY_SECOND = 1000;\nvar EVERY_MINUTE = EVERY_SECOND * 60;\nvar EVERY_HOUR = EVERY_MINUTE * 60;\n\nvar getRedrawTime = function getRedrawTime(fromDate) {\n  var _difference = difference(new Date(), fromDate),\n      days = _difference.days,\n      hours = _difference.hours,\n      minutes = _difference.minutes;\n\n  return hours || days ? EVERY_HOUR : minutes > 1 ? EVERY_MINUTE : EVERY_SECOND;\n};\n\nvar RedrawFromDate = /*#__PURE__*/function (_React$Component) {\n  _inherits(RedrawFromDate, _React$Component);\n\n  var _super = _createSuper(RedrawFromDate);\n\n  function RedrawFromDate() {\n    var _this;\n\n    _classCallCheck(this, RedrawFromDate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      redrawTime: EVERY_HOUR,\n      lastDraw: -1\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearInterval\", function () {\n      _this.interval && clearInterval(_this.interval);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"restartDrawInterval\", function (redrawTime) {\n      _this.clearInterval();\n\n      _this.interval = setInterval(function () {\n        _this.setState({\n          lastDraw: Date.now()\n        });\n\n        var newRedrawTime = getRedrawTime(_this.props.fromDate);\n\n        if (newRedrawTime !== redrawTime) {\n          _this.restartDrawInterval(newRedrawTime);\n        }\n      }, redrawTime);\n    });\n\n    return _this;\n  }\n\n  _createClass(RedrawFromDate, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var fromDate = this.props.fromDate;\n\n      if (fromDate) {\n        this.restartDrawInterval(getRedrawTime(fromDate));\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref) {\n      var fromDate = _ref.fromDate;\n\n      if (!fromDate && this.props.fromDate) {\n        this.clearInterval();\n      } else if (!dayjs(fromDate).isSame(this.props.fromDate)) {\n        this.restartDrawInterval(getRedrawTime(this.props.fromDate));\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearInterval();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children();\n    }\n  }]);\n\n  return RedrawFromDate;\n}(React.Component);\n\n_defineProperty(RedrawFromDate, \"propTypes\", {\n  children: PropTypes.func.isRequired,\n  fromDate: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.instanceOf(Date)]).isRequired\n});\n\nvar hocWrap = function hocWrap(Component) {\n  var HOC = function HOC(props) {\n    return /*#__PURE__*/React.createElement(RedrawFromDate, {\n      fromDate: props.fromDate\n    }, function () {\n      return /*#__PURE__*/React.createElement(Component, props);\n    });\n  };\n\n  HOC.propTypes = {\n    fromDate: RedrawFromDate.propTypes.fromDate\n  };\n  HOC.displayName = \"RedrawFromDate(\".concat(getDisplayName(Component), \")\");\n  return HOC;\n};\n\nRedrawFromDate.hocWrap = hocWrap;\nexport { RedrawFromDate };","map":{"version":3,"sources":["../../src/providers/RedrawFromDate/RedrawFromDate.js"],"names":["EVERY_SECOND","EVERY_MINUTE","EVERY_HOUR","getRedrawTime","days","hours","minutes","difference","RedrawFromDate","React","Component","children","PropTypes","fromDate","isRequired","redrawTime","lastDraw","dayjs","clearInterval","setInterval","Date","newRedrawTime","hocWrap","HOC","props","getDisplayName"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport getDisplayName from 'react-display-name'\nimport dayjs from 'dayjs'\nimport { difference } from '../../utils/date'\n\n// Render prop component for re-rendering based on a given date. Automatically\n// adjusts the re-render timer to be one second, minute, or hour based on the\n// fromDate prop.\n// For a discussion on pitfalls, see\n// https://gist.github.com/staltz/08bf613199092eeb41ac8137d51eb5e6\n\nconst EVERY_SECOND = 1000\nconst EVERY_MINUTE = EVERY_SECOND * 60\nconst EVERY_HOUR = EVERY_MINUTE * 60\n\nconst getRedrawTime = fromDate => {\n  const { days, hours, minutes } = difference(new Date(), fromDate)\n  return hours || days ? EVERY_HOUR : minutes > 1 ? EVERY_MINUTE : EVERY_SECOND\n}\n\nclass RedrawFromDate extends React.Component {\n  static propTypes = {\n    children: PropTypes.func.isRequired,\n    fromDate: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.instanceOf(Date),\n    ]).isRequired,\n  }\n  state = {\n    redrawTime: EVERY_HOUR,\n    lastDraw: -1,\n  }\n  componentDidMount() {\n    const { fromDate } = this.props\n    if (fromDate) {\n      this.restartDrawInterval(getRedrawTime(fromDate))\n    }\n  }\n  componentWillReceiveProps({ fromDate }) {\n    if (!fromDate && this.props.fromDate) {\n      this.clearInterval()\n    } else if (!dayjs(fromDate).isSame(this.props.fromDate)) {\n      this.restartDrawInterval(getRedrawTime(this.props.fromDate))\n    }\n  }\n  componentWillUnmount() {\n    this.clearInterval()\n  }\n  clearInterval = () => {\n    this.interval && clearInterval(this.interval)\n  }\n  restartDrawInterval = redrawTime => {\n    this.clearInterval()\n\n    this.interval = setInterval(() => {\n      this.setState({ lastDraw: Date.now() })\n\n      const newRedrawTime = getRedrawTime(this.props.fromDate)\n      if (newRedrawTime !== redrawTime) {\n        this.restartDrawInterval(newRedrawTime)\n      }\n    }, redrawTime)\n  }\n  render() {\n    return this.props.children()\n  }\n}\n\nconst hocWrap = Component => {\n  const HOC = props => (\n    <RedrawFromDate fromDate={props.fromDate}>\n      {() => <Component {...props} />}\n    </RedrawFromDate>\n  )\n  HOC.propTypes = {\n    fromDate: RedrawFromDate.propTypes.fromDate,\n  }\n  HOC.displayName = `RedrawFromDate(${getDisplayName(Component)})`\n  return HOC\n}\n\nRedrawFromDate.hocWrap = hocWrap\n\nexport { RedrawFromDate, hocWrap }\nexport default RedrawFromDate\n"]},"metadata":{},"sourceType":"module"}