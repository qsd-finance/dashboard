{"ast":null,"code":"import React, { useContext } from 'react';\nimport { P as PropTypes } from './index-097535f1.js';\nimport { _ as _defineProperty } from './defineProperty-a0480c32.js';\nimport { _ as _inherits, a as _createClass, b as _classCallCheck, c as _getPrototypeOf, d as _possibleConstructorReturn } from './getPrototypeOf-b96da1e1.js';\nimport { prefixUrl } from './url.js';\nimport { _ as _extends } from './extends-db4f0c26.js';\nimport { g as getDisplayName } from './getDisplayName-d5fc7707.js';\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar PublicUrlContext = React.createContext('');\nvar Provider = PublicUrlContext.Provider,\n    Consumer = PublicUrlContext.Consumer;\n\nvar PublicUrlProvider = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PublicUrlProvider, _React$PureComponent);\n\n  var _super = _createSuper(PublicUrlProvider);\n\n  function PublicUrlProvider() {\n    _classCallCheck(this, PublicUrlProvider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PublicUrlProvider, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          url = _this$props.url,\n          children = _this$props.children;\n      return /*#__PURE__*/React.createElement(Provider, {\n        value: url\n      }, children);\n    }\n  }]);\n\n  return PublicUrlProvider;\n}(React.PureComponent); // HOC wrapper\n\n\n_defineProperty(PublicUrlProvider, \"propTypes\", {\n  url: PropTypes.string.isRequired,\n  children: PropTypes.node\n});\n\nvar hocWrap = function hocWrap(Component) {\n  var HOC = function HOC(props) {\n    return /*#__PURE__*/React.createElement(Consumer, null, function (url) {\n      return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n        publicUrl: url\n      }));\n    });\n  };\n\n  HOC.displayName = \"PublicUrlProvider(\".concat(getDisplayName(Component), \")\");\n  return HOC;\n}; // styled-components utility for URLs\n\n\nvar styledUrl = function styledUrl(url) {\n  return function (_ref) {\n    var publicUrl = _ref.publicUrl;\n    return prefixUrl(url, publicUrl);\n  };\n};\n\nvar PublicUrl = function PublicUrl(props) {\n  return /*#__PURE__*/React.createElement(Consumer, props);\n};\n\nPublicUrl.Provider = PublicUrlProvider;\nPublicUrl.hocWrap = hocWrap;\nPublicUrl.styledUrl = styledUrl;\n\nfunction usePublicUrl() {\n  return useContext(PublicUrlContext);\n}\n\nexport { PublicUrl as P, usePublicUrl as u };","map":{"version":3,"sources":["../../src/providers/PublicUrl/PublicUrl.js"],"names":["PublicUrlContext","React","Provider","Consumer","PublicUrlProvider","PureComponent","url","PropTypes","children","node","hocWrap","HOC","getDisplayName","styledUrl","publicUrl","prefixUrl","PublicUrl","useContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAMA,gBAAgB,GAAGC,KAAK,CAALA,aAAAA,CAAzB,EAAyBA,CAAzB;IACQC,QAAAA,GAAuBF,gBAAAA,CAAvBE,Q;IAAUC,QAAAA,GAAaH,gBAAAA,CAAbG,Q;;IAEZC,iBAAAA,GAAAA,aAAAA,UAAAA,oBAAAA,EAAAA;;;;;;;;;;;;;6BAKK;AAAA,UAAA,WAAA,GACmB,KADnB,KAAA;AAAA,UACCE,GADD,GAAA,WAAA,CAAA,GAAA;AAAA,UACME,QADN,GAAA,WAAA,CAAA,QAAA;AAEP,aAAA,aAAO,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAU,QAAA,KAAK,EAAEF;AAAjB,OAAA,EAAP,QAAO,CAAP;AACD;;;;CARGF,CAA0BH,KAAK,CAACI,aAAhCD,C,EAAgCC;;;gBAAhCD,iB,EAAAA,W,EACe;AACjBE,EAAAA,GAAG,EAAEC,SAAS,CAATA,MAAAA,CADY,UAAA;AAEjBC,EAAAA,QAAQ,EAAED,SAAS,CAACE;AAFH,C;;AAWrB,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAA,SAAA,EAAa;AAC3B,MAAMC,GAAG,GAAG,SAANA,GAAM,CAAA,KAAA,EAAK;AAAA,WAAA,aACf,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAAW,UAAA,GAAA,EAAG;AAAA,aAAA,aAAI,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAsB,QAAA,SAAS,EAAEL;AAAjC,OAAA,CAAA,CAAJ;AADC,KACf,CADe;AAAjB,GAAA;;AAGAK,EAAAA,GAAG,CAAHA,WAAAA,GAAAA,qBAAAA,MAAAA,CAAuCC,cAAc,CAArDD,SAAqD,CAArDA,EAAAA,GAAAA,CAAAA;AACA,SAAA,GAAA;AALF,CAAA,C,CAAA;;;AASA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAAA,GAAA,EAAG;AAAA,SAAI,UAAA,IAAA,EAAA;AAAA,QAAGC,SAAH,GAAA,IAAA,CAAA,SAAA;AAAA,WAAmBC,SAAS,CAAA,GAAA,EAA5B,SAA4B,CAA5B;AAAJ,GAAA;AAArB,CAAA;;IAEMC,SAAS,GAAG,SAAZA,SAAY,CAAA,KAAA,EAAK;AAAA,SAAA,aAAI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAJ,KAAI,CAAJ;AAAA,C;;AACvBA,SAAS,CAATA,QAAAA,GAAAA,iBAAAA;AACAA,SAAS,CAATA,OAAAA,GAAAA,OAAAA;AACAA,SAAS,CAATA,SAAAA,GAAAA,SAAAA;;AAEA,SAAA,YAAA,GAAwB;AACtB,SAAOC,UAAU,CAAjB,gBAAiB,CAAjB;AACD","sourcesContent":["import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport getDisplayName from 'react-display-name'\nimport { prefixUrl } from '../../utils/url'\n\nconst PublicUrlContext = React.createContext('')\nconst { Provider, Consumer } = PublicUrlContext\n\nclass PublicUrlProvider extends React.PureComponent {\n  static propTypes = {\n    url: PropTypes.string.isRequired,\n    children: PropTypes.node,\n  }\n  render() {\n    const { url, children } = this.props\n    return <Provider value={url}>{children}</Provider>\n  }\n}\n\n// HOC wrapper\nconst hocWrap = Component => {\n  const HOC = props => (\n    <Consumer>{url => <Component {...props} publicUrl={url} />}</Consumer>\n  )\n  HOC.displayName = `PublicUrlProvider(${getDisplayName(Component)})`\n  return HOC\n}\n\n// styled-components utility for URLs\nconst styledUrl = url => ({ publicUrl }) => prefixUrl(url, publicUrl)\n\nconst PublicUrl = props => <Consumer {...props} />\nPublicUrl.Provider = PublicUrlProvider\nPublicUrl.hocWrap = hocWrap\nPublicUrl.styledUrl = styledUrl\n\nfunction usePublicUrl() {\n  return useContext(PublicUrlContext)\n}\n\nexport { PublicUrl, Provider, hocWrap, styledUrl, usePublicUrl }\nexport default PublicUrl\n"]},"metadata":{},"sourceType":"module"}