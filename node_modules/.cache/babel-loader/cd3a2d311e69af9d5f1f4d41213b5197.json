{"ast":null,"code":"import _regeneratorRuntime from\"/Users/J/crypto/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/J/crypto/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/J/crypto/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import BigNumber from'bignumber.js';import React,{useEffect,useState}from'react';import{Layout}from'@aragon/ui';import{useParams}from'react-router-dom';import{DollarPool4}from'../../constants/contracts';import{DAI,QSD,UNI}from'../../constants/tokens';import{POOL_EXIT_LOCKUP_EPOCHS}from'../../constants/values';import{getExpansionAmount,getInstantaneousQSDPrice,getLPBondedLiquidity,getPoolBalanceOfBonded,getPoolBalanceOfClaimable,getPoolBalanceOfRewarded,getPoolBalanceOfStaged,getPoolFluidUntil,getPoolStatusOf,getPoolTotalBonded,getTokenAllowance,getTokenBalance}from'../../utils/infura';import{toBaseUnitBN,toFloat,toTokenUnitsBN}from'../../utils/number';import{getPoolLPAddress}from'../../utils/pool';import{approve,bondPool,depositPool,unbondPool,withdrawPool,claimPool}from'../../utils/web3';import{BondUnbond,IconHeader,WithdrawDeposit,Claim,Guide}from'../common';// import Claim from './Claim';\n// import WithdrawDeposit from \"./WithdrawDeposit\";\n// import BondUnbond from './BondUnbond';\nimport PoolPageHeader from'./Header';import Provide from'./Provide';function Pool(_ref){var user=_ref.user;var _useParams=useParams(),override=_useParams.override;if(override){user=override;}var _useState=useState(null),_useState2=_slicedToArray(_useState,2),qsdLiquidity=_useState2[0],setQSDLiquidity=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),daiLiquidity=_useState4[0],setDAILiquidity=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),qsdPrice=_useState6[0],setQSDPrice=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),expansionAmount=_useState8[0],setExpansionAmount=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),poolAddress=_useState10[0],setPoolAddress=_useState10[1];var _useState11=useState(new BigNumber(0)),_useState12=_slicedToArray(_useState11,2),poolTotalBonded=_useState12[0],setPoolTotalBonded=_useState12[1];var _useState13=useState(new BigNumber(0)),_useState14=_slicedToArray(_useState13,2),pairBalanceQSD=_useState14[0],setPairBalanceQSD=_useState14[1];var _useState15=useState(new BigNumber(0)),_useState16=_slicedToArray(_useState15,2),pairBalanceDAI=_useState16[0],setPairBalanceDAI=_useState16[1];var _useState17=useState(new BigNumber(0)),_useState18=_slicedToArray(_useState17,2),userUNIBalance=_useState18[0],setUserUNIBalance=_useState18[1];var _useState19=useState(new BigNumber(0)),_useState20=_slicedToArray(_useState19,2),userUNIAllowance=_useState20[0],setUserUNIAllowance=_useState20[1];var _useState21=useState(new BigNumber(0)),_useState22=_slicedToArray(_useState21,2),userDAIBalance=_useState22[0],setUserDAIBalance=_useState22[1];var _useState23=useState(new BigNumber(0)),_useState24=_slicedToArray(_useState23,2),userDAIAllowance=_useState24[0],setUserDAIAllowance=_useState24[1];var _useState25=useState(new BigNumber(0)),_useState26=_slicedToArray(_useState25,2),userStagedBalance=_useState26[0],setUserStagedBalance=_useState26[1];var _useState27=useState(new BigNumber(0)),_useState28=_slicedToArray(_useState27,2),userBondedBalance=_useState28[0],setUserBondedBalance=_useState28[1];var _useState29=useState(new BigNumber(0)),_useState30=_slicedToArray(_useState29,2),userRewardedBalance=_useState30[0],setUserRewardedBalance=_useState30[1];var _useState31=useState(new BigNumber(0)),_useState32=_slicedToArray(_useState31,2),userClaimableBalance=_useState32[0],setUserClaimableBalance=_useState32[1];var _useState33=useState(0),_useState34=_slicedToArray(_useState33,2),userStatus=_useState34[0],setUserStatus=_useState34[1];var _useState35=useState(0),_useState36=_slicedToArray(_useState35,2),userStatusUnlocked=_useState36[0],setUserStatusUnlocked=_useState36[1];var _useState37=useState(0),_useState38=_slicedToArray(_useState37,2),lockup=_useState38[0],setLockup=_useState38[1];//APR\nuseEffect(function(){var updateAPR=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$Promise$all,_yield$Promise$all2,spot,expansionAmount,liquidity;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Promise.all([getInstantaneousQSDPrice(),getExpansionAmount(),getLPBondedLiquidity()]);case 2:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,3);spot=_yield$Promise$all2[0];expansionAmount=_yield$Promise$all2[1];liquidity=_yield$Promise$all2[2];setQSDPrice(toTokenUnitsBN(spot,18));setQSDLiquidity(liquidity.qsd);setDAILiquidity(liquidity.dai);setExpansionAmount(expansionAmount);case 11:case\"end\":return _context.stop();}}},_callee);}));return function updateAPR(){return _ref2.apply(this,arguments);};}();updateAPR();},[]);//Update User balances\nuseEffect(function(){if(user===''){setPoolAddress('');setPoolTotalBonded(new BigNumber(0));setPairBalanceQSD(new BigNumber(0));setPairBalanceDAI(new BigNumber(0));setUserUNIBalance(new BigNumber(0));setUserUNIAllowance(new BigNumber(0));setUserDAIBalance(new BigNumber(0));setUserDAIAllowance(new BigNumber(0));setUserStagedBalance(new BigNumber(0));setUserBondedBalance(new BigNumber(0));setUserRewardedBalance(new BigNumber(0));setUserClaimableBalance(new BigNumber(0));setUserStatus(0);setUserStatusUnlocked(0);return;}var isCancelled=false;function updateUserInfo(){return _updateUserInfo.apply(this,arguments);}function _updateUserInfo(){_updateUserInfo=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var poolAddressStr,_yield$Promise$all3,_yield$Promise$all4,poolTotalBondedStr,pairBalanceQSDStr,pairBalanceDAIStr,balance,daiBalance,allowance,usdcAllowance,stagedBalance,bondedBalance,rewardedBalance,claimableBalance,status,fluidUntilStr,poolTotalBonded,pairQSDBalance,pairDAIBalance,userUNIBalance,userDAIBalance,userStagedBalance,userBondedBalance,userRewardedBalance,userClaimableBalance,userStatus,fluidUntil;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getPoolLPAddress();case 2:poolAddressStr=_context2.sent;_context2.next=5;return Promise.all([getPoolTotalBonded(poolAddressStr),getTokenBalance(QSD.addr,UNI.addr),getTokenBalance(DAI.addr,UNI.addr),getTokenBalance(UNI.addr,user),getTokenBalance(DAI.addr,user),getTokenAllowance(UNI.addr,user,poolAddressStr),getTokenAllowance(DAI.addr,user,poolAddressStr),getPoolBalanceOfStaged(poolAddressStr,user),getPoolBalanceOfBonded(poolAddressStr,user),getPoolBalanceOfRewarded(poolAddressStr,user),getPoolBalanceOfClaimable(poolAddressStr,user),getPoolStatusOf(poolAddressStr,user),getPoolFluidUntil(poolAddressStr,user)]);case 5:_yield$Promise$all3=_context2.sent;_yield$Promise$all4=_slicedToArray(_yield$Promise$all3,13);poolTotalBondedStr=_yield$Promise$all4[0];pairBalanceQSDStr=_yield$Promise$all4[1];pairBalanceDAIStr=_yield$Promise$all4[2];balance=_yield$Promise$all4[3];daiBalance=_yield$Promise$all4[4];allowance=_yield$Promise$all4[5];usdcAllowance=_yield$Promise$all4[6];stagedBalance=_yield$Promise$all4[7];bondedBalance=_yield$Promise$all4[8];rewardedBalance=_yield$Promise$all4[9];claimableBalance=_yield$Promise$all4[10];status=_yield$Promise$all4[11];fluidUntilStr=_yield$Promise$all4[12];poolTotalBonded=toTokenUnitsBN(poolTotalBondedStr,QSD.decimals);pairQSDBalance=toTokenUnitsBN(pairBalanceQSDStr,QSD.decimals);pairDAIBalance=toTokenUnitsBN(pairBalanceDAIStr,DAI.decimals);userUNIBalance=toTokenUnitsBN(balance,UNI.decimals);userDAIBalance=toTokenUnitsBN(daiBalance,DAI.decimals);userStagedBalance=toTokenUnitsBN(stagedBalance,UNI.decimals);userBondedBalance=toTokenUnitsBN(bondedBalance,UNI.decimals);userRewardedBalance=toTokenUnitsBN(rewardedBalance,QSD.decimals);userClaimableBalance=toTokenUnitsBN(claimableBalance,QSD.decimals);userStatus=parseInt(status,10);fluidUntil=parseInt(fluidUntilStr,10);if(!isCancelled){setPoolAddress(poolAddressStr);setPoolTotalBonded(new BigNumber(poolTotalBonded));setPairBalanceQSD(new BigNumber(pairQSDBalance));setPairBalanceDAI(new BigNumber(pairDAIBalance));setUserUNIBalance(new BigNumber(userUNIBalance));setUserUNIAllowance(new BigNumber(allowance));setUserDAIAllowance(new BigNumber(usdcAllowance));setUserDAIBalance(new BigNumber(userDAIBalance));setUserStagedBalance(new BigNumber(userStagedBalance));setUserBondedBalance(new BigNumber(userBondedBalance));setUserRewardedBalance(new BigNumber(userRewardedBalance));setUserClaimableBalance(new BigNumber(userClaimableBalance));setUserStatus(userStatus);setUserStatusUnlocked(fluidUntil);setLockup(poolAddressStr===DollarPool4?POOL_EXIT_LOCKUP_EPOCHS:1);}case 32:case\"end\":return _context2.stop();}}},_callee2);}));return _updateUserInfo.apply(this,arguments);}updateUserInfo();var id=setInterval(updateUserInfo,15000);// eslint-disable-next-line consistent-return\nreturn function(){isCancelled=true;clearInterval(id);};},[user]);var lpHourlyAPR='...';var lpDailyAPR='...';var lpWeeklyAPR='...';var lpMonthlyAPR='...';// Define number formatting\nvar options={minimumFractionDigits:0,maximumFractionDigits:2};var numberFormat=new Intl.NumberFormat('en-US',options);if(qsdPrice&&qsdLiquidity&&daiLiquidity&&expansionAmount){var totalDAI=qsdLiquidity*toFloat(qsdPrice)+daiLiquidity;var daiToAdd=expansionAmount/2*toFloat(qsdPrice);var lpYield=daiToAdd/totalDAI*100;lpHourlyAPR=numberFormat.format(lpYield/4)+'%';lpDailyAPR=numberFormat.format(lpYield*6)+'%';lpWeeklyAPR=numberFormat.format(lpYield*6*7)+'%';lpMonthlyAPR=numberFormat.format(lpYield*6*30)+'%';}return/*#__PURE__*/React.createElement(Layout,null,/*#__PURE__*/React.createElement(Guide,{aprs:{hourly:lpHourlyAPR,daily:lpDailyAPR,weekly:lpWeeklyAPR,monthly:lpMonthlyAPR},bodyInstructions:/*#__PURE__*/React.createElement(\"p\",null,\"Step 1: Stage your UNI-V2\",/*#__PURE__*/React.createElement(\"br\",null),\"Step 2: Bond your UNI-V2\",/*#__PURE__*/React.createElement(\"br\",null),\"Step 3: Unbond your UNI-V2 to move rewards to claimable\",/*#__PURE__*/React.createElement(\"br\",null),\"\\xA0\\xA0 (Remember to re-bond your UNI-V2 to continue getting rewards)\",/*#__PURE__*/React.createElement(\"br\",null),\"Step 4: Wait 1 epoch to claim claimable QSD\",/*#__PURE__*/React.createElement(\"br\",null),\"Step 5: Provide your rewards to compound your returns\",/*#__PURE__*/React.createElement(\"br\",null),\"\\xA0\\xA0 5.1: Dual Supply - Match your rewards with DAI from your wallet and add to LP\",/*#__PURE__*/React.createElement(\"br\",null),\"\\xA0\\xA0 5.2: Single Sided Supply - Add your rewards directly to your LP\")}),/*#__PURE__*/React.createElement(IconHeader,{icon:/*#__PURE__*/React.createElement(\"i\",{className:\"fas fa-parachute-box\"}),text:\"LP Rewards\"}),/*#__PURE__*/React.createElement(PoolPageHeader,{accountUNIBalance:userUNIBalance,accountBondedBalance:userBondedBalance,accountRewardedQSDBalance:userRewardedBalance,accountClaimableQSDBalance:userClaimableBalance,poolTotalBonded:poolTotalBonded,accountPoolStatus:userStatus,unlocked:userStatusUnlocked}),/*#__PURE__*/React.createElement(WithdrawDeposit,{suffix:\"UNI-V2\",balance:userUNIBalance,allowance:userUNIAllowance,stagedBalance:userStagedBalance,status:userStatus,disabled:!poolAddress,handleApprove:function handleApprove(){approve(UNI.addr,poolAddress);},handleDeposit:function handleDeposit(depositAmount,callback){depositPool(poolAddress,toBaseUnitBN(depositAmount,UNI.decimals),callback);},handleWithdraw:function handleWithdraw(withdrawAmount,callback){withdrawPool(poolAddress,toBaseUnitBN(withdrawAmount,UNI.decimals),callback);}}),/*#__PURE__*/React.createElement(BondUnbond,{suffix:\"UNI-V2\",staged:userStagedBalance,bonded:userBondedBalance,status:userStatus,lockup:lockup,disabled:!poolAddress,handleBond:function handleBond(bondAmount,callback){bondPool(poolAddress,toBaseUnitBN(bondAmount,UNI.decimals),callback);},handleUnbond:function handleUnbond(unbondAmount,callback){unbondPool(poolAddress,toBaseUnitBN(unbondAmount,UNI.decimals),callback);}}),/*#__PURE__*/React.createElement(Claim,{suffix:\"QSD\",claimable:userClaimableBalance,status:userStatus,disabled:!poolAddress,handleClaim:function handleClaim(claimAmount,callback){claimPool(poolAddress,toBaseUnitBN(claimAmount,QSD.decimals),callback);}}),/*#__PURE__*/React.createElement(Provide,{poolAddress:poolAddress,user:user,rewarded:userRewardedBalance,status:userStatus,pairBalanceQSD:pairBalanceQSD,pairBalanceDAI:pairBalanceDAI,userDAIBalance:userDAIBalance,userDAIAllowance:userDAIAllowance}));}export default Pool;","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/components/Pool/index.tsx"],"names":["BigNumber","React","useEffect","useState","Layout","useParams","DollarPool4","DAI","QSD","UNI","POOL_EXIT_LOCKUP_EPOCHS","getExpansionAmount","getInstantaneousQSDPrice","getLPBondedLiquidity","getPoolBalanceOfBonded","getPoolBalanceOfClaimable","getPoolBalanceOfRewarded","getPoolBalanceOfStaged","getPoolFluidUntil","getPoolStatusOf","getPoolTotalBonded","getTokenAllowance","getTokenBalance","toBaseUnitBN","toFloat","toTokenUnitsBN","getPoolLPAddress","approve","bondPool","depositPool","unbondPool","withdrawPool","claimPool","BondUnbond","IconHeader","WithdrawDeposit","Claim","Guide","PoolPageHeader","Provide","Pool","user","override","qsdLiquidity","setQSDLiquidity","daiLiquidity","setDAILiquidity","qsdPrice","setQSDPrice","expansionAmount","setExpansionAmount","poolAddress","setPoolAddress","poolTotalBonded","setPoolTotalBonded","pairBalanceQSD","setPairBalanceQSD","pairBalanceDAI","setPairBalanceDAI","userUNIBalance","setUserUNIBalance","userUNIAllowance","setUserUNIAllowance","userDAIBalance","setUserDAIBalance","userDAIAllowance","setUserDAIAllowance","userStagedBalance","setUserStagedBalance","userBondedBalance","setUserBondedBalance","userRewardedBalance","setUserRewardedBalance","userClaimableBalance","setUserClaimableBalance","userStatus","setUserStatus","userStatusUnlocked","setUserStatusUnlocked","lockup","setLockup","updateAPR","Promise","all","spot","liquidity","qsd","dai","isCancelled","updateUserInfo","poolAddressStr","addr","poolTotalBondedStr","pairBalanceQSDStr","pairBalanceDAIStr","balance","daiBalance","allowance","usdcAllowance","stagedBalance","bondedBalance","rewardedBalance","claimableBalance","status","fluidUntilStr","decimals","pairQSDBalance","pairDAIBalance","parseInt","fluidUntil","id","setInterval","clearInterval","lpHourlyAPR","lpDailyAPR","lpWeeklyAPR","lpMonthlyAPR","options","minimumFractionDigits","maximumFractionDigits","numberFormat","Intl","NumberFormat","totalDAI","daiToAdd","lpYield","format","hourly","daily","weekly","monthly","depositAmount","callback","withdrawAmount","bondAmount","unbondAmount","claimAmount"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\nimport React, { useEffect, useState } from 'react';\nimport { Layout } from '@aragon/ui';\nimport { useParams } from 'react-router-dom';\nimport { DollarPool4 } from '../../constants/contracts';\nimport { DAI, QSD, UNI } from '../../constants/tokens';\nimport { POOL_EXIT_LOCKUP_EPOCHS } from '../../constants/values';\nimport {\n  getExpansionAmount,\n  getInstantaneousQSDPrice,\n  getLPBondedLiquidity,\n  getPoolBalanceOfBonded,\n  getPoolBalanceOfClaimable,\n  getPoolBalanceOfRewarded,\n  getPoolBalanceOfStaged,\n  getPoolFluidUntil,\n  getPoolStatusOf,\n  getPoolTotalBonded,\n  getTokenAllowance,\n  getTokenBalance,\n} from '../../utils/infura';\nimport { toBaseUnitBN, toFloat, toTokenUnitsBN } from '../../utils/number';\nimport { getPoolLPAddress } from '../../utils/pool';\nimport {\n  approve,\n  bondPool,\n  depositPool,\n  unbondPool,\n  withdrawPool,\n  claimPool,\n} from '../../utils/web3';\nimport {\n  BondUnbond,\n  IconHeader,\n  WithdrawDeposit,\n  Claim,\n  Guide,\n} from '../common';\n// import Claim from './Claim';\n// import WithdrawDeposit from \"./WithdrawDeposit\";\n// import BondUnbond from './BondUnbond';\nimport PoolPageHeader from './Header';\nimport Provide from './Provide';\n\nfunction Pool({ user }: { user: string }) {\n  const { override } = useParams();\n  if (override) {\n    user = override;\n  }\n\n  const [qsdLiquidity, setQSDLiquidity] = useState<number | null>(null);\n  const [daiLiquidity, setDAILiquidity] = useState<number | null>(null);\n  const [qsdPrice, setQSDPrice] = useState<BigNumber | null>(null);\n  const [expansionAmount, setExpansionAmount] = useState<number | null>(null);\n\n  const [poolAddress, setPoolAddress] = useState('');\n  const [poolTotalBonded, setPoolTotalBonded] = useState(new BigNumber(0));\n  const [pairBalanceQSD, setPairBalanceQSD] = useState(new BigNumber(0));\n  const [pairBalanceDAI, setPairBalanceDAI] = useState(new BigNumber(0));\n  const [userUNIBalance, setUserUNIBalance] = useState(new BigNumber(0));\n  const [userUNIAllowance, setUserUNIAllowance] = useState(new BigNumber(0));\n  const [userDAIBalance, setUserDAIBalance] = useState(new BigNumber(0));\n  const [userDAIAllowance, setUserDAIAllowance] = useState(new BigNumber(0));\n  const [userStagedBalance, setUserStagedBalance] = useState(new BigNumber(0));\n  const [userBondedBalance, setUserBondedBalance] = useState(new BigNumber(0));\n  const [userRewardedBalance, setUserRewardedBalance] = useState(\n    new BigNumber(0)\n  );\n  const [userClaimableBalance, setUserClaimableBalance] = useState(\n    new BigNumber(0)\n  );\n  const [userStatus, setUserStatus] = useState(0);\n  const [userStatusUnlocked, setUserStatusUnlocked] = useState(0);\n  const [lockup, setLockup] = useState(0);\n\n  //APR\n  useEffect(() => {\n    const updateAPR = async () => {\n      const [spot, expansionAmount, liquidity] = await Promise.all([\n        getInstantaneousQSDPrice(),\n        getExpansionAmount(),\n        getLPBondedLiquidity(),\n      ]);\n\n      setQSDPrice(toTokenUnitsBN(spot, 18));\n      setQSDLiquidity(liquidity.qsd);\n      setDAILiquidity(liquidity.dai);\n      setExpansionAmount(expansionAmount);\n    };\n\n    updateAPR();\n  }, []);\n\n  //Update User balances\n  useEffect(() => {\n    if (user === '') {\n      setPoolAddress('');\n      setPoolTotalBonded(new BigNumber(0));\n      setPairBalanceQSD(new BigNumber(0));\n      setPairBalanceDAI(new BigNumber(0));\n      setUserUNIBalance(new BigNumber(0));\n      setUserUNIAllowance(new BigNumber(0));\n      setUserDAIBalance(new BigNumber(0));\n      setUserDAIAllowance(new BigNumber(0));\n      setUserStagedBalance(new BigNumber(0));\n      setUserBondedBalance(new BigNumber(0));\n      setUserRewardedBalance(new BigNumber(0));\n      setUserClaimableBalance(new BigNumber(0));\n      setUserStatus(0);\n      setUserStatusUnlocked(0);\n      return;\n    }\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const poolAddressStr = await getPoolLPAddress();\n\n      const [\n        poolTotalBondedStr,\n        pairBalanceQSDStr,\n        pairBalanceDAIStr,\n        balance,\n        daiBalance,\n        allowance,\n        usdcAllowance,\n        stagedBalance,\n        bondedBalance,\n        rewardedBalance,\n        claimableBalance,\n        status,\n        fluidUntilStr,\n      ] = await Promise.all([\n        getPoolTotalBonded(poolAddressStr),\n        getTokenBalance(QSD.addr, UNI.addr),\n        getTokenBalance(DAI.addr, UNI.addr),\n        getTokenBalance(UNI.addr, user),\n        getTokenBalance(DAI.addr, user),\n\n        getTokenAllowance(UNI.addr, user, poolAddressStr),\n        getTokenAllowance(DAI.addr, user, poolAddressStr),\n        getPoolBalanceOfStaged(poolAddressStr, user),\n        getPoolBalanceOfBonded(poolAddressStr, user),\n\n        getPoolBalanceOfRewarded(poolAddressStr, user),\n        getPoolBalanceOfClaimable(poolAddressStr, user),\n        getPoolStatusOf(poolAddressStr, user),\n        getPoolFluidUntil(poolAddressStr, user),\n      ]);\n\n      const poolTotalBonded = toTokenUnitsBN(poolTotalBondedStr, QSD.decimals);\n      const pairQSDBalance = toTokenUnitsBN(pairBalanceQSDStr, QSD.decimals);\n      const pairDAIBalance = toTokenUnitsBN(pairBalanceDAIStr, DAI.decimals);\n      const userUNIBalance = toTokenUnitsBN(balance, UNI.decimals);\n      const userDAIBalance = toTokenUnitsBN(daiBalance, DAI.decimals);\n      const userStagedBalance = toTokenUnitsBN(stagedBalance, UNI.decimals);\n      const userBondedBalance = toTokenUnitsBN(bondedBalance, UNI.decimals);\n      const userRewardedBalance = toTokenUnitsBN(rewardedBalance, QSD.decimals);\n      const userClaimableBalance = toTokenUnitsBN(\n        claimableBalance,\n        QSD.decimals\n      );\n      const userStatus = parseInt(status, 10);\n      const fluidUntil = parseInt(fluidUntilStr, 10);\n\n      if (!isCancelled) {\n        setPoolAddress(poolAddressStr);\n        setPoolTotalBonded(new BigNumber(poolTotalBonded));\n        setPairBalanceQSD(new BigNumber(pairQSDBalance));\n        setPairBalanceDAI(new BigNumber(pairDAIBalance));\n        setUserUNIBalance(new BigNumber(userUNIBalance));\n        setUserUNIAllowance(new BigNumber(allowance));\n        setUserDAIAllowance(new BigNumber(usdcAllowance));\n        setUserDAIBalance(new BigNumber(userDAIBalance));\n        setUserStagedBalance(new BigNumber(userStagedBalance));\n        setUserBondedBalance(new BigNumber(userBondedBalance));\n        setUserRewardedBalance(new BigNumber(userRewardedBalance));\n        setUserClaimableBalance(new BigNumber(userClaimableBalance));\n        setUserStatus(userStatus);\n        setUserStatusUnlocked(fluidUntil);\n        setLockup(poolAddressStr === DollarPool4 ? POOL_EXIT_LOCKUP_EPOCHS : 1);\n      }\n    }\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n\n  let lpHourlyAPR = '...';\n  let lpDailyAPR = '...';\n  let lpWeeklyAPR = '...';\n  let lpMonthlyAPR = '...';\n\n  // Define number formatting\n  var options = { minimumFractionDigits: 0,\n                maximumFractionDigits: 2 };\n  var numberFormat = new Intl.NumberFormat('en-US', options);\n\n  if (qsdPrice && qsdLiquidity && daiLiquidity && expansionAmount) {\n    const totalDAI = qsdLiquidity * toFloat(qsdPrice) + daiLiquidity;\n    const daiToAdd = (expansionAmount / 2) * toFloat(qsdPrice);\n\n    const lpYield = (daiToAdd / totalDAI) * 100;\n\n    lpHourlyAPR = numberFormat.format(lpYield / 4) + '%';\n    lpDailyAPR = numberFormat.format(lpYield * 6) + '%';\n    lpWeeklyAPR = numberFormat.format(lpYield * 6 * 7) + '%';\n    lpMonthlyAPR = numberFormat.format(lpYield * 6 * 30) + '%';\n  }\n\n  return (\n    <Layout>\n      <Guide\n        aprs={{\n          hourly: lpHourlyAPR,\n          daily: lpDailyAPR,\n          weekly: lpWeeklyAPR,\n          monthly: lpMonthlyAPR\n        }}\n        bodyInstructions={\n          <p>\n            Step 1: Stage your UNI-V2\n            <br />\n            Step 2: Bond your UNI-V2\n            <br />\n            Step 3: Unbond your UNI-V2 to move rewards to claimable\n            <br />\n            &nbsp;&nbsp; (Remember to re-bond your UNI-V2 to continue getting\n            rewards)\n            <br />\n            Step 4: Wait 1 epoch to claim claimable QSD\n            <br />\n            Step 5: Provide your rewards to compound your returns\n            <br />\n            &nbsp;&nbsp; 5.1: Dual Supply - Match your rewards with DAI from\n            your wallet and add to LP\n            <br />\n            &nbsp;&nbsp; 5.2: Single Sided Supply - Add your rewards directly to\n            your LP\n          </p>\n        }\n      />\n\n      <IconHeader\n        icon={<i className='fas fa-parachute-box' />}\n        text='LP Rewards'\n      />\n\n      <PoolPageHeader\n        accountUNIBalance={userUNIBalance}\n        accountBondedBalance={userBondedBalance}\n        accountRewardedQSDBalance={userRewardedBalance}\n        accountClaimableQSDBalance={userClaimableBalance}\n        poolTotalBonded={poolTotalBonded}\n        accountPoolStatus={userStatus}\n        unlocked={userStatusUnlocked}\n      />\n\n      {/* <WithdrawDeposit\n        poolAddress={poolAddress}\n        user={user}\n        balance={userUNIBalance}\n        allowance={userUNIAllowance}\n        stagedBalance={userStagedBalance}\n        status={userStatus}\n      /> */}\n\n      <WithdrawDeposit\n        suffix='UNI-V2'\n        balance={userUNIBalance}\n        allowance={userUNIAllowance}\n        stagedBalance={userStagedBalance}\n        status={userStatus}\n        disabled={!poolAddress}\n        handleApprove={() => {\n          approve(UNI.addr, poolAddress);\n        }}\n        handleDeposit={(depositAmount, callback) => {\n          depositPool(\n            poolAddress,\n            toBaseUnitBN(depositAmount, UNI.decimals),\n            callback\n          );\n        }}\n        handleWithdraw={(withdrawAmount, callback) => {\n          withdrawPool(\n            poolAddress,\n            toBaseUnitBN(withdrawAmount, UNI.decimals),\n            callback\n          );\n        }}\n      />\n\n      {/* <BondUnbond\n        poolAddress={poolAddress}\n        staged={userStagedBalance}\n        bonded={userBondedBalance}\n        status={userStatus}\n        lockup={lockup}\n      /> */}\n\n      <BondUnbond\n        suffix='UNI-V2'\n        staged={userStagedBalance}\n        bonded={userBondedBalance}\n        status={userStatus}\n        lockup={lockup}\n        disabled={!poolAddress}\n        handleBond={(bondAmount, callback) => {\n          bondPool(\n            poolAddress,\n            toBaseUnitBN(bondAmount, UNI.decimals),\n            callback\n          );\n        }}\n        handleUnbond={(unbondAmount, callback) => {\n          unbondPool(\n            poolAddress,\n            toBaseUnitBN(unbondAmount, UNI.decimals),\n            callback\n          );\n        }}\n      />\n\n      {/* <Claim\n        poolAddress={poolAddress}\n        claimable={userClaimableBalance}\n        status={userStatus}\n      /> */}\n\n      <Claim\n        suffix='QSD'\n        claimable={userClaimableBalance}\n        status={userStatus}\n        disabled={!poolAddress}\n        handleClaim={(claimAmount, callback) => {\n          claimPool(\n            poolAddress,\n            toBaseUnitBN(claimAmount, QSD.decimals),\n            callback\n          );\n        }}\n      />\n\n      <Provide\n        poolAddress={poolAddress}\n        user={user}\n        rewarded={userRewardedBalance}\n        status={userStatus}\n        pairBalanceQSD={pairBalanceQSD}\n        pairBalanceDAI={pairBalanceDAI}\n        userDAIBalance={userDAIBalance}\n        userDAIAllowance={userDAIAllowance}\n      />\n    </Layout>\n  );\n}\n\nexport default Pool;\n"]},"metadata":{},"sourceType":"module"}