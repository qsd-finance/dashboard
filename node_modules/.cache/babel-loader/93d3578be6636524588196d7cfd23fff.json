{"ast":null,"code":"import './slicedToArray-4e274c67.js';\nimport './unsupportedIterableToArray-137e449b.js';\nimport React, { useCallback } from 'react';\nimport './_commonjsHelpers-97e6d7b1.js';\nimport { P as PropTypes } from './index-097535f1.js';\nimport { _ as _defineProperty } from './defineProperty-a0480c32.js';\nimport './toConsumableArray-127424c2.js';\nimport _styled from 'styled-components';\nimport './getPrototypeOf-b96da1e1.js';\nimport './color.js';\nimport './components.js';\nimport './contains-component.js';\nimport './css.js';\nimport './dayjs.min-e57fb69a.js';\nimport './date.js';\nimport './miscellaneous.js';\nimport { warnOnce } from './environment.js';\nimport './font.js';\nimport './math-e6d0e93a.js';\nimport './characters.js';\nimport './format.js';\nimport './keycodes.js';\nimport './url.js';\nimport './web3.js';\nimport { RADIUS, GU } from './constants.js';\nimport './breakpoints.js';\nimport './springs.js';\nimport { textStyle } from './text-styles.js';\nimport './theme-dark.js';\nimport './theme-light.js';\nimport { useTheme } from './Theme.js';\nimport { _ as _extends } from './extends-db4f0c26.js';\nimport { _ as _objectWithoutProperties } from './objectWithoutProperties-234758e1.js';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar _StyledInput = _styled(\"input\").withConfig({\n  displayName: \"TextInput___StyledInput\",\n  componentId: \"gngg3n-0\"\n})([\"width:\", \";height:\", \"px;padding:0 \", \"px;background:\", \";border:1px solid \", \";color:\", \";border-radius:\", \"px;appearance:none;\", \";\", \" &:focus{outline:none;border-color:\", \";}&:read-only{color:\", \";border-color:\", \";}&::placeholder{color:\", \";opacity:1;}&:invalid{box-shadow:none;}\"], function (_ref) {\n  var wide = _ref.wide;\n  return wide ? '100%' : 'auto';\n}, function (p) {\n  return p._css;\n}, function (p) {\n  return p._css2;\n}, function (p) {\n  return p._css3;\n}, function (p) {\n  return p._css4;\n}, function (p) {\n  return p._css5;\n}, RADIUS, function (p) {\n  return p._css6;\n}, function (p) {\n  return p._css7;\n}, function (p) {\n  return p._css8;\n}, function (p) {\n  return p._css9;\n}, function (p) {\n  return p._css10;\n}, function (p) {\n  return p._css11;\n});\n\nvar TextInput = React.forwardRef(function (_ref2, ref) {\n  var autofocus = _ref2.autofocus,\n      multiline = _ref2.multiline,\n      type = _ref2.type,\n      props = _objectWithoutProperties(_ref2, [\"autofocus\", \"multiline\", \"type\"]);\n\n  var theme = useTheme();\n  var handleRef = useCallback(function (element) {\n    if (ref) {\n      ref.current = element;\n    }\n\n    if (autofocus && element) {\n      element.focus();\n    }\n  }, [autofocus, ref]);\n  return /*#__PURE__*/React.createElement(_StyledInput, _extends({\n    ref: handleRef,\n    as: multiline ? 'textarea' : 'input',\n    type: multiline ? undefined : type\n  }, props, {\n    _css: 5 * GU,\n    _css2: 1.5 * GU,\n    _css3: theme.surface,\n    _css4: theme.border,\n    _css5: theme.surfaceContent,\n    _css6: textStyle('body3'),\n    _css7: multiline ? \"\\n              height: auto;\\n              padding: \".concat(1 * GU, \"px \").concat(1.5 * GU, \"px;\\n              resize: vertical;\\n            \") : '',\n    _css8: theme.selected,\n    _css9: theme.hint,\n    _css10: theme.border,\n    _css11: theme.hint\n  }));\n});\n\nvar _StyledTextInput = _styled(TextInput).withConfig({\n  displayName: \"TextInput___StyledTextInput\",\n  componentId: \"gngg3n-1\"\n})([\"\", \":\", \"px;\"], function (p) {\n  return p._css13;\n}, function (p) {\n  return p._css14;\n});\n\nTextInput.propTypes = {\n  autofocus: PropTypes.bool,\n  multiline: PropTypes.bool,\n  required: PropTypes.bool,\n  type: PropTypes.string\n};\nTextInput.defaultProps = {\n  autofocus: false,\n  multiline: false,\n  required: false,\n  type: 'text'\n}; // Text input wrapped to allow adornments\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"TextInput___StyledDiv\",\n  componentId: \"gngg3n-2\"\n})([\"display:inline-flex;position:relative;width:\", \";\"], function (p) {\n  return p._css12;\n});\n\nvar _StyledDiv2 = _styled(\"div\").withConfig({\n  displayName: \"TextInput___StyledDiv2\",\n  componentId: \"gngg3n-3\"\n})([\"position:absolute;top:0;bottom:0;height:100%;\", \":\", \"px;display:flex;align-items:center;justify-content:center;color:\", \";\"], function (p) {\n  return p._css15;\n}, function (p) {\n  return p._css16;\n}, function (p) {\n  return p._css17;\n});\n\nvar WrapperTextInput = React.forwardRef(function (_ref3, ref) {\n  var adornment = _ref3.adornment,\n      adornmentPosition = _ref3.adornmentPosition,\n      _ref3$adornmentSettin = _ref3.adornmentSettings,\n      _ref3$adornmentSettin2 = _ref3$adornmentSettin.width,\n      adornmentWidth = _ref3$adornmentSettin2 === void 0 ? 36 : _ref3$adornmentSettin2,\n      _ref3$adornmentSettin3 = _ref3$adornmentSettin.padding,\n      adornmentPadding = _ref3$adornmentSettin3 === void 0 ? 4 : _ref3$adornmentSettin3,\n      props = _objectWithoutProperties(_ref3, [\"adornment\", \"adornmentPosition\", \"adornmentSettings\"]);\n\n  var theme = useTheme();\n\n  if (!adornment) {\n    return /*#__PURE__*/React.createElement(TextInput, _extends({\n      ref: ref\n    }, props));\n  }\n\n  return /*#__PURE__*/React.createElement(_StyledDiv, {\n    _css12: props.wide ? '100%' : 'max-content'\n  }, /*#__PURE__*/React.createElement(_StyledTextInput, _extends({\n    ref: ref\n  }, props, {\n    _css13: adornmentPosition === 'end' ? 'padding-right' : 'padding-left',\n    _css14: adornmentWidth - adornmentPadding * 2\n  })), /*#__PURE__*/React.createElement(_StyledDiv2, {\n    _css15: adornmentPosition === 'end' ? 'right' : 'left',\n    _css16: adornmentPadding,\n    _css17: theme.surfaceContentSecondary\n  }, adornment));\n});\nWrapperTextInput.propTypes = _objectSpread({}, TextInput.propTypes, {\n  adornment: PropTypes.node,\n  adornmentPosition: PropTypes.oneOf(['start', 'end']),\n  adornmentSettings: PropTypes.shape({\n    width: PropTypes.number,\n    padding: PropTypes.number\n  })\n});\nWrapperTextInput.defaultProps = _objectSpread({}, TextInput.defaultProps, {\n  adornment: null,\n  adornmentPosition: 'start',\n  adornmentSettings: {}\n}); // <input type=number> (only for compat)\n\nfunction TextInputNumber(props) {\n  warnOnce('TextInputNumber', 'TextInputNumber is deprecated. Please use TextInput instead.');\n  return /*#__PURE__*/React.createElement(TextInput, _extends({\n    type: \"number\"\n  }, props));\n} // Multiline input (textarea element)\n\n\nfunction TextInputMultiline(props) {\n  return /*#__PURE__*/React.createElement(TextInput, _extends({\n    multiline: true\n  }, props));\n}\n\nTextInputMultiline.propTypes = {\n  required: PropTypes.bool\n};\nTextInputMultiline.defaultProps = {\n  required: false\n};\nWrapperTextInput.Number = TextInputNumber;\nWrapperTextInput.Multiline = TextInputMultiline;\nexport default WrapperTextInput;","map":{"version":3,"sources":["../../src/components/Input/TextInput.js"],"names":["TextInput","autofocus","multiline","type","props","theme","useTheme","handleRef","useCallback","ref","element","wide","RADIUS","textStyle","hint","PropTypes","required","string","WrapperTextInput","adornment","adornmentPosition","adornmentSettings","width","adornmentWidth","padding","adornmentPadding","surfaceContentSecondary","number","warnOnce","TextInputMultiline","bool"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '../../theme'\nimport { warnOnce } from '../../utils'\nimport { textStyle, GU, RADIUS } from '../../style'\n\n// Simple text input\nconst TextInput = React.forwardRef(\n  ({ autofocus, multiline, type, ...props }, ref) => {\n    const theme = useTheme()\n\n    const handleRef = useCallback(\n      element => {\n        if (ref) {\n          ref.current = element\n        }\n        if (autofocus && element) {\n          element.focus()\n        }\n      },\n      [autofocus, ref]\n    )\n\n    return (\n      <input\n        ref={handleRef}\n        as={multiline ? 'textarea' : 'input'}\n        type={multiline ? undefined : type}\n        {...props}\n        css={`\n          width: ${({ wide }) => (wide ? '100%' : 'auto')};\n          height: ${5 * GU}px;\n          padding: 0 ${1.5 * GU}px;\n          background: ${theme.surface};\n          border: 1px solid ${theme.border};\n          color: ${theme.surfaceContent};\n          border-radius: ${RADIUS}px;\n          appearance: none;\n          ${textStyle('body3')};\n\n          ${multiline\n            ? `\n              height: auto;\n              padding: ${1 * GU}px ${1.5 * GU}px;\n              resize: vertical;\n            `\n            : ''}\n\n          &:focus {\n            outline: none;\n            border-color: ${theme.selected};\n          }\n\n          &:read-only {\n            color: ${theme.hint};\n            border-color: ${theme.border};\n          }\n\n          &::placeholder {\n            color: ${theme.hint};\n            opacity: 1;\n          }\n\n          &:invalid {\n            box-shadow: none;\n          }\n        `}\n      />\n    )\n  }\n)\n\nTextInput.propTypes = {\n  autofocus: PropTypes.bool,\n  multiline: PropTypes.bool,\n  required: PropTypes.bool,\n  type: PropTypes.string,\n}\n\nTextInput.defaultProps = {\n  autofocus: false,\n  multiline: false,\n  required: false,\n  type: 'text',\n}\n\n// Text input wrapped to allow adornments\nconst WrapperTextInput = React.forwardRef(\n  (\n    {\n      adornment,\n      adornmentPosition,\n      adornmentSettings: {\n        width: adornmentWidth = 36,\n        padding: adornmentPadding = 4,\n      },\n      ...props\n    },\n    ref\n  ) => {\n    const theme = useTheme()\n    if (!adornment) {\n      return <TextInput ref={ref} {...props} />\n    }\n    return (\n      <div\n        css={`\n          display: inline-flex;\n          position: relative;\n          width: ${props.wide ? '100%' : 'max-content'};\n        `}\n      >\n        <TextInput\n          ref={ref}\n          css={`\n            ${adornmentPosition === 'end'\n              ? 'padding-right'\n              : 'padding-left'}: ${adornmentWidth - adornmentPadding * 2}px;\n          `}\n          {...props}\n        />\n        <div\n          css={`\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            height: 100%;\n            ${adornmentPosition === 'end'\n              ? 'right'\n              : 'left'}: ${adornmentPadding}px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: ${theme.surfaceContentSecondary};\n          `}\n        >\n          {adornment}\n        </div>\n      </div>\n    )\n  }\n)\n\nWrapperTextInput.propTypes = {\n  ...TextInput.propTypes,\n  adornment: PropTypes.node,\n  adornmentPosition: PropTypes.oneOf(['start', 'end']),\n  adornmentSettings: PropTypes.shape({\n    width: PropTypes.number,\n    padding: PropTypes.number,\n  }),\n}\n\nWrapperTextInput.defaultProps = {\n  ...TextInput.defaultProps,\n  adornment: null,\n  adornmentPosition: 'start',\n  adornmentSettings: {},\n}\n\n// <input type=number> (only for compat)\nfunction TextInputNumber(props) {\n  warnOnce(\n    'TextInputNumber',\n    'TextInputNumber is deprecated. Please use TextInput instead.'\n  )\n  return <TextInput type=\"number\" {...props} />\n}\n\n// Multiline input (textarea element)\nfunction TextInputMultiline(props) {\n  return <TextInput multiline {...props} />\n}\n\nTextInputMultiline.propTypes = {\n  required: PropTypes.bool,\n}\nTextInputMultiline.defaultProps = {\n  required: false,\n}\n\nWrapperTextInput.Number = TextInputNumber\nWrapperTextInput.Multiline = TextInputMultiline\n\nexport default WrapperTextInput\n"]},"metadata":{},"sourceType":"module"}