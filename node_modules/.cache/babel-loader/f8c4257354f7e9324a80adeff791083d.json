{"ast":null,"code":"import React from 'react';\nimport './_commonjsHelpers-97e6d7b1.js';\nimport { P as PropTypes } from './index-097535f1.js';\nimport { _ as _defineProperty } from './defineProperty-a0480c32.js';\nimport { _ as _inherits, a as _createClass, b as _classCallCheck, e as _assertThisInitialized, c as _getPrototypeOf, d as _possibleConstructorReturn } from './getPrototypeOf-b96da1e1.js';\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n} // supporting it yet.\n//\n// It follows the Chrome implementation, checking for a pointer device rather\n// than a keyboard event.\n//\n// Resources:\n//  - https://caniuse.com/#search=%3Afocus-visible\n//  - https://github.com/WICG/focus-visible/issues/88#issuecomment-363227219\n//  - https://chromium-review.googlesource.com/c/chromium/src/+/897002<Paste>\n//\n\n\nvar FocusVisible = /*#__PURE__*/function (_React$Component) {\n  _inherits(FocusVisible, _React$Component);\n\n  var _super = _createSuper(FocusVisible);\n\n  function FocusVisible() {\n    var _this;\n\n    _classCallCheck(this, FocusVisible);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_element\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"_document\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      focusVisible: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePointerEvent\", function (e) {\n      _this._pointerActive = true;\n      _this._timer = setTimeout(function () {\n        _this._pointerActive = false;\n      }, 0);\n\n      if (_this.state.focusVisible) {\n        _this.setState({\n          focusVisible: false\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function () {\n      _this.setState({\n        focusVisible: !_this._pointerActive\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(FocusVisible, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // `document` was previously set as a state entry, which was having the\n      // advantages of keeping track of it, and also triggering a rerender to\n      // remove the injected span.\n      //\n      // The issue with this approach is that the component can get unmounted\n      // before the state gets updated (e.g. in case of an error in the tree),\n      // preventing to remove the event listeners.\n      //\n      // this._document is now set on the instance directly, and\n      // this.forceUpdate() is used to trigger the second render needed to remove\n      // the injected span.\n      this._document = this._element.current.ownerDocument;\n\n      this._document.addEventListener('mousedown', this.handlePointerEvent);\n\n      this._document.addEventListener('mouseup', this.handlePointerEvent);\n\n      this._document.addEventListener('touchstart', this.handlePointerEvent);\n\n      this._document.addEventListener('touchend', this.handlePointerEvent);\n\n      this.forceUpdate();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._document) {\n        this._document.removeEventListener('mousedown', this.handlePointerEvent);\n\n        this._document.removeEventListener('mouseup', this.handlePointerEvent);\n\n        this._document.removeEventListener('touchstart', this.handlePointerEvent);\n\n        this._document.removeEventListener('touchend', this.handlePointerEvent);\n      }\n    } // It doesn’t seem to be specified, but pointer-related events happen before\n    // the focus-related events on every modern browser.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var focusVisible = this.state.focusVisible;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.children({\n        focusVisible: focusVisible,\n        onFocus: this.handleFocus\n      }), !this._document && /*#__PURE__*/React.createElement(\"span\", {\n        ref: this._element\n      }));\n    }\n  }]);\n\n  return FocusVisible;\n}(React.Component);\n\n_defineProperty(FocusVisible, \"propTypes\", {\n  // children is called with an object containing two entries:\n  //   - focusVisible represents the visibility of the focus (boolean).\n  //   - onFocus() need to be called when the target element is focused.\n  children: PropTypes.func.isRequired\n});\n\nexport default FocusVisible;","map":{"version":3,"sources":["../../src/components/FocusVisible/FocusVisible.js"],"names":["FocusVisible","React","Component","children","PropTypes","isRequired","focusVisible","setTimeout","_pointerActive","onFocus","handleFocus","_element"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMA,YAAAA,GAAAA,aAAAA,UAAAA,gBAAAA,EAAAA;;;;;;;;;;;;;;;;+DAOOC,KAAK,CAALA,SAAAA,E;;gEACC,I;;4DACJ;AACNK,MAAAA,YAAY,EAAE;AADR,K;;yEAgCa,UAAA,CAAA,EAAK;AACxB,MAAA,KAAA,CAAA,cAAA,GAAA,IAAA;AACA,MAAA,KAAA,CAAA,MAAA,GAAcC,UAAU,CAAC,YAAM;AAC7B,QAAA,KAAA,CAAA,cAAA,GAAA,KAAA;AADsB,OAAA,EAAxB,CAAwB,CAAxB;;AAGA,UAAI,KAAA,CAAA,KAAA,CAAJ,YAAA,EAA6B;AAC3B,QAAA,KAAA,CAAA,QAAA,CAAc;AAAED,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACD;AACF,K;;kEAEa,YAAM;AAClB,MAAA,KAAA,CAAA,QAAA,CAAc;AAAEA,QAAAA,YAAY,EAAE,CAAC,KAAA,CAAKE;AAAtB,OAAd;AACD,K;;;;;;;wCAzCmB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAA,SAAA,GAAiB,KAAA,QAAA,CAAA,OAAA,CAAjB,aAAA;;AACA,WAAA,SAAA,CAAA,gBAAA,CAAA,WAAA,EAA6C,KAA7C,kBAAA;;AACA,WAAA,SAAA,CAAA,gBAAA,CAAA,SAAA,EAA2C,KAA3C,kBAAA;;AACA,WAAA,SAAA,CAAA,gBAAA,CAAA,YAAA,EAA8C,KAA9C,kBAAA;;AACA,WAAA,SAAA,CAAA,gBAAA,CAAA,UAAA,EAA4C,KAA5C,kBAAA;;AACA,WAAA,WAAA;AACD;;;2CACsB;AACrB,UAAI,KAAJ,SAAA,EAAoB;AAClB,aAAA,SAAA,CAAA,mBAAA,CAAA,WAAA,EAAgD,KAAhD,kBAAA;;AACA,aAAA,SAAA,CAAA,mBAAA,CAAA,SAAA,EAA8C,KAA9C,kBAAA;;AACA,aAAA,SAAA,CAAA,mBAAA,CAAA,YAAA,EAAiD,KAAjD,kBAAA;;AACA,aAAA,SAAA,CAAA,mBAAA,CAAA,UAAA,EAA+C,KAA/C,kBAAA;AACD;AACF,K,CAAA;AAED;;;;6BAcS;AAAA,UACCF,YADD,GACkB,KADlB,KACkB,CADlB,YAAA;AAEP,aAAA,aACE,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA,IAAA,EACG,KAAA,KAAA,CAAA,QAAA,CAAoB;AAAEA,QAAAA,YAAY,EAAd,YAAA;AAAgBG,QAAAA,OAAO,EAAE,KAAKC;AAA9B,OAApB,CADH,EAEG,CAAC,KAAD,SAAA,IAAA,aAAmB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,GAAG,EAAE,KAAKC;AAAhB,OAAA,CAFtB,CADF;AAMD;;;;CA9DGX,CAAqBC,KAAK,CAACC,SAA3BF,C;;gBAAAA,Y,EAAAA,W,EACe;AACjB;AACA;AACA;AACAG,EAAAA,QAAQ,EAAEC,SAAS,CAATA,IAAAA,CAAeC;AAJR,C","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n// Implements a behavior similar to :focus-visible for browsers that are not\n// supporting it yet.\n//\n// It follows the Chrome implementation, checking for a pointer device rather\n// than a keyboard event.\n//\n// Resources:\n//  - https://caniuse.com/#search=%3Afocus-visible\n//  - https://github.com/WICG/focus-visible/issues/88#issuecomment-363227219\n//  - https://chromium-review.googlesource.com/c/chromium/src/+/897002<Paste>\n//\nclass FocusVisible extends React.Component {\n  static propTypes = {\n    // children is called with an object containing two entries:\n    //   - focusVisible represents the visibility of the focus (boolean).\n    //   - onFocus() need to be called when the target element is focused.\n    children: PropTypes.func.isRequired,\n  }\n  _element = React.createRef()\n  _document = null\n  state = {\n    focusVisible: false,\n  }\n  componentDidMount() {\n    // `document` was previously set as a state entry, which was having the\n    // advantages of keeping track of it, and also triggering a rerender to\n    // remove the injected span.\n    //\n    // The issue with this approach is that the component can get unmounted\n    // before the state gets updated (e.g. in case of an error in the tree),\n    // preventing to remove the event listeners.\n    //\n    // this._document is now set on the instance directly, and\n    // this.forceUpdate() is used to trigger the second render needed to remove\n    // the injected span.\n    this._document = this._element.current.ownerDocument\n    this._document.addEventListener('mousedown', this.handlePointerEvent)\n    this._document.addEventListener('mouseup', this.handlePointerEvent)\n    this._document.addEventListener('touchstart', this.handlePointerEvent)\n    this._document.addEventListener('touchend', this.handlePointerEvent)\n    this.forceUpdate()\n  }\n  componentWillUnmount() {\n    if (this._document) {\n      this._document.removeEventListener('mousedown', this.handlePointerEvent)\n      this._document.removeEventListener('mouseup', this.handlePointerEvent)\n      this._document.removeEventListener('touchstart', this.handlePointerEvent)\n      this._document.removeEventListener('touchend', this.handlePointerEvent)\n    }\n  }\n  // It doesn’t seem to be specified, but pointer-related events happen before\n  // the focus-related events on every modern browser.\n  handlePointerEvent = e => {\n    this._pointerActive = true\n    this._timer = setTimeout(() => {\n      this._pointerActive = false\n    }, 0)\n    if (this.state.focusVisible) {\n      this.setState({ focusVisible: false })\n    }\n  }\n  // This is passed to `children()`, and called from the outside.\n  handleFocus = () => {\n    this.setState({ focusVisible: !this._pointerActive })\n  }\n  render() {\n    const { focusVisible } = this.state\n    return (\n      <React.Fragment>\n        {this.props.children({ focusVisible, onFocus: this.handleFocus })}\n        {!this._document && <span ref={this._element} />}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default FocusVisible\n"]},"metadata":{},"sourceType":"module"}