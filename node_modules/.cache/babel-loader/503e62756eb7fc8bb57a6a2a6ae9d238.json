{"ast":null,"code":"import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport { Dao, UniswapV2Router02 } from '../constants/contracts';\nimport { QSD, UNI, DAI, QSDS } from '../constants/tokens';\nimport { POOL_EXIT_LOCKUP_EPOCHS } from '../constants/values';\nimport { formatBN, toTokenUnitsBN, toFloat } from './number';\nimport { getPoolLPAddress } from './pool';\n\nconst oracleAbi = require('../constants/abi/Oracle.json');\n\nconst dollarAbi = require('../constants/abi/Dollar.json');\n\nconst daoAbi = require('../constants/abi/Dao.json');\n\nconst poolAbi = require('../constants/abi/Pool.json');\n\nconst poolBondingAbi = require('../constants/abi/PoolBonding.json');\n\nconst uniswapRouterAbi = require('../constants/abi/UniswapV2Router02.json');\n\nconst uniswapPairAbi = require('../constants/abi/UniswapV2Pair.json');\n\nlet web3; // eslint-disable-next-line no-undef\n\nif (window.ethereum !== undefined) {\n  // eslint-disable-next-line no-undef\n  web3 = new Web3(ethereum);\n}\n/**\n *\n * @param {string} token address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\n\nexport const getTokenBalance = async (token, account) => {\n  if (account === '') return '0';\n  const tokenContract = new web3.eth.Contract(dollarAbi, token);\n  return tokenContract.methods.balanceOf(account).call();\n};\nexport const getTokenTotalSupply = async token => {\n  const tokenContract = new web3.eth.Contract(dollarAbi, token);\n  return tokenContract.methods.totalSupply().call();\n};\n/**\n *\n * @param {string} token\n * @param {string} account\n * @param {string} spender\n * @return {Promise<string>}\n */\n\nexport const getTokenAllowance = async (token, account, spender) => {\n  const tokenContract = new web3.eth.Contract(dollarAbi, token);\n  return tokenContract.methods.allowance(account, spender).call();\n}; // DÃ¸llar Protocol\n\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getBalanceBonded = async (dao, account) => {\n  if (account === '') return '0';\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.balanceOfBonded(account).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getBalanceOfStaged = async (dao, account) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.balanceOfStaged(account).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getStatusOf = async (dao, account) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.statusOf(account).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getFluidUntil = async (dao, account) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.fluidUntil(account).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getLockedUntil = async (dao, account) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.lockedUntil(account).call();\n};\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\n\nexport const getEpoch = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.epoch().call();\n};\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\n\nexport const getEpochTime = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.epochTime().call();\n};\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\n\nexport const getTotalDebt = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.totalDebt().call();\n};\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\n\nexport const getTotalClaimable = async dao => {\n  const poolContract = new web3.eth.Contract(poolAbi, dao);\n  return poolContract.methods.totalClaimable().call();\n};\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\n\nexport const getTotalRewarded = async dao => {\n  const poolContract = new web3.eth.Contract(poolAbi, dao);\n  return poolContract.methods.totalRewarded().call();\n};\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\n\nexport const getTotalCoupons = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.totalCoupons().call();\n};\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\n\nexport const getTotalCouponsUnderlying = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.totalCouponUnderlying().call();\n};\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\n\nexport const getTotalBonded = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.totalBonded().call();\n};\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\n\nexport const getTotalStaged = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.totalStaged().call();\n};\n/**\n *\n * @param {string} dao address\n * @param {number} epoch number\n * @return {Promise<string>}\n */\n\nexport const getTotalBondedAt = async (dao, epoch) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.totalBondedAt(epoch).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} candidate address\n * @return {Promise<string>}\n */\n\nexport const getApproveFor = async (dao, candidate) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.approveFor(candidate).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} candidate address\n * @return {Promise<string>}\n */\n\nexport const getRejectFor = async (dao, candidate) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.rejectFor(candidate).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} candidate address\n * @return {Promise<string>}\n */\n\nexport const getStartFor = async (dao, candidate) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.startFor(candidate).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} candidate address\n * @return {Promise<string>}\n */\n\nexport const getPeriodFor = async (dao, candidate) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.periodFor(candidate).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} candidate address\n * @return {Promise<boolean>}\n */\n\nexport const getIsInitialized = async (dao, candidate) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.isInitialized(candidate).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @param {string} candidate address\n * @return {Promise<string>}\n */\n\nexport const getRecordedVote = async (dao, account, candidate) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.recordedVote(account, candidate).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @param {number} epoch number\n * @return {Promise<string>}\n */\n\nexport const getBalanceOfCoupons = async (dao, account, epoch) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.balanceOfCoupons(account, epoch).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @param {number[]} epochs number[]\n * @return {Promise<string[]>}\n */\n\nexport const getBatchBalanceOfCoupons = async (dao, account, epochs) => {\n  const calls = epochs.map(epoch => getBalanceOfCoupons(dao, account, epoch));\n  return Promise.all(calls);\n};\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @param {number} epoch number\n * @return {Promise<string>}\n */\n\nexport const getBalanceOfCouponsUnderlying = async (dao, account, epoch) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.balanceOfCouponUnderlying(account, epoch).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @param {number[]} epochs number[]\n * @return {Promise<string[]>}\n */\n\nexport const getBatchBalanceOfCouponsUnderlying = async (dao, account, epochs) => {\n  const calls = epochs.map(epoch => getBalanceOfCouponsUnderlying(dao, account, epoch));\n  return Promise.all(calls);\n};\n/**\n *\n * @param {string} dao address\n * @param {number} epoch address\n * @return {Promise<string>}\n */\n\nexport const getOutstandingCoupons = async (dao, epoch) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.outstandingCoupons(epoch).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {number} epoch number\n * @return {Promise<string>}\n */\n\nexport const getCouponsExpiration = async (dao, epoch) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.couponsExpiration(epoch).call();\n};\n/**\n *\n * @param {string} dao address\n * @param {number[]} epochs number[]\n * @return {Promise<string[]>}\n */\n\nexport const getBatchCouponsExpiration = async (dao, epochs) => {\n  const calls = epochs.map(epoch => getCouponsExpiration(dao, epoch));\n  return Promise.all(calls);\n};\n/**\n *\n * @param {string} dao address\n * @param {string|BigNumber} amount uint256\n * @return {Promise<string>}\n */\n\nexport const getCouponPremium = async (dao, amount) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.couponPremium(new BigNumber(amount).toFixed()).call();\n};\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\n\nexport const getImplementation = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.implementation().call();\n};\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\n\nexport const getPoolBonding = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.poolBonding().call();\n};\nexport const getPoolLP = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.poolLP().call();\n};\nexport const getPoolGov = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.poolGov().call();\n};\n/**\n *\n * @param {string} dao\n * @param {string} account\n * @return {Promise<any[]>}\n */\n\nexport const getCouponEpochs = async (dao, account) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  const purchaseP = daoContract.getPastEvents('CouponPurchase', {\n    filter: {\n      account\n    },\n    fromBlock: 0\n  });\n  const transferP = daoContract.getPastEvents('CouponTransfer', {\n    filter: {\n      to: account\n    },\n    fromBlock: 0\n  });\n  const [bought, given] = await Promise.all([purchaseP, transferP]);\n  const events = bought.map(e => ({\n    epoch: e.returnValues.epoch,\n    amount: e.returnValues.couponAmount\n  })).concat(given.map(e => ({\n    epoch: e.returnValues.epoch,\n    amount: 0\n  })));\n  const couponEpochs = [...events.reduce((map, event) => {\n    const {\n      epoch,\n      amount\n    } = event;\n    const prev = map.get(epoch);\n\n    if (prev) {\n      map.set(epoch, {\n        epoch,\n        coupons: prev.coupons.plus(new BigNumber(amount))\n      });\n    } else {\n      map.set(epoch, {\n        epoch,\n        coupons: new BigNumber(amount)\n      });\n    }\n\n    return map;\n  }, new Map()).values()];\n  return couponEpochs.sort((a, b) => a - b);\n};\n/**\n *\n * @param {string} dao\n * @return {Promise<any[]>}\n */\n\nexport const getAllProposals = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  const payload = (await daoContract.getPastEvents('Proposal', {\n    fromBlock: 0\n  })).map(event => {\n    const prop = event.returnValues;\n    prop.blockNumber = event.blockNumber;\n    return prop;\n  });\n  return payload.sort((a, b) => b.blockNumber - a.blockNumber);\n};\n/**\n *\n * @param {string} dao\n * @return {Promise<any[]>}\n */\n\nexport const getAllRegulations = async dao => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  const increaseP = daoContract.getPastEvents('SupplyIncrease', {\n    fromBlock: 0\n  });\n  const decreaseP = daoContract.getPastEvents('SupplyDecrease', {\n    fromBlock: 0\n  });\n  const neutralP = daoContract.getPastEvents('SupplyNeutral', {\n    fromBlock: 0\n  });\n  const [increase, decrease, neutral] = await Promise.all([increaseP, decreaseP, neutralP]);\n  const events = increase.map(e => ({\n    type: 'INCREASE',\n    data: e.returnValues\n  })).concat(decrease.map(e => ({\n    type: 'DECREASE',\n    data: e.returnValues\n  }))).concat(neutral.map(e => ({\n    type: 'NEUTRAL',\n    data: e.returnValues\n  })));\n  return events.sort((a, b) => b.data.epoch - a.data.epoch);\n}; // Uniswap Protocol\n\nexport const getCost = async amount => {\n  const exchange = new web3.eth.Contract(uniswapRouterAbi, UniswapV2Router02); // eslint-disable-next-line no-unused-vars\n\n  const [inputAmount, _] = await exchange.methods.getAmountsIn(new BigNumber(amount).toFixed(), [DAI.addr, QSD.addr]).call();\n  return inputAmount;\n};\nexport const getProceeds = async amount => {\n  const exchange = new web3.eth.Contract(uniswapRouterAbi, UniswapV2Router02); // eslint-disable-next-line no-unused-vars\n\n  const [_, outputAmount] = await exchange.methods.getAmountsOut(new BigNumber(amount).toFixed(), [QSD.addr, DAI.addr]).call();\n  return outputAmount;\n};\nexport const getReserves = async () => {\n  const exchange = new web3.eth.Contract(uniswapPairAbi, UNI.addr);\n  return exchange.methods.getReserves().call();\n};\nexport const getInstantaneousQSDPrice = async () => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const token0Balance = new BigNumber(reserve.reserve0);\n  const token1Balance = new BigNumber(reserve.reserve1);\n\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return token0Balance.multipliedBy(new BigNumber(10).pow(18)).dividedBy(token1Balance);\n  }\n\n  return token1Balance.multipliedBy(new BigNumber(10).pow(18)).dividedBy(token0Balance);\n};\nexport const getUniswapLiquidity = async () => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const token0Balance = new BigNumber(reserve.reserve0);\n  const token1Balance = new BigNumber(reserve.reserve1);\n\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return {\n      dai: token0Balance,\n      qsd: token1Balance\n    };\n  }\n\n  return {\n    dai: token1Balance,\n    qsd: token0Balance\n  };\n};\nexport const getUserLPWallet = async user => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const uniTotalSupplyStr = await getTokenTotalSupply(UNI.addr);\n  const uniBondedSupplyStr = await getTokenBalance(UNI.addr, user);\n  const token0Balance = toFloat(toTokenUnitsBN(reserve.reserve0, 18));\n  const token1Balance = toFloat(toTokenUnitsBN(reserve.reserve1, 18));\n  const ratio = toFloat(toTokenUnitsBN(uniBondedSupplyStr, 18)) / toFloat(toTokenUnitsBN(uniTotalSupplyStr, 18));\n\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return {\n      dai: token0Balance * ratio,\n      qsd: token1Balance * ratio\n    };\n  }\n\n  return {\n    dai: token1Balance * ratio,\n    qsd: token0Balance * ratio\n  };\n};\nexport const getUserLPBonded = async user => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const uniTotalSupplyStr = await getTokenTotalSupply(UNI.addr);\n  const uniBondedSupplyStr = await getPoolBalanceOfBonded(await getPoolLPAddress(), user);\n  const token0Balance = toFloat(toTokenUnitsBN(reserve.reserve0, 18));\n  const token1Balance = toFloat(toTokenUnitsBN(reserve.reserve1, 18));\n  const ratio = toFloat(toTokenUnitsBN(uniBondedSupplyStr, 18)) / toFloat(toTokenUnitsBN(uniTotalSupplyStr, 18));\n\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return {\n      dai: token0Balance * ratio,\n      qsd: token1Balance * ratio\n    };\n  }\n\n  return {\n    dai: token1Balance * ratio,\n    qsd: token0Balance * ratio\n  };\n};\nexport const getUserLPStaged = async user => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const uniTotalSupplyStr = await getTokenTotalSupply(UNI.addr);\n  const uniBondedSupplyStr = await getPoolBalanceOfStaged(await getPoolLPAddress(), user);\n  const token0Balance = toFloat(toTokenUnitsBN(reserve.reserve0, 18));\n  const token1Balance = toFloat(toTokenUnitsBN(reserve.reserve1, 18));\n  const ratio = toFloat(toTokenUnitsBN(uniBondedSupplyStr, 18)) / toFloat(toTokenUnitsBN(uniTotalSupplyStr, 18));\n\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return {\n      dai: token0Balance * ratio,\n      qsd: token1Balance * ratio\n    };\n  }\n\n  return {\n    dai: token1Balance * ratio,\n    qsd: token0Balance * ratio\n  };\n};\nexport const getLPStagedLiquidity = async () => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const uniTotalSupplyStr = await getTokenTotalSupply(UNI.addr);\n  const uniBondedSupplyStr = await getPoolTotalStaged(await getPoolLPAddress());\n  const token0Balance = toFloat(toTokenUnitsBN(reserve.reserve0, 18));\n  const token1Balance = toFloat(toTokenUnitsBN(reserve.reserve1, 18));\n  const ratio = toFloat(toTokenUnitsBN(uniBondedSupplyStr, 18)) / toFloat(toTokenUnitsBN(uniTotalSupplyStr, 18));\n\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return {\n      dai: token0Balance * ratio,\n      qsd: token1Balance * ratio\n    };\n  }\n\n  return {\n    dai: token1Balance * ratio,\n    qsd: token0Balance * ratio\n  };\n};\nexport const getLPBondedLiquidity = async () => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const uniTotalSupplyStr = await getTokenTotalSupply(UNI.addr);\n  const uniBondedSupplyStr = await getPoolTotalBonded(await getPoolLPAddress());\n  const token0Balance = toFloat(toTokenUnitsBN(reserve.reserve0, 18));\n  const token1Balance = toFloat(toTokenUnitsBN(reserve.reserve1, 18));\n  const ratio = toFloat(toTokenUnitsBN(uniBondedSupplyStr, 18)) / toFloat(toTokenUnitsBN(uniTotalSupplyStr, 18));\n\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return {\n      dai: token0Balance * ratio,\n      qsd: token1Balance * ratio\n    };\n  }\n\n  return {\n    dai: token1Balance * ratio,\n    qsd: token0Balance * ratio\n  };\n};\nexport const getToken0 = async () => {\n  const exchange = new web3.eth.Contract(uniswapPairAbi, UNI.addr);\n  return exchange.methods.token0().call();\n}; // Pool\n\nexport const getPoolStatusOf = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.statusOf(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfBonded = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfBonded(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfStaged = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfStaged(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfRewarded = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfRewarded(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfClaimable = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfClaimable(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolTotalBonded = async pool => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.totalBonded().call();\n};\nexport const getPoolTotalStaged = async pool => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.totalStaged().call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolTotalRewarded1 = async pool => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.totalRewarded1().call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolTotalRewarded2 = async pool => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.totalRewarded2().call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolTotalClaimable1 = async pool => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.totalClaimable1().call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolTotalClaimable2 = async pool => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.totalClaimable2().call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfRewarded1 = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.balanceOfRewarded1(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfRewarded2 = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.balanceOfRewarded2(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfClaimable1 = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.balanceOfClaimable1(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfClaimable2 = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.balanceOfClaimable2(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolFluidUntil = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool); // no need to look back further than the pool lockup period\n\n  const blockNumber = await web3.eth.getBlockNumber();\n  const fromBlock = blockNumber - (POOL_EXIT_LOCKUP_EPOCHS + 1) * 8640;\n  const bondP = poolContract.getPastEvents('Bond', {\n    filter: {\n      account: account\n    },\n    fromBlock: fromBlock\n  });\n  const unbondP = poolContract.getPastEvents('Unbond', {\n    filter: {\n      account: account\n    },\n    fromBlock: fromBlock\n  });\n  const [bond, unbond] = await Promise.all([bondP, unbondP]);\n  const events = bond.map(e => e.returnValues).concat(unbond.map(e => e.returnValues));\n  const startEpoch = events.reduce((epoch, event) => {\n    if (epoch > event.start) return epoch;else return event.start;\n  }, 0); // these contract events report the start epoch as one more than the active\n  // epoch when the event is emitted, so we subtract 1 here to adjust\n\n  return (parseInt(startEpoch, 10) + POOL_EXIT_LOCKUP_EPOCHS - 1).toString();\n};\nexport const getDaoIsBootstrapping = async () => {\n  const epoch = await getEpoch(QSDS.addr);\n  const daoContract = new web3.eth.Contract(daoAbi, Dao);\n  const isBootstrapping = await daoContract.methods.bootstrappingAt(epoch).call();\n  return isBootstrapping;\n};\nexport const getExpansionAmount = async () => {\n  const price = await getTWAPPrice();\n  const isBootstrapping = await getDaoIsBootstrapping();\n  const totalSupplyStr = await getTokenTotalSupply(QSD.addr);\n  const totalSupply = toFloat(toTokenUnitsBN(totalSupplyStr, QSD.decimals)); // 5.4% max supply\n\n  const MAX_SUPPLY_EXPANSION = 0.054;\n\n  if (isBootstrapping) {\n    return totalSupply * MAX_SUPPLY_EXPANSION;\n  }\n\n  const delta = Math.min(price - 1, MAX_SUPPLY_EXPANSION);\n  const newSupply = totalSupply * delta;\n\n  if (price < 1) {\n    return 0;\n  }\n\n  return newSupply;\n};\nexport const getTWAPPrice = async () => {\n  const daoContract = new web3.eth.Contract(daoAbi, Dao);\n  const pairContract = new web3.eth.Contract(uniswapPairAbi, UNI.addr);\n  const oracleAddress = await daoContract.methods.oracle().call();\n  const oracleContract = new web3.eth.Contract(oracleAbi, oracleAddress); // Gets cumulative price\n  // eslint-disable-next-line\n\n  const cumulativePriceStr = await oracleContract.methods._cumulative().call(); // eslint-disable-next-line\n\n  const oracleTimestampStr = await oracleContract.methods._timestamp().call();\n  const cumulativePrice = parseFloat(formatBN(toTokenUnitsBN(cumulativePriceStr, 18), 2).split(',').join(''));\n  const oracleTimestamp = parseInt(oracleTimestampStr, 10);\n  const token0 = await pairContract.methods.token0().call();\n  const resp = await pairContract.methods.getReserves().call();\n  const blockTimestampLast = parseInt(resp.blockTimestampLast, 10);\n  const price0CumulativeLastStr = await pairContract.methods.price0CumulativeLast().call();\n  const price1CumulativeLastStr = await pairContract.methods.price1CumulativeLast().call();\n  const price0Cumulative = parseFloat(formatBN(toTokenUnitsBN(price0CumulativeLastStr, 18), 2).split(',').join(''));\n  const price1Cumulative = parseFloat(formatBN(toTokenUnitsBN(price1CumulativeLastStr, 18), 2).split(',').join(''));\n  const timeDelta = blockTimestampLast - oracleTimestamp;\n  const price0 = (price0Cumulative - cumulativePrice) / timeDelta * 1e18 / 2 ** 112;\n  const price1 = (price1Cumulative - cumulativePrice) / timeDelta * 1e18 / 2 ** 112;\n\n  if (token0.toLowerCase() === QSD.addr.toLowerCase()) {\n    return price0;\n  }\n\n  return price1;\n};","map":{"version":3,"sources":["/Users/J/crypto/dashboard/src/utils/infura.js"],"names":["Web3","BigNumber","Dao","UniswapV2Router02","QSD","UNI","DAI","QSDS","POOL_EXIT_LOCKUP_EPOCHS","formatBN","toTokenUnitsBN","toFloat","getPoolLPAddress","oracleAbi","require","dollarAbi","daoAbi","poolAbi","poolBondingAbi","uniswapRouterAbi","uniswapPairAbi","web3","window","ethereum","undefined","getTokenBalance","token","account","tokenContract","eth","Contract","methods","balanceOf","call","getTokenTotalSupply","totalSupply","getTokenAllowance","spender","allowance","getBalanceBonded","dao","daoContract","balanceOfBonded","getBalanceOfStaged","balanceOfStaged","getStatusOf","statusOf","getFluidUntil","fluidUntil","getLockedUntil","lockedUntil","getEpoch","epoch","getEpochTime","epochTime","getTotalDebt","totalDebt","getTotalClaimable","poolContract","totalClaimable","getTotalRewarded","totalRewarded","getTotalCoupons","totalCoupons","getTotalCouponsUnderlying","totalCouponUnderlying","getTotalBonded","totalBonded","getTotalStaged","totalStaged","getTotalBondedAt","totalBondedAt","getApproveFor","candidate","approveFor","getRejectFor","rejectFor","getStartFor","startFor","getPeriodFor","periodFor","getIsInitialized","isInitialized","getRecordedVote","recordedVote","getBalanceOfCoupons","balanceOfCoupons","getBatchBalanceOfCoupons","epochs","calls","map","Promise","all","getBalanceOfCouponsUnderlying","balanceOfCouponUnderlying","getBatchBalanceOfCouponsUnderlying","getOutstandingCoupons","outstandingCoupons","getCouponsExpiration","couponsExpiration","getBatchCouponsExpiration","getCouponPremium","amount","couponPremium","toFixed","getImplementation","implementation","getPoolBonding","poolBonding","getPoolLP","poolLP","getPoolGov","poolGov","getCouponEpochs","purchaseP","getPastEvents","filter","fromBlock","transferP","to","bought","given","events","e","returnValues","couponAmount","concat","couponEpochs","reduce","event","prev","get","set","coupons","plus","Map","values","sort","a","b","getAllProposals","payload","prop","blockNumber","getAllRegulations","increaseP","decreaseP","neutralP","increase","decrease","neutral","type","data","getCost","exchange","inputAmount","_","getAmountsIn","addr","getProceeds","outputAmount","getAmountsOut","getReserves","getInstantaneousQSDPrice","reserve","token0","getToken0","token0Balance","reserve0","token1Balance","reserve1","toLowerCase","multipliedBy","pow","dividedBy","getUniswapLiquidity","dai","qsd","getUserLPWallet","user","uniTotalSupplyStr","uniBondedSupplyStr","ratio","getUserLPBonded","getPoolBalanceOfBonded","getUserLPStaged","getPoolBalanceOfStaged","getLPStagedLiquidity","getPoolTotalStaged","getLPBondedLiquidity","getPoolTotalBonded","getPoolStatusOf","pool","getPoolBalanceOfRewarded","balanceOfRewarded","getPoolBalanceOfClaimable","balanceOfClaimable","getPoolTotalRewarded1","totalRewarded1","getPoolTotalRewarded2","totalRewarded2","getPoolTotalClaimable1","totalClaimable1","getPoolTotalClaimable2","totalClaimable2","getPoolBalanceOfRewarded1","balanceOfRewarded1","getPoolBalanceOfRewarded2","balanceOfRewarded2","getPoolBalanceOfClaimable1","balanceOfClaimable1","getPoolBalanceOfClaimable2","balanceOfClaimable2","getPoolFluidUntil","getBlockNumber","bondP","unbondP","bond","unbond","startEpoch","start","parseInt","toString","getDaoIsBootstrapping","isBootstrapping","bootstrappingAt","getExpansionAmount","price","getTWAPPrice","totalSupplyStr","decimals","MAX_SUPPLY_EXPANSION","delta","Math","min","newSupply","pairContract","oracleAddress","oracle","oracleContract","cumulativePriceStr","_cumulative","oracleTimestampStr","_timestamp","cumulativePrice","parseFloat","split","join","oracleTimestamp","resp","blockTimestampLast","price0CumulativeLastStr","price0CumulativeLast","price1CumulativeLastStr","price1CumulativeLast","price0Cumulative","price1Cumulative","timeDelta","price0","price1"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\n\nimport BigNumber from 'bignumber.js';\nimport { Dao, UniswapV2Router02 } from '../constants/contracts';\nimport { QSD, UNI, DAI, QSDS } from '../constants/tokens';\nimport { POOL_EXIT_LOCKUP_EPOCHS } from '../constants/values';\nimport { formatBN, toTokenUnitsBN, toFloat } from './number';\nimport { getPoolLPAddress } from './pool';\n\nconst oracleAbi = require('../constants/abi/Oracle.json');\nconst dollarAbi = require('../constants/abi/Dollar.json');\nconst daoAbi = require('../constants/abi/Dao.json');\nconst poolAbi = require('../constants/abi/Pool.json');\nconst poolBondingAbi = require('../constants/abi/PoolBonding.json');\nconst uniswapRouterAbi = require('../constants/abi/UniswapV2Router02.json');\nconst uniswapPairAbi = require('../constants/abi/UniswapV2Pair.json');\n\nlet web3;\n// eslint-disable-next-line no-undef\nif (window.ethereum !== undefined) {\n  // eslint-disable-next-line no-undef\n  web3 = new Web3(ethereum);\n}\n\n/**\n *\n * @param {string} token address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getTokenBalance = async (token, account) => {\n  if (account === '') return '0';\n  const tokenContract = new web3.eth.Contract(dollarAbi, token);\n  return tokenContract.methods.balanceOf(account).call();\n};\n\nexport const getTokenTotalSupply = async (token) => {\n  const tokenContract = new web3.eth.Contract(dollarAbi, token);\n  return tokenContract.methods.totalSupply().call();\n};\n\n/**\n *\n * @param {string} token\n * @param {string} account\n * @param {string} spender\n * @return {Promise<string>}\n */\nexport const getTokenAllowance = async (token, account, spender) => {\n  const tokenContract = new web3.eth.Contract(dollarAbi, token);\n  return tokenContract.methods.allowance(account, spender).call();\n};\n\n// DÃ¸llar Protocol\n\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getBalanceBonded = async (dao, account) => {\n  if (account === '') return '0';\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.balanceOfBonded(account).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getBalanceOfStaged = async (dao, account) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.balanceOfStaged(account).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getStatusOf = async (dao, account) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.statusOf(account).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getFluidUntil = async (dao, account) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.fluidUntil(account).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getLockedUntil = async (dao, account) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.lockedUntil(account).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\nexport const getEpoch = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.epoch().call();\n};\n\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\nexport const getEpochTime = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.epochTime().call();\n};\n\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\nexport const getTotalDebt = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.totalDebt().call();\n};\n\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\nexport const getTotalClaimable = async (dao) => {\n  const poolContract = new web3.eth.Contract(poolAbi, dao);\n  return poolContract.methods.totalClaimable().call();\n};\n\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\nexport const getTotalRewarded = async (dao) => {\n  const poolContract = new web3.eth.Contract(poolAbi, dao);\n  return poolContract.methods.totalRewarded().call();\n};\n\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\nexport const getTotalCoupons = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.totalCoupons().call();\n};\n\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\nexport const getTotalCouponsUnderlying = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.totalCouponUnderlying().call();\n};\n\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\nexport const getTotalBonded = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.totalBonded().call();\n};\n\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\nexport const getTotalStaged = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.totalStaged().call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {number} epoch number\n * @return {Promise<string>}\n */\nexport const getTotalBondedAt = async (dao, epoch) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.totalBondedAt(epoch).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} candidate address\n * @return {Promise<string>}\n */\nexport const getApproveFor = async (dao, candidate) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.approveFor(candidate).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} candidate address\n * @return {Promise<string>}\n */\nexport const getRejectFor = async (dao, candidate) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.rejectFor(candidate).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} candidate address\n * @return {Promise<string>}\n */\nexport const getStartFor = async (dao, candidate) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.startFor(candidate).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} candidate address\n * @return {Promise<string>}\n */\nexport const getPeriodFor = async (dao, candidate) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.periodFor(candidate).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} candidate address\n * @return {Promise<boolean>}\n */\nexport const getIsInitialized = async (dao, candidate) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.isInitialized(candidate).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @param {string} candidate address\n * @return {Promise<string>}\n */\nexport const getRecordedVote = async (dao, account, candidate) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.recordedVote(account, candidate).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @param {number} epoch number\n * @return {Promise<string>}\n */\nexport const getBalanceOfCoupons = async (dao, account, epoch) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.balanceOfCoupons(account, epoch).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @param {number[]} epochs number[]\n * @return {Promise<string[]>}\n */\nexport const getBatchBalanceOfCoupons = async (dao, account, epochs) => {\n  const calls = epochs.map((epoch) => getBalanceOfCoupons(dao, account, epoch));\n  return Promise.all(calls);\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @param {number} epoch number\n * @return {Promise<string>}\n */\nexport const getBalanceOfCouponsUnderlying = async (dao, account, epoch) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.balanceOfCouponUnderlying(account, epoch).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string} account address\n * @param {number[]} epochs number[]\n * @return {Promise<string[]>}\n */\nexport const getBatchBalanceOfCouponsUnderlying = async (\n  dao,\n  account,\n  epochs\n) => {\n  const calls = epochs.map((epoch) =>\n    getBalanceOfCouponsUnderlying(dao, account, epoch)\n  );\n  return Promise.all(calls);\n};\n\n/**\n *\n * @param {string} dao address\n * @param {number} epoch address\n * @return {Promise<string>}\n */\nexport const getOutstandingCoupons = async (dao, epoch) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.outstandingCoupons(epoch).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {number} epoch number\n * @return {Promise<string>}\n */\nexport const getCouponsExpiration = async (dao, epoch) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.couponsExpiration(epoch).call();\n};\n\n/**\n *\n * @param {string} dao address\n * @param {number[]} epochs number[]\n * @return {Promise<string[]>}\n */\nexport const getBatchCouponsExpiration = async (dao, epochs) => {\n  const calls = epochs.map((epoch) => getCouponsExpiration(dao, epoch));\n  return Promise.all(calls);\n};\n\n/**\n *\n * @param {string} dao address\n * @param {string|BigNumber} amount uint256\n * @return {Promise<string>}\n */\nexport const getCouponPremium = async (dao, amount) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods\n    .couponPremium(new BigNumber(amount).toFixed())\n    .call();\n};\n\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\nexport const getImplementation = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.implementation().call();\n};\n\n/**\n *\n * @param {string} dao address\n * @return {Promise<string>}\n */\nexport const getPoolBonding = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.poolBonding().call();\n};\n\nexport const getPoolLP = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.poolLP().call();\n};\n\nexport const getPoolGov = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  return daoContract.methods.poolGov().call();\n};\n\n/**\n *\n * @param {string} dao\n * @param {string} account\n * @return {Promise<any[]>}\n */\nexport const getCouponEpochs = async (dao, account) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  const purchaseP = daoContract.getPastEvents('CouponPurchase', {\n    filter: { account },\n    fromBlock: 0,\n  });\n  const transferP = daoContract.getPastEvents('CouponTransfer', {\n    filter: { to: account },\n    fromBlock: 0,\n  });\n  const [bought, given] = await Promise.all([purchaseP, transferP]);\n  const events = bought\n    .map((e) => ({\n      epoch: e.returnValues.epoch,\n      amount: e.returnValues.couponAmount,\n    }))\n    .concat(given.map((e) => ({ epoch: e.returnValues.epoch, amount: 0 })));\n\n  const couponEpochs = [\n    ...events\n      .reduce((map, event) => {\n        const { epoch, amount } = event;\n        const prev = map.get(epoch);\n\n        if (prev) {\n          map.set(epoch, {\n            epoch,\n            coupons: prev.coupons.plus(new BigNumber(amount)),\n          });\n        } else {\n          map.set(epoch, { epoch, coupons: new BigNumber(amount) });\n        }\n\n        return map;\n      }, new Map())\n      .values(),\n  ];\n\n  return couponEpochs.sort((a, b) => a - b);\n};\n\n/**\n *\n * @param {string} dao\n * @return {Promise<any[]>}\n */\nexport const getAllProposals = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  const payload = (\n    await daoContract.getPastEvents('Proposal', {\n      fromBlock: 0,\n    })\n  ).map((event) => {\n    const prop = event.returnValues;\n    prop.blockNumber = event.blockNumber;\n    return prop;\n  });\n  return payload.sort((a, b) => b.blockNumber - a.blockNumber);\n};\n\n/**\n *\n * @param {string} dao\n * @return {Promise<any[]>}\n */\nexport const getAllRegulations = async (dao) => {\n  const daoContract = new web3.eth.Contract(daoAbi, dao);\n  const increaseP = daoContract.getPastEvents('SupplyIncrease', {\n    fromBlock: 0,\n  });\n  const decreaseP = daoContract.getPastEvents('SupplyDecrease', {\n    fromBlock: 0,\n  });\n  const neutralP = daoContract.getPastEvents('SupplyNeutral', { fromBlock: 0 });\n\n  const [increase, decrease, neutral] = await Promise.all([\n    increaseP,\n    decreaseP,\n    neutralP,\n  ]);\n\n  const events = increase\n    .map((e) => ({ type: 'INCREASE', data: e.returnValues }))\n    .concat(decrease.map((e) => ({ type: 'DECREASE', data: e.returnValues })))\n    .concat(neutral.map((e) => ({ type: 'NEUTRAL', data: e.returnValues })));\n\n  return events.sort((a, b) => b.data.epoch - a.data.epoch);\n};\n\n// Uniswap Protocol\n\nexport const getCost = async (amount) => {\n  const exchange = new web3.eth.Contract(uniswapRouterAbi, UniswapV2Router02);\n  // eslint-disable-next-line no-unused-vars\n  const [inputAmount, _] = await exchange.methods\n    .getAmountsIn(new BigNumber(amount).toFixed(), [DAI.addr, QSD.addr])\n    .call();\n  return inputAmount;\n};\n\nexport const getProceeds = async (amount) => {\n  const exchange = new web3.eth.Contract(uniswapRouterAbi, UniswapV2Router02);\n  // eslint-disable-next-line no-unused-vars\n  const [_, outputAmount] = await exchange.methods\n    .getAmountsOut(new BigNumber(amount).toFixed(), [QSD.addr, DAI.addr])\n    .call();\n  return outputAmount;\n};\n\nexport const getReserves = async () => {\n  const exchange = new web3.eth.Contract(uniswapPairAbi, UNI.addr);\n  return exchange.methods.getReserves().call();\n};\n\nexport const getInstantaneousQSDPrice = async () => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const token0Balance = new BigNumber(reserve.reserve0);\n  const token1Balance = new BigNumber(reserve.reserve1);\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return token0Balance\n      .multipliedBy(new BigNumber(10).pow(18))\n      .dividedBy(token1Balance);\n  }\n  return token1Balance\n    .multipliedBy(new BigNumber(10).pow(18))\n    .dividedBy(token0Balance);\n};\n\nexport const getUniswapLiquidity = async () => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const token0Balance = new BigNumber(reserve.reserve0);\n  const token1Balance = new BigNumber(reserve.reserve1);\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return {\n      dai: token0Balance,\n      qsd: token1Balance,\n    };\n  }\n  return {\n    dai: token1Balance,\n    qsd: token0Balance,\n  };\n};\n\nexport const getUserLPWallet = async (user) => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const uniTotalSupplyStr = await getTokenTotalSupply(UNI.addr);\n  const uniBondedSupplyStr = await getTokenBalance(UNI.addr, user);\n\n  const token0Balance = toFloat(toTokenUnitsBN(reserve.reserve0, 18));\n  const token1Balance = toFloat(toTokenUnitsBN(reserve.reserve1, 18));\n\n  const ratio =\n    toFloat(toTokenUnitsBN(uniBondedSupplyStr, 18)) /\n    toFloat(toTokenUnitsBN(uniTotalSupplyStr, 18));\n\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return {\n      dai: token0Balance * ratio,\n      qsd: token1Balance * ratio,\n    };\n  }\n  return {\n    dai: token1Balance * ratio,\n    qsd: token0Balance * ratio,\n  };\n};\n\nexport const getUserLPBonded = async (user) => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const uniTotalSupplyStr = await getTokenTotalSupply(UNI.addr);\n  const uniBondedSupplyStr = await getPoolBalanceOfBonded(\n    await getPoolLPAddress(),\n    user\n  );\n\n  const token0Balance = toFloat(toTokenUnitsBN(reserve.reserve0, 18));\n  const token1Balance = toFloat(toTokenUnitsBN(reserve.reserve1, 18));\n\n  const ratio =\n    toFloat(toTokenUnitsBN(uniBondedSupplyStr, 18)) /\n    toFloat(toTokenUnitsBN(uniTotalSupplyStr, 18));\n\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return {\n      dai: token0Balance * ratio,\n      qsd: token1Balance * ratio,\n    };\n  }\n  return {\n    dai: token1Balance * ratio,\n    qsd: token0Balance * ratio,\n  };\n};\n\nexport const getUserLPStaged = async (user) => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const uniTotalSupplyStr = await getTokenTotalSupply(UNI.addr);\n  const uniBondedSupplyStr = await getPoolBalanceOfStaged(\n    await getPoolLPAddress(),\n    user\n  );\n\n  const token0Balance = toFloat(toTokenUnitsBN(reserve.reserve0, 18));\n  const token1Balance = toFloat(toTokenUnitsBN(reserve.reserve1, 18));\n\n  const ratio =\n    toFloat(toTokenUnitsBN(uniBondedSupplyStr, 18)) /\n    toFloat(toTokenUnitsBN(uniTotalSupplyStr, 18));\n\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return {\n      dai: token0Balance * ratio,\n      qsd: token1Balance * ratio,\n    };\n  }\n  return {\n    dai: token1Balance * ratio,\n    qsd: token0Balance * ratio,\n  };\n};\n\nexport const getLPStagedLiquidity = async () => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const uniTotalSupplyStr = await getTokenTotalSupply(UNI.addr);\n  const uniBondedSupplyStr = await getPoolTotalStaged(await getPoolLPAddress());\n\n  const token0Balance = toFloat(toTokenUnitsBN(reserve.reserve0, 18));\n  const token1Balance = toFloat(toTokenUnitsBN(reserve.reserve1, 18));\n\n  const ratio =\n    toFloat(toTokenUnitsBN(uniBondedSupplyStr, 18)) /\n    toFloat(toTokenUnitsBN(uniTotalSupplyStr, 18));\n\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return {\n      dai: token0Balance * ratio,\n      qsd: token1Balance * ratio,\n    };\n  }\n  return {\n    dai: token1Balance * ratio,\n    qsd: token0Balance * ratio,\n  };\n};\n\nexport const getLPBondedLiquidity = async () => {\n  const [reserve, token0] = await Promise.all([getReserves(), getToken0()]);\n  const uniTotalSupplyStr = await getTokenTotalSupply(UNI.addr);\n  const uniBondedSupplyStr = await getPoolTotalBonded(await getPoolLPAddress());\n\n  const token0Balance = toFloat(toTokenUnitsBN(reserve.reserve0, 18));\n  const token1Balance = toFloat(toTokenUnitsBN(reserve.reserve1, 18));\n\n  const ratio =\n    toFloat(toTokenUnitsBN(uniBondedSupplyStr, 18)) /\n    toFloat(toTokenUnitsBN(uniTotalSupplyStr, 18));\n\n  if (token0.toLowerCase() === DAI.addr.toLowerCase()) {\n    return {\n      dai: token0Balance * ratio,\n      qsd: token1Balance * ratio,\n    };\n  }\n  return {\n    dai: token1Balance * ratio,\n    qsd: token0Balance * ratio,\n  };\n};\n\nexport const getToken0 = async () => {\n  const exchange = new web3.eth.Contract(uniswapPairAbi, UNI.addr);\n  return exchange.methods.token0().call();\n};\n\n// Pool\n\nexport const getPoolStatusOf = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.statusOf(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfBonded = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfBonded(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfStaged = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfStaged(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfRewarded = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfRewarded(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfClaimable = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfClaimable(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolTotalBonded = async (pool) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.totalBonded().call();\n};\n\nexport const getPoolTotalStaged = async (pool) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.totalStaged().call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolTotalRewarded1 = async (pool) => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.totalRewarded1().call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolTotalRewarded2 = async (pool) => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.totalRewarded2().call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolTotalClaimable1 = async (pool) => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.totalClaimable1().call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolTotalClaimable2 = async (pool) => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.totalClaimable2().call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfRewarded1 = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.balanceOfRewarded1(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfRewarded2 = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.balanceOfRewarded2(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfClaimable1 = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.balanceOfClaimable1(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfClaimable2 = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolBondingAbi, pool);\n  return poolContract.methods.balanceOfClaimable2(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolFluidUntil = async (pool, account) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n\n  // no need to look back further than the pool lockup period\n  const blockNumber = await web3.eth.getBlockNumber();\n  const fromBlock = blockNumber - (POOL_EXIT_LOCKUP_EPOCHS + 1) * 8640;\n  const bondP = poolContract.getPastEvents('Bond', {\n    filter: { account: account },\n    fromBlock: fromBlock,\n  });\n  const unbondP = poolContract.getPastEvents('Unbond', {\n    filter: { account: account },\n    fromBlock: fromBlock,\n  });\n\n  const [bond, unbond] = await Promise.all([bondP, unbondP]);\n  const events = bond\n    .map((e) => e.returnValues)\n    .concat(unbond.map((e) => e.returnValues));\n\n  const startEpoch = events.reduce((epoch, event) => {\n    if (epoch > event.start) return epoch;\n    else return event.start;\n  }, 0);\n\n  // these contract events report the start epoch as one more than the active\n  // epoch when the event is emitted, so we subtract 1 here to adjust\n  return (parseInt(startEpoch, 10) + POOL_EXIT_LOCKUP_EPOCHS - 1).toString();\n};\n\nexport const getDaoIsBootstrapping = async () => {\n  const epoch = await getEpoch(QSDS.addr);\n  const daoContract = new web3.eth.Contract(daoAbi, Dao);\n  const isBootstrapping = await daoContract.methods\n    .bootstrappingAt(epoch)\n    .call();\n\n  return isBootstrapping;\n};\n\nexport const getExpansionAmount = async () => {\n  const price = await getTWAPPrice();\n  const isBootstrapping = await getDaoIsBootstrapping();\n\n  const totalSupplyStr = await getTokenTotalSupply(QSD.addr);\n  const totalSupply = toFloat(toTokenUnitsBN(totalSupplyStr, QSD.decimals));\n\n  // 5.4% max supply\n  const MAX_SUPPLY_EXPANSION = 0.054;\n\n  if (isBootstrapping) {\n    return totalSupply * MAX_SUPPLY_EXPANSION;\n  }\n\n  const delta = Math.min(price - 1, MAX_SUPPLY_EXPANSION);\n  const newSupply = totalSupply * delta;\n\n  if (price < 1) {\n    return 0;\n  }\n\n  return newSupply;\n};\n\nexport const getTWAPPrice = async () => {\n  const daoContract = new web3.eth.Contract(daoAbi, Dao);\n  const pairContract = new web3.eth.Contract(uniswapPairAbi, UNI.addr);\n\n  const oracleAddress = await daoContract.methods.oracle().call();\n  const oracleContract = new web3.eth.Contract(oracleAbi, oracleAddress);\n\n  // Gets cumulative price\n\n  // eslint-disable-next-line\n  const cumulativePriceStr = await oracleContract.methods._cumulative().call();\n  // eslint-disable-next-line\n  const oracleTimestampStr = await oracleContract.methods._timestamp().call();\n\n  const cumulativePrice = parseFloat(\n    formatBN(toTokenUnitsBN(cumulativePriceStr, 18), 2).split(',').join('')\n  );\n  const oracleTimestamp = parseInt(oracleTimestampStr, 10);\n\n  const token0 = await pairContract.methods.token0().call();\n\n  const resp = await pairContract.methods.getReserves().call();\n  const blockTimestampLast = parseInt(resp.blockTimestampLast, 10);\n  const price0CumulativeLastStr = await pairContract.methods\n    .price0CumulativeLast()\n    .call();\n  const price1CumulativeLastStr = await pairContract.methods\n    .price1CumulativeLast()\n    .call();\n\n  const price0Cumulative = parseFloat(\n    formatBN(toTokenUnitsBN(price0CumulativeLastStr, 18), 2).split(',').join('')\n  );\n  const price1Cumulative = parseFloat(\n    formatBN(toTokenUnitsBN(price1CumulativeLastStr, 18), 2).split(',').join('')\n  );\n\n  const timeDelta = blockTimestampLast - oracleTimestamp;\n\n  const price0 =\n    (((price0Cumulative - cumulativePrice) / timeDelta) * 1e18) / 2 ** 112;\n  const price1 =\n    (((price1Cumulative - cumulativePrice) / timeDelta) * 1e18) / 2 ** 112;\n\n  if (token0.toLowerCase() === QSD.addr.toLowerCase()) {\n    return price0;\n  }\n\n  return price1;\n};\n"]},"metadata":{},"sourceType":"module"}